-[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/astro/tree/latest/examples/basics)
-[![Open with CodeSandbox](https://assets.codesandbox.io/github/button-edit-lime.svg)](https://codesandbox.io/p/sandbox/github/withastro/astro/tree/latest/examples/basics)
-[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/withastro/astro?devcontainer_path=.devcontainer/basics/devcontainer.json)
-
-> üßë‚ÄçüöÄ **Seasoned astronaut?** Delete this file. Have fun!
+At the moment, we're using [remark-gfm](https://github.com/remarkjs/remark-gfm) for GitHub Flavored Markdown, and [remark-mermaid](https://github.com/mermaid-js/mermaid) for Mermaid diagrams. 
 
-![just-the-basics](https://github.com/withastro/astro/assets/2244813/a0a5533c-a856-4198-8470-2d67b1d7c554)
+We have working:
+- Codeblocks
+- Tables
--
+- iFrames with HTML and CSS (mainly used for embedding videos)
+- Callouts (basic).
+- Footnotes (one set per page)
+- Image Embeds (external, using an image href) (basic, no styling or sizing)
+- Image Galleries (basic, no styling or sizing)
+- Mermaid Diagrams
+- Table of Contents (basic, having trouble with nested headers and ordered lists)
 
-## üöÄ Project Structure
+#### TODO for Extended Markdown:
+- Callouts (advanced, using Syntax of the Callout class box to route to different components for different use cases and styles)
--
+     }
+   </style>
+ </div>
+ 
\ No newline at end of file
diff --git a/src/components/codeblocks/MermaidChart.astro b/src/components/codeblocks/MermaidChart.astro
new file mode 100644
index 0000000..f7a831d
--- /dev/null
+++ b/src/components/codeblocks/MermaidChart.astro
@@ -0,0 +1,139 @@
+---
+const { code } = Astro.props;
+const chartId = `mermaid-chart-${Math.random().toString(36).slice(2, 10)}`;
+import ExpandIcon from '@assets/Icons/arrows-maximize.svg';
+import CollapseIcon from '@assets/Icons/arrows-minimize.svg';
+
+---
+<div id={chartId} class="mermaid-breakout" tabindex="0">
+  <div class="mermaid-chart-shell">
+    <!-- Accessible, pure HTML/CSS expand/collapse toggle for Mermaid chart -->
+     <!-- TODO: Make fullscreen toggle work -->
+    <!-- <input type="checkbox" id={`toggle-${chartId}`} class="mermaid-toggle-checkbox" hidden>
+    <label for={`toggle-${chartId}`} class="mermaid-expand-toggle" tabindex="0" aria-label="Expand/collapse chart">
+      <span class="expand-icon">
+        <ExpandIcon class="icon-expand" />
+        <CollapseIcon class="icon-collapse" />
+      </span>
+    </label> -->
+    <div class="mermaid">{code}</div>
+  </div>
+</div>
+
+<!-- Fullscreen modal markup will be injected by JS when needed -->
+
+
+
+<style>
+.mermaid-breakout {
+  position: relative;
+  z-index: 9999;
+  left: 50%;
+  right: 50%;
+  width: 100vw;
--
+  align-items: center;
+  justify-content: center;
+  background: transparent;
+  box-sizing: border-box;
+}
+.mermaid-chart-shell {
+  position: relative;
+  min-width: 600px;
+  width: 80vw;
+  max-width: 1000px;
+  margin: 1.25rem 0;
--
+  border: 2px solid var(--lossless-accent--brightest);
+  margin: 0 auto;
+  display: block;
+  padding: 1rem;
+}
+.mermaid {
+  background: transparent !important;
+  box-shadow: none !important;
+  border-radius: 0 !important;
+  padding: 0 !important;
+  margin: 0 !important;
+}
+.mermaid-chart-shell .mermaid-expand-toggle {
+  position: absolute;
+  top: 0.75rem;
+  right: 1.5rem;
+  z-index: 10;
+  background: none;
--
+  padding: 0.25rem 0.5rem;
+  cursor: pointer;
+  opacity: 0.7;
+  transition: opacity 0.2s;
+}
+.mermaid-chart-shell .mermaid-expand-toggle:hover, .mermaid-chart-shell .mermaid-expand-toggle:focus {
+  opacity: 1;
+  outline: 2px solid #88f;
+}
+/* Only show ExpandIcon when NOT checked */
+.icon-collapse { display: none; }
+.mermaid-toggle-checkbox:checked + .mermaid-expand-toggle .icon-expand { display: none; }
+.mermaid-toggle-checkbox:checked + .mermaid-expand-toggle .icon-collapse { display: inline; }
+</style>
+
+
+
+<script is:inline>
+  // Mermaid rendering logic (custom base theme, transparent background)
+  // Dynamically resolve CSS variable for primary text color at runtime
+  function getCssVar(name, fallback) {
+    return getComputedStyle(document.documentElement).getPropertyValue(name).trim() || fallback;
+  }
+
--
+  const secondaryTextClr = getCssVar('--clr-hippie-blue', '#50a3b3');
+  const clusterBkg = getCssVar('--clr-gunmetal', '#283139');
+  const lineClr = getCssVar('--clr-aqua-brightest', '#69e2e3');
+  const fontFmly = 'Open Sans, sans-serif';
+
+  const mermaidConfig = {
+    startOnLoad: true,
+    theme: 'base', // Use base for full customizability
+    themeVariables: {
+      darkMode: true,
+      background: 'transparent', // No background for SVG/chart
--
+      fontFamily: fontFmly,
+      // Add more custom variables here as needed
+    }
+  };
+
+  if (!window.__MERMAID_LOADED__) {
+    import('https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs')
+      .then((mermaid) => {
+        mermaid.default.initialize(mermaidConfig);
+        mermaid.default.run();
+        window.mermaid = mermaid.default;
+        window.__MERMAID_LOADED__ = true;
+      })
+      .catch(console.error);
+  } else {
+    window.mermaid?.initialize(mermaidConfig);
+    window.mermaid?.run();
+  }
+</script>
diff --git a/src/components/codeblocks/MermaidChartFullscreen.astro b/src/components/codeblocks/MermaidChartFullscreen.astro
new file mode 100644
index 0000000..09a9263
--- /dev/null
+++ b/src/components/codeblocks/MermaidChartFullscreen.astro
@@ -0,0 +1,57 @@
+---
+// Fullscreen test ‚Äî no toggles
+const { code } = Astro.props;
+---
+
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <title>Fullscreen Mermaid Test</title>
+    <style>
+      html, body {
+        margin: 0;
+        padding: 0;
+        width: 100vw;
--
+        color: white;
+        overflow: hidden;
+        font-family: sans-serif;
+      }
+
+      .fullscreen-mermaid {
+        width: 100vw;
+        height: 100vh;
+        display: flex;
+        align-items: center;
+        justify-content: center;
+      }
+
+      .mermaid {
+        width: 95vw;
+        height: 95vh;
+      }
+    </style>
+  </head>
+  <body>
+    <div class="fullscreen-mermaid">
+      <div class="mermaid">
+        {code}
+      </div>
+    </div>
+
+    <script type="module">
+      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
+
+      mermaid.initialize({
+        startOnLoad: true,
+        theme: 'dark',
+        themeVariables: {
+          background: 'transparent',
+        },
+      });
+
+      mermaid.run();
+    </script>
+  </body>
+</html>
diff --git a/src/components/codeblocks/MermaidChartInline.astro b/src/components/codeblocks/MermaidChartInline.astro
new file mode 100644
index 0000000..62df252
--- /dev/null
+++ b/src/components/codeblocks/MermaidChartInline.astro
@@ -0,0 +1,81 @@
+---
+// Props: chartId, code, ExpandIcon
+const { chartId, code, ExpandIcon } = Astro.props;
+---
+<!-- Inline (breakout) Mermaid chart with expand button -->
+<div id={chartId} class="mermaid-breakout" tabindex="0">
+  <div class="mermaid-chart-shell">
+    <button
+      class="mermaid-expand-toggle"
+      aria-label="Expand chart"
+      tabindex="0"
+      onclick={`window.toggleMermaidExpand('${chartId}')`}
+      data-expand-icon
+    >
+      <span class="expand-icon"><ExpandIcon /></span>
+    </button>
+    <div class="mermaid">{code}</div>
+  </div>
+</div>
+<style>
+.mermaid-breakout {
+  position: relative;
+  left: 50%;
+  right: 50%;
+  width: 100vw;
+  margin-left: -50vw;
--
+  align-items: center;
+  justify-content: center;
+  background: transparent;
+  box-sizing: border-box;
+}
+.mermaid-chart-shell {
+  position: relative;
+  min-width: 600px;
+  width: 80vw;
+  max-width: 1000px;
+  margin: 1.25rem 0;
--
+  border: 2px solid var(--lossless-accent--brightest);
+  margin: 0 auto;
+  display: block;
+  padding: 1rem;
+}
+.mermaid {
+  background: transparent !important;
+  box-shadow: none !important;
+  border-radius: 0 !important;
+  padding: 0 !important;
+  margin: 0 !important;
+}
+.mermaid-chart-shell .mermaid-expand-toggle {
+  position: absolute;
+  top: 0.75rem;
+  right: 1.5rem;
+  z-index: 10;
+  background: none;
--
+  padding: 0.25rem 0.5rem;
+  cursor: pointer;
+  opacity: 0.7;
+  transition: opacity 0.2s;
+}
+.mermaid-chart-shell .mermaid-expand-toggle:hover, .mermaid-chart-shell .mermaid-expand-toggle:focus {
+  opacity: 1;
+  outline: 2px solid #88f;
+}
+</style>
+<script is:inline>
+window.toggleMermaidExpand = function(id) {
+  // Dispatch a custom event to the parent to expand
+  window.dispatchEvent(new CustomEvent('mermaid:expand', { detail: { id } }));
+};
+</script>
diff --git a/src/components/markdown/AstroMarkdown.astro b/src/components/markdown/AstroMarkdown.astro
index 75e1c0f..ae1842b 100644
--- a/src/components/markdown/AstroMarkdown.astro
+++ b/src/components/markdown/AstroMarkdown.astro
@@ -4,12 +4,26 @@ import ArticleCallout from './callouts/ArticleCallout.astro';
 import ArticleCitationsBlock from './citations/ArticleCitations.astro';
 import ArticleCitation from './citations/ArticleCitation.astro';
 import BaseCodeblock from '../codeblocks/BaseCodeblock.astro';
+import MermaidChart from '../codeblocks/MermaidChart.astro';
+import TableOfContents from './TableOfContents.astro';
+import ImageGallery from './ImageGallery.astro';
+import ToolingGallery from './ToolingGallery.astro';
+import { getCollection } from "astro:content";
+import { transformContentPathToRoute } from '@utils/routing/routeManager';
--
+    // Extract only the first text node (primary heading text)
+
 
 interface Props {
-    /**
-     * Accepts compiledContent HTML (rehype output, e.g. with mermaid diagrams) if provided.
-     */
-    compiledContent?: string;
     /**
      * Markdown AST node interface for AstroMarkdown.astro
      * - 'lang' is present on 'code' nodes and specifies the code language (e.g., 'js', 'python').
--
 ---
 
-// === Render compiledContent as HTML if present, else render AST ===
-/**
- * If compiledContent (HTML string) is provided, render it directly.
- * This ensures that HTML output from rehype plugins (e.g., rehype-mermaid, rehype-stringify)
- * is rendered as intended, including inline SVGs and other HTML features.
- *
- * If compiledContent is not present, fall back to recursive AST rendering.
- */
-{Astro.props.compiledContent ? (
--
+
+  if (lang === "toolingGallery") {
+    return
+  }
+
+  if (lang === "mermaid") {
+    return <MermaidChart code={value} />;
+  }
+
+  if (lang === "imageGallery") {
+    return <ImageGallery code={value} dirpath={data.dirpath} />;
+  }
--
 import remarkCitations from '@utils/markdown/remark-citations';
+import remarkTableOfContents from '@utils/markdown/remark-toc';
 import DebugMarkdown from '@components/markdown/DebugMarkdown.astro';
 import { markdownDebugger } from '@utils/markdown/markdownDebugger';
-import remarkRehype from 'remark-rehype';
-import rehypeMermaid from 'rehype-mermaid';
-import rehypeStringify from 'rehype-stringify';
-import remarkMermaidTag from '@utils/markdown/remark-mermaid-tag';
-import rehypeMermaidInline from '@utils/markdown/rehype-mermaid-inline';
-
-/**
- * Helper rehype plugin to transfer mermaidId from MDAST node.data to HAST code/pre properties.
- * Ensures the ID is available for rehype-mermaid-inline to map SVGs correctly.
- */
-import { visit } from 'unist-util-visit';
-function rehypePreserveMermaidId() {
-  return (tree) => {
-    visit(tree, 'element', (node) => {
-      if (node.tagName === 'code' && node.data && node.data.hProperties && node.data.hProperties['data-mermaid-id']) {
-        node.properties = node.properties || {};
-        node.properties['data-mermaid-id'] = node.data.hProperties['data-mermaid-id'];
-      }
-    });
-  };
-}
 
--
   Component: any;
@@ -45,98 +24,32 @@ interface Props {
 
 const { Component, data, content, markdownFile } = Astro.props;
 
-// === BEGIN: Mermaid Variable Interpolation ===
-// Helper function: interpolate variables in mermaid code blocks in Markdown
-function interpolateMermaidVariables(markdown, variables = {}) {
-  // Defensive: always coerce markdown to string
-  const safeMarkdown = typeof markdown === 'string' ? markdown : '';
-  // Replace variables in all mermaid code blocks
-  return safeMarkdown.replace(/```mermaid([\s\S]*?)```/g, (_unused, code) => {
-    // Defensive: ensure code is always a string fallback
-    let interpolated = typeof code === 'string' ? code : '';
-    // Replace ${variable} and [...variable] patterns
-    interpolated = interpolated
-      // Replace ${variable} patterns
--
-      });
-    // Remove [variable] and [...variable] only when inside a path or label (i.e., after / or .)
-    interpolated = interpolated.replace(/([/.])\[(?:\.\.\.)?[a-zA-Z0-9_\-\.]+\]/g, '$1');
-    // Normalize all non-breaking and exotic spaces to standard space (U+0020)
-    interpolated = interpolated.replace(/[\u00A0\u202F]/g, ' ');
-    return `\`\`\`mermaid${interpolated}\`\`\``;
-  });
-}
-// === END: Mermaid Variable Interpolation ===
-
-// Get variables from data or context (expand as needed)
-const variables = { tag: data?.tag || '', collection: data?.collection || '' };
-const preprocessedContent = interpolateMermaidVariables(content, variables);
-
 // Process with our custom remark plugins to get MDAST
 const processor = unified()
   .use(remarkParse)           // 1. Parse markdown to MDAST
   .use(remarkGfm)
   .use(remarkImages)         
   .use(remarkBacklinks)          
-  // .use(remarkCallouts)      
   .use(remarkCitations)
-  .use(remarkMermaidTag) // Tag mermaid codeblocks in MDAST
-  .use(remarkRehype)
-  .use(rehypePreserveMermaidId) // Carry mermaidId to HAST
-  .use(rehypeMermaid, {
-    mermaidConfig: {
-      theme: 'dark',
-      themeVariables: {
-        fontFamily: 'var(--ff-body, Arial, sans-serif)',
-        background: 'transparent',
-      }
-    }
-  })
-  // DEBUG: Output HAST after rehypeMermaid, before rehypeMermaidInline
-  .use(() => (tree) => {
-    markdownDebugger.writeDebugFile('hast-after-rehypeMermaid', tree);
-    console.log('=== HAST after rehypeMermaid ===', JSON.stringify(tree, null, 2));
-  })
-  .use(rehypeMermaidInline) // Inline SVGs at codeblock position
-  .use(rehypeStringify)
+  .use(remarkTableOfContents)
 
 // First parse to MDAST
-const mdast = processor.parse(preprocessedContent || '');
+const mdast = processor.parse(content || '');
 // console.log("=== Raw MDAST ===", JSON.stringify(mdast, null, 2));
 
 const transformedMdast = await processor.run(mdast);
 
-// Generate HTML with only rehype and rehype-mermaid (no remark plugins)
-const astroCompiledHTML = await processor.process(preprocessedContent || '');
-
 // Debug output to see AST structure
 markdownDebugger.log('OneArticle.astro Debug');
 markdownDebugger.writeDebugFile('transformed-mdast', transformedMdast);
--
-markdownDebugger.verbose('Compiled HTML:', html);
-
 ---
 
-<head>
-  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/mermaid@10.9.0/dist/mermaid.min.css">
-</head>
-
 <div class="one-article">
   {markdownFile && <DebugMarkdown content={content} markdownFile={markdownFile} />}
   <Component 
--
index 0000000..18c1134
--- /dev/null
+++ b/src/pages/test.astro
@@ -0,0 +1,32 @@
+---
+import MermaidChartFullScreen from '@components/codeblocks/MermaidChartFullscreen.astro';
+
+const code = `
+  graph TD
+    A[Start] --> B{Is it working?}
+    B -->|Yes| C[Great!]
--
+---
+
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <title>Test Fullscreen Mermaid</title>
+    <style>
+      html, body {
+        margin: 0;
+        padding: 0;
+        width: 100vw;
--
+        font-family: sans-serif;
+      }
+    </style>
+  </head>
+  <body>
+    <MermaidChartFullScreen code={code} />
+  </body>
+</html>
diff --git a/src/pages/thread/[magazine].astro b/src/pages/thread/[magazine].astro
index 4986c47..8207d80 100644
--- a/src/pages/thread/[magazine].astro
--
-    
-    markdownDebugger.endPlugin('Rehype Callout Handler');
-    return tree;
-  };
-}
diff --git a/src/utils/markdown/rehype-mermaid-inline.ts b/src/utils/markdown/rehype-mermaid-inline.ts
deleted file mode 100644
index 4282a0b..0000000
--- a/src/utils/markdown/rehype-mermaid-inline.ts
+++ /dev/null
@@ -1,53 +0,0 @@
-/**
- * rehype-mermaid-inline.ts
- *
- * Custom rehype plugin to replace tagged Mermaid codeblocks (with unique IDs) with their corresponding SVGs after rehypeMermaid runs.
- * This ensures SVGs are rendered inline at the original codeblock position.
- *
- * Usage: .use(rehypeMermaidInline)
- *
- * This plugin expects that codeblocks have a `data-mermaid-id` property, and that the SVGs generated by rehypeMermaid are present in the HAST.
- */
-
-import type { Root, Element } from 'hast';
-import { visit } from 'unist-util-visit';
-
-/**
- * Finds SVG nodes in the HAST and maps them by their associated Mermaid ID.
- */
-function buildSvgMap(tree: Root): Record<string, Element> {
-  const svgMap: Record<string, Element> = {};
-  visit(tree, 'element', (node: Element) => {
-    if (node.tagName === 'svg' && node.properties && node.properties['data-mermaid-id']) {
-      svgMap[node.properties['data-mermaid-id'] as string] = node;
-    }
-  });
-  return svgMap;
-}
-
-/**
- * Main rehype plugin function.
- */
-export default function rehypeMermaidInline() {
-  return (tree: Root) => {
-    // Build a map of SVGs by mermaidId
-    const svgMap = buildSvgMap(tree);
-    // Replace codeblock placeholders with SVGs
-    visit(tree, 'element', (node: Element, index, parent) => {
-      if (
-        node.tagName === 'pre' &&
-        node.children &&
-        node.children[0] &&
-        (node.children[0] as Element).tagName === 'code' &&
-        (node.children[0] as Element).properties &&
-        (node.children[0] as Element).properties['data-mermaid-id']
-      ) {
-        const mermaidId = (node.children[0] as Element).properties['data-mermaid-id'] as string;
-        const svg = svgMap[mermaidId];
-        if (svg && parent && typeof index === 'number') {
-          parent.children[index] = svg;
-        }
-      }
-    });
--
+      console.log('=== remarkCitations: Finished ===');
+    }
   };
 };
 
diff --git a/src/utils/markdown/remark-mermaid-tag.ts b/src/utils/markdown/remark-mermaid-tag.ts
deleted file mode 100644
index f0786a6..0000000
--- a/src/utils/markdown/remark-mermaid-tag.ts
+++ /dev/null
@@ -1,41 +0,0 @@
-/**
- * remark-mermaid-tag.ts
- *
- * Custom remark plugin to tag Mermaid codeblocks in the Markdown AST (MDAST).
- * Adds a unique identifier and a flag to each Mermaid codeblock for downstream processing.
- *
- * Usage: .use(remarkMermaidTag)
- */
-
-// Fix: Use type-only import for Node to comply with verbatimModuleSyntax
-import type { Node } from 'unist';
-import { visit } from 'unist-util-visit';
-
-let mermaidCounter = 0;
-
-/**
- * Generates a unique ID for each Mermaid codeblock in the document.
- *
- * @returns {string} A unique identifier for the Mermaid codeblock.
- */
-function generateUniqueId(): string {
-  return `mermaid-${Date.now()}-${mermaidCounter++}`;
-}
-
-/**
- * Custom remark plugin to tag Mermaid codeblocks in the Markdown AST (MDAST).
- * Adds a unique identifier and a flag to each Mermaid codeblock for downstream processing.
- *
- * Usage: .use(remarkMermaidTag)
- */
-export default function remarkMermaidTag() {
-  return (tree: Node) => {
-    visit(tree, 'code', (node: any) => {
-      if (node.lang === 'mermaid') {
-        if (!node.data) node.data = {};
-        node.data.isMermaid = true;
-        node.data.mermaidId = generateUniqueId();
-      }
-    });
-  };
-}
diff --git a/src/utils/markdown/remark-toc.ts b/src/utils/markdown/remark-toc.ts
