---
// site/src/layouts/DirectClientReaderLayout.astro

import { unified } from 'unified';
import remarkParse from 'remark-parse';
import remarkGfm from 'remark-gfm';
import remarkDirective from 'remark-directive';
import remarkImages from '@utils/markdown/remark-images'; 
import remarkBacklinks from '@utils/markdown/remark-backlinks';
import remarkCitations from '@utils/markdown/remark-citations';
import remarkTableOfContents from '@utils/markdown/remark-toc';
import { remarkDirectiveToComponent } from '@utils/markdown/remark-directives';
import type { Root } from 'mdast';

import MultiCollectionNavSidebar from '@components/articles/MultiCollectionNavSidebar.astro';
import OneArticleOnPage from '@components/articles/OneArticleOnPage.astro';
import { markdownDebugger } from '@utils/markdown/markdownDebugger';

// Props
interface Props {
  allContent: any[]; // All content from the MOC
  client: string;
  collections?: string[]; // List of collection names for reference
}

const { allContent, client, collections } = Astro.props as Props;

// Process all content entries
interface ProcessedContent {
  mdastNode: any;
  contentData: any;
  entry: any;
}

const processedContent: ProcessedContent[] = [];

for (const entry of allContent) {
  if (!entry) continue;
  
  try {
    const processor = unified()
      .use(remarkParse)
      .use(remarkGfm)
      .use(remarkDirective)       // Parse directive syntax
      .use(remarkDirectiveToComponent) // Preserve directives for AstroMarkdown
      .use(remarkImages) 
      .use(remarkBacklinks)
      .use(remarkCitations)
      .use(remarkTableOfContents);

    const mdast = processor.parse(entry.body || '');
    const mdastNode = await processor.run(mdast);

    const contentData = {
      path: entry.id,
      id: entry.id,
      collection: entry.collection,
      ...entry.data
    };

    processedContent.push({
      mdastNode,
      contentData,
      entry
    });
  } catch (error) {
    console.error(`Error processing content for ${entry.id}:`, error);
  }
}

---

<header class="client-header">
  <div class="client-header-inner">
    <h1 class="client-title">{client.charAt(0).toUpperCase() + client.slice(1)} Strategic Content</h1>
    <p class="client-subtitle">
      {processedContent.length} strategic insights from collections: {collections?.join(', ') || 'various sources'}
    </p>
  </div>
</header>

<div class="collection-reader-layout">
  <aside class="collection-sidebar">
    <div class="sidebar-inner">
      <MultiCollectionNavSidebar 
         entries={allContent} 
         currentSlug={null}
         mode="client"
         client={client}
         collections={collections}
       />
    </div>
  </aside>

  <main class="collection-reader-pane">
      {processedContent.map((content, index) => (
        <article class="content-article" data-collection={content.entry.collection}>
          <OneArticleOnPage 
            content={content.mdastNode} 
            data={content.contentData} 
          />
        </article>
      ))}
      
      {processedContent.length === 0 && (
        <div class="no-content">
          <h2>No content available</h2>
          <p>Check back later for updated content from collections: {collections?.join(', ') || 'unknown'}.</p>
        </div>
      )}
  </main>
</div>

<style>
.collection-reader-layout {
  display: flex;
  flex-direction: row;
  width: 100%;
  height: calc(100vh - 4rem); /* Fixed height minus header */
  overflow: hidden; /* Prevent overall scroll */
  max-width: 100%;
  box-sizing: border-box;
}

.collection-sidebar {
  width: 300px;
  min-width: 300px;
  max-width: 300px;
  flex-shrink: 0;
  border-right: 1px solid var(--clr-lossless-ui-btn-border, #ccc);
  overflow-y: auto; /* Independent scroll */
  overflow-x: hidden;
  position: relative;
  height: 100%;
  padding: 1rem;
  background: var(--clr-sidebar-bg, #111);
  transition: width 0.3s ease-in-out;
  scroll-behavior: smooth;
}

.sidebar-inner {
  width: 100%;
  min-width: 0;
}

.collection-reader-pane {
  flex: 1 1 auto;
  display: block;
  padding: 1rem 2rem;
  min-width: 0;
  overflow-y: auto; /* Independent scroll */
  overflow-x: hidden;
  max-width: 100%;
  height: 100%;
  scroll-behavior: smooth;
}

/* Custom scrollbar styling for better UX */
.collection-sidebar::-webkit-scrollbar,
.collection-reader-pane::-webkit-scrollbar {
  width: 8px;
}

.collection-sidebar::-webkit-scrollbar-track,
.collection-reader-pane::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 4px;
}

.collection-sidebar::-webkit-scrollbar-thumb,
.collection-reader-pane::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.3);
  border-radius: 4px;
}

.collection-sidebar::-webkit-scrollbar-thumb:hover,
.collection-reader-pane::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.5);
}

/* Mobile responsive styles */
@media (max-width: 1024px) {
  .collection-reader-layout {
    flex-direction: column;
    height: auto; /* Allow natural height on mobile */
    overflow: visible;
  }

  .collection-sidebar {
    position: relative;
    width: 100%;
    max-width: 100%;
    min-width: 100%;
    height: auto;
    border-right: none;
    border-bottom: 1px solid var(--clr-lossless-ui-btn-border, #ccc);
    padding: 1rem 0;
    padding-top: 1rem; /* Reduced padding */
    top: auto;
    box-sizing: border-box;
    flex-shrink: 0;
    max-height: 400px;
    overflow-y: auto;
    overflow-x: hidden;
    z-index: 1;
  }

  .collection-reader-pane {
    padding: 1rem;
    height: auto; /* Allow natural height on mobile */
    overflow: visible;
  }
}

/* Desktop hover effect for sidebar expansion */
@media (min-width: 1025px) {
  .collection-sidebar {
    width: 300px;
    min-width: 300px;
    max-width: 28vw;
    transition: width 0.3s ease-in-out, max-width 0.3s ease-in-out;
  }

  .collection-sidebar:hover {
    width: 28vw; /* Approximately 1.8x expansion on typical screens */
  }
}

.client-header {
  background: var(--clr-lossless-primary-dark);
  border-bottom: 1px solid var(--clr-lossless-primary-glass);
  padding: 2rem 0;
  margin-bottom: 2rem;
}

.client-header-inner {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 1.5rem;
  text-align: center;
}

.client-title {
  font-size: var(--fs-800);
  font-weight: var(--fw-bold);
  color: var(--clr-lossless-accent--brightest);
  margin: 0 0 0.5rem 0;
  line-height: 1.2;
  font-family: var(--ff-base);
}

.client-subtitle {
  font-size: var(--fs-400);
  color: var(--clr-lossless-primary-light);
  margin: 0;
  font-weight: var(--fw-regular);
  opacity: 0.8;
}

.content-stream {
  max-width: 76%;
  margin: 0 auto;
  padding: 0 1.5rem 4rem 1.5rem;
}

.reader-layout-container {
  display: flex;
  gap: 2rem;
  max-width: 100%;
}

.reader-layout-container > :first-child {
  flex: 0 0 300px;
  min-width: 0;
}

.reader-layout-container > .article-content {
  flex: 1;
  min-width: 0;
}

.content-article {
  margin-bottom: 4rem;
  padding: 2rem 0 1rem 0;
}

.article-header {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid var(--clr-lossless-primary-glass--lighter);
}

.collection-badge {
  background: var(--clr-lossless-attn-action);
  color: var(--clr-lossless-primary-light);
  padding: 0.25rem 0.75rem;
  border-radius: 1rem;
  font-size: var(--fs-250);
  font-weight: var(--fw-semi-bold);
  text-transform: capitalize;
  letter-spacing: 0.02em;
}

.article-title {
  font-size: var(--fs-700);
  font-weight: var(--fw-semi-bold);
  color: var(--clr-lossless-primary-light);
  margin: 0;
  line-height: 1.3;
  flex: 1;
  font-family: var(--ff-base);
}

.article-content {
  /* Let AstroMarkdown handle its own styling */
}



.no-content {
  text-align: center;
  padding: 4rem 2rem;
  color: var(--clr-lossless-primary-light);
  opacity: 0.7;
}

.no-content h2 {
  font-size: var(--fs-600);
  margin-bottom: 1rem;
  color: var(--clr-lossless-accent--brightest);
  font-family: var(--ff-base);
  font-weight: var(--fw-semi-bold);
}

/* Responsive design */
@media (max-width: 768px) {
  .client-title {
    font-size: var(--fs-700);
  }
  
  .client-subtitle {
    font-size: var(--fs-350);
  }
  
  .article-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.5rem;
  }
  
  .article-title {
    font-size: var(--fs-600);
  }
  
  .content-stream {
    padding: 0 1rem 4rem 1rem;
  }
  
  .content-article {
    padding: 1.5rem;
  }
}

/* Collection-specific styling using Lossless colors */
.content-article[data-collection="essays"] .collection-badge {
  background: var(--purple-heart);
}

.content-article[data-collection="market-maps"] .collection-badge {
  background: var(--clr-lossless-accent--brightest);
  color: var(--clr-lossless-primary-dark);
}

.content-article[data-collection="lost-in-public"] .collection-badge {
  background: var(--clr-lossless-gloss--hippie-blue);
}


</style>