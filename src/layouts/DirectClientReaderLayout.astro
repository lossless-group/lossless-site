---
// site/src/layouts/DirectClientReaderLayout.astro

import { unified } from 'unified';
import remarkParse from 'remark-parse';
import remarkGfm from 'remark-gfm';
import remarkDirective from 'remark-directive';
import remarkImages from '@utils/markdown/remark-images'; 
import remarkBacklinks from '@utils/markdown/remark-backlinks';
import remarkCitations from '@utils/markdown/remark-citations';
import remarkTableOfContents from '@utils/markdown/remark-toc';
import { remarkDirectiveToComponent } from '@utils/markdown/remark-directives';
import type { Root } from 'mdast';

import OneArticleOnPage from '@components/articles/OneArticleOnPage.astro';
import { markdownDebugger } from '@utils/markdown/markdownDebugger';

// Props
interface Props {
  allContent: any[]; // All content from the MOC
  client: string;
  collections?: string[]; // List of collection names for reference
}

const { allContent, client, collections } = Astro.props as Props;

// Process all content entries
interface ProcessedContent {
  mdastNode: any;
  contentData: any;
  entry: any;
}

const processedContent: ProcessedContent[] = [];

for (const entry of allContent) {
  if (!entry) continue;
  
  try {
    const processor = unified()
      .use(remarkParse)
      .use(remarkGfm)
      .use(remarkDirective)       // Parse directive syntax
      .use(remarkDirectiveToComponent) // Preserve directives for AstroMarkdown
      .use(remarkImages) 
      .use(remarkBacklinks)
      .use(remarkCitations)
      .use(remarkTableOfContents);

    const mdast = processor.parse(entry.body || '');
    const mdastNode = await processor.run(mdast);

    const contentData = {
      path: entry.id,
      id: entry.id,
      collection: entry.collection,
      ...entry.data
    };

    processedContent.push({
      mdastNode,
      contentData,
      entry
    });
  } catch (error) {
    console.error(`Error processing content for ${entry.id}:`, error);
  }
}

---

<div class="direct-client-reader-layout">
  <header class="client-header">
    <div class="client-header-inner">
      <h1 class="client-title">{client.charAt(0).toUpperCase() + client.slice(1)} Strategic Content</h1>
      <p class="client-subtitle">
        {processedContent.length} strategic insights from collections: {collections?.join(', ') || 'various sources'}
      </p>
    </div>
  </header>

  <main class="content-stream">
    {processedContent.map((content, index) => (
      <article class="content-article" data-collection={content.entry.collection}>
        <div class="article-header">
          <span class="collection-badge">{content.entry.collection}</span>
          <h2 class="article-title">{content.contentData.title || content.entry.id}</h2>
        </div>
        
        <div class="article-content">
          <OneArticleOnPage 
            content={content.mdastNode} 
            data={content.contentData} 
          />
        </div>
        
        {index < processedContent.length - 1 && (
          <div class="content-divider"></div>
        )}
      </article>
    ))}
    
    {processedContent.length === 0 && (
      <div class="no-content">
        <h2>No content available</h2>
        <p>Check back later for updated content from collections: {collections?.join(', ') || 'unknown'}.</p>
      </div>
    )}
  </main>
</div>

<style>
.direct-client-reader-layout {
  width: 100%;
  min-height: 100vh;
  background: var(--color-background, #ffffff);
}

.client-header {
  background: var(--color-surface, #f8f9fa);
  border-bottom: 1px solid var(--color-border, #e1e5e9);
  padding: 2rem 0;
  margin-bottom: 2rem;
}

.client-header-inner {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 1.5rem;
  text-align: center;
}

.client-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: var(--color-text-primary, #1a1a1a);
  margin: 0 0 0.5rem 0;
  line-height: 1.2;
}

.client-subtitle {
  font-size: 1.125rem;
  color: var(--color-text-secondary, #6b7280);
  margin: 0;
  font-weight: 400;
}

.content-stream {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 1.5rem 4rem 1.5rem;
}

.content-article {
  margin-bottom: 3rem;
}

.article-header {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid var(--color-border, #e1e5e9);
}

.collection-badge {
  background: var(--color-primary, #3b82f6);
  color: white;
  padding: 0.25rem 0.75rem;
  border-radius: 1rem;
  font-size: 0.875rem;
  font-weight: 500;
  text-transform: capitalize;
}

.article-title {
  font-size: 1.875rem;
  font-weight: 600;
  color: var(--color-text-primary, #1a1a1a);
  margin: 0;
  line-height: 1.3;
  flex: 1;
}

.article-content {
  line-height: 1.7;
}

.content-divider {
  height: 1px;
  background: linear-gradient(
    to right,
    transparent,
    var(--color-border, #e1e5e9) 20%,
    var(--color-border, #e1e5e9) 80%,
    transparent
  );
  margin: 4rem 0;
}

.no-content {
  text-align: center;
  padding: 4rem 2rem;
  color: var(--color-text-secondary, #6b7280);
}

.no-content h2 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: var(--color-text-primary, #1a1a1a);
}

/* Responsive design */
@media (max-width: 768px) {
  .client-title {
    font-size: 2rem;
  }
  
  .client-subtitle {
    font-size: 1rem;
  }
  
  .article-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.5rem;
  }
  
  .article-title {
    font-size: 1.5rem;
  }
  
  .content-stream {
    padding: 0 1rem 4rem 1rem;
  }
}

/* Collection-specific styling */
.content-article[data-collection="essays"] .collection-badge {
  background: var(--color-essays, #8b5cf6);
}

.content-article[data-collection="market-maps"] .collection-badge {
  background: var(--color-market-maps, #10b981);
}
</style>