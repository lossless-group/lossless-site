---
/**
 * Changelog Layout
 *
 * Displays a list of changelog entries in chronological order.
 * Shows both code and content changes in a two-column layout.
 *
 * @component
 */

const { title, description } = Astro.props;

import type { HTMLAttributes } from "astro/types";
import { getCollection } from "astro:content";
import path from "path";
import ChangelogEntry from "@components/changelog/ChangelogEntry.astro";
import Layout from "@layouts/Layout.astro";
import TabSearchInput from "@components/reference/TabSearchInput.astro";

// Import Starwind Tabs components
import Tabs from "@components/starwind/tabs/Tabs.astro";
import TabsList from "@components/starwind/tabs/TabsList.astro";
import TabsTrigger from "@components/starwind/tabs/TabsTrigger.astro";
import TabsContent from "@components/starwind/tabs/TabsContent.astro";
import { getReferenceSlug } from "@utils/slugify";
import { countWordsInMarkdown } from "@utils/countWords";

interface Props {
  title?: string;
  description?: string;
  defaultValue?: string;
  syncKey?: string;
  [key: string]: any; // Allow any additional props
}


// Get both content and code changes
const contentChanges = await getCollection("changelog--content") as Array<{ body?: string }>;
const codeChanges = await getCollection("changelog--code") as Array<{ body?: string }>;

// Debug: Check first entry's word count
if (contentChanges.length > 0 && contentChanges[0].body) {
  const sampleText = contentChanges[0].body;
  const wordCount = countWordsInMarkdown(sampleText);
  console.log('Sample text:', sampleText.substring(0, 100) + '...');
  console.log('Word count:', wordCount);
}

// Format number to be more readable (e.g., 1.2k, 3.4M)
const formatNumber = (num: number): string => {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  }
  if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'k';
  }
  return num.toString();
};

// Sort changes by date in descending order, and for same date, by index in descending order
const sortByDateAndIndex = (a, b) => {
  // Handle both date and date_created fields
  const dateA = new Date(a.data.date || a.data.date_created);
  const dateB = new Date(b.data.date || b.data.date_created);

  // If dates are the same, sort by index (extracted from filename)
  if (dateA.getTime() === dateB.getTime()) {
    // Extract index from the filename in the ID (e.g., "changelog--code/2025-04-06_03.md" -> "03")
    const filenameA = path.basename(a.id);
    const filenameB = path.basename(b.id);

    const indexA = filenameA.split("_").pop()?.split(".")[0] || "0";
    const indexB = filenameB.split("_").pop()?.split(".")[0] || "0";

    // Convert to numbers and compare in descending order (higher index first)
    return parseInt(indexB, 10) - parseInt(indexA, 10);
  }

  // Otherwise, sort by date in descending order
  return dateB.getTime() - dateA.getTime();
};

const sortedContentChanges = contentChanges.sort(sortByDateAndIndex);
const sortedCodeChanges = codeChanges.sort(sortByDateAndIndex);

// Helper function to normalize author data
const normalizeAuthorData = (entry) => {
  // Handle both author (string) and authors (array) fields
  let authorData = [];

  if (entry.data.authors) {
    // If authors is already an array, use it
    authorData = Array.isArray(entry.data.authors)
      ? entry.data.authors
      : [entry.data.authors];
  } else if (entry.data.author) {
    // If only author is present (string), convert to array
    authorData = [entry.data.author];
  }

  return {
    ...entry.data,
    id: entry.id,
    body: entry.body,
    slug: path.basename(entry.id, ".md"),
    authors: authorData,
  };
};
---

<Layout title={title} description={description}>
  <div class="changelog-content">
    <Tabs defaultValue="content" class="changelog-tabs">
      <div class="changelog-tabs_container">
        <TabsList class="changelog-tabs-list">
          <TabsTrigger value="content" class="changelog-tab">
            <div class="flex flex-col items-center">
              <span class="tab-title">
                Content Changes
                <span class="entry-badge">{contentChanges.length}</span>
              </span>
              <span class="text-xs text-muted-foreground group-data-[state=active]:text-[var(--white--pure)] mt-0.5">
                {contentChanges.length} entries • {formatNumber(contentChanges.reduce((count, entry) => count + (entry.body ? countWordsInMarkdown(entry.body) : 0), 0))} words
              </span>
            </div>
          </TabsTrigger>
          <TabsTrigger value="code" class="changelog-tab">
            <div class="flex flex-col items-center">
              <span class="tab-title">
                Code Changes
                <span class="entry-badge">{codeChanges.length}</span>
              </span>
              <span class="text-xs text-muted-foreground group-data-[state=active]:text-[var(--white--pure)] mt-0.5">
                {codeChanges.length} entries • {formatNumber(codeChanges.reduce((count, entry) => count + (entry.body ? countWordsInMarkdown(entry.body) : 0), 0))} words
              </span>
            </div>
          </TabsTrigger>
        </TabsList>
      </div>
      
      <TabsContent value="content" class="changelog-tab-content">
        <div class="search-container">
          <TabSearchInput id="content-search" />
        </div>
        {
          sortedContentChanges
            .map((entry) => normalizeAuthorData(entry))
            ?.map((entry) => (
              <div data-searchable="true" data-title={entry.title} data-description={entry.body}>
                <ChangelogEntry {...entry} key={entry.id} slug={'content-' + getReferenceSlug(entry.id)} />
              </div>
            ))
        }
      </TabsContent>
      <TabsContent value="code" class="changelog-tab-content">
        <div class="search-container">
          <TabSearchInput id="code-search" />
        </div>
        {
          sortedCodeChanges
            .map((entry) => normalizeAuthorData(entry))
            ?.map((entry) => (
              <div data-searchable="true" data-title={entry.title} data-description={entry.body}>
                <ChangelogEntry {...entry} key={entry.id} slug={'code-' + getReferenceSlug(entry.id)} />
              </div>
            ))
        }
      </TabsContent>
    </Tabs>
  </div>
</Layout>

<style>
  .changelog-content {
    margin-bottom: 2rem;
    padding-top: 2rem;
    overflow-x: hidden; /* Prevent horizontal overflow */
    max-width: 100%;
  }

  /* Tab styling */
  :global(.changelog-tabs-list) {
    background: var(--clr-lossless-primary-dark);
    border: 1px solid var(--clr-lossless-primary-light);
    border-radius: 0.5rem;
    padding: 0.25rem;
    display: inline-flex;
  }

  .changelog-tab {
    padding: 0.5rem 1rem;
    font-weight: 500;
    color: var(--clr-lossless-text-muted);
    transition: all 0.2s ease;
    position: relative;
  }
  
  .changelog-tab:hover {
    background: var(--clr-lossless-surface-3);
    color: var(--clr-lossless-text);
  }
  
  :global([data-state='active']) {
    background: var(--clr-lossless-surface-4);
    color: var(--white--pure) !important;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
  
  :global([data-state='active']) .text-muted-foreground {
    color: var(--white--pure) !important;
  }
  
  .tab-title {
    display: flex;
    align-items: center;
    gap: 0.6rem;
    position: relative;
    z-index: 1;
  }
  
  .entry-badge {
    background: var(--clr-lossless-primary-light);
    color: var(--clr-lossless-text);
    font-size: 0.75rem;
    font-weight: 600;
    padding: 0.1rem 0.5rem;
    border-radius: 1rem;
    line-height: 1.2;
    margin-left: 0.5rem;
    transition: all 0.2s ease;
  }
  
  
  :global([data-state='active']) .entry-badge {
    background: var(--clr-lossless-accent);
    color: var(--clr-lossless-text-on-accent);
  }
  
  .changelog-tab:hover .entry-badge {
    transform: translateY(-1px) scale(1.05);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
  }
  
  @media (max-width: 480px) {
    :global(.changelog-tabs-list) {
      width: 100%;
      justify-content: space-between;
    }
    
    .changelog-tab {
      padding: 0.5rem 0.75rem;
      flex: 1;
      text-align: center;
      justify-content: center;
    }
    
    .entry-badge {
      font-size: 0.65rem;
      padding: 0.15rem 0.5rem;
      margin-left: 0.4rem;
    }
  }

  :global(.changelog-tab:hover) {
    color: var(--clr-lossless-accent--brightest);
  }

  :global(.changelog-tab-content) {
    margin-top: 1.5rem;
    overflow-x: hidden; /* Prevent horizontal overflow */
    max-width: 100%;
  }

  /* Container styles */
  .changelog-tabs_container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto ;
    padding: 1rem;
  }

  /*
    Increase specificity to override Starwind's data-[state=active]:* classes.
    - Uses double class selector for higher specificity.
    - Applies !important for guaranteed override if needed.
    - Uses brand accent color for selected tab background.
    - Uses a softer text color for accessibility and visual comfort.
  */
  :global(.changelog-tabs-list .changelog-tab[data-state="active"]) {
    background: var(--clr-lossless-attn-action) !important;
    color: var(--clr-lossless-primary-light) !important;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  /* Search container styling */
  .search-container {
    max-width: 1200px;
    margin: 0 auto 2rem;
    padding: 0.25rem 1rem;
  }
</style>