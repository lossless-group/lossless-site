---
/**
 * Changelog Layout
 *
 * Displays a list of changelog entries in chronological order.
 * Shows both code and content changes in a two-column layout.
 *
 * @component
 */

const { title, description } = Astro.props;

import type { HTMLAttributes } from "astro/types";
import { getCollection } from "astro:content";
import path from "path";
import ChangelogEntry from "@components/changelog/ChangelogEntry.astro";
import Layout from "@layouts/Layout.astro";
import SearchInput from "@components/reference/SearchInput.astro";

// Import Starwind Tabs components
import Tabs from "@components/starwind/tabs/Tabs.astro";
import TabsList from "@components/starwind/tabs/TabsList.astro";
import TabsTrigger from "@components/starwind/tabs/TabsTrigger.astro";
import TabsContent from "@components/starwind/tabs/TabsContent.astro";
import { getReferenceSlug } from "@utils/slugify";


interface Props extends HTMLAttributes<"div"> {
  title?: string;
  description?: string;
  defaultValue?: string;
  syncKey?: string;
}


// Get both content and code changes
const contentChanges = await getCollection("changelog--content");
const codeChanges = await getCollection("changelog--code");

// Sort changes by date in descending order, and for same date, by index in descending order
const sortByDateAndIndex = (a, b) => {
  // Handle both date and date_created fields
  const dateA = new Date(a.data.date || a.data.date_created);
  const dateB = new Date(b.data.date || b.data.date_created);

  // If dates are the same, sort by index (extracted from filename)
  if (dateA.getTime() === dateB.getTime()) {
    // Extract index from the filename in the ID (e.g., "changelog--code/2025-04-06_03.md" -> "03")
    const filenameA = path.basename(a.id);
    const filenameB = path.basename(b.id);

    const indexA = filenameA.split("_").pop()?.split(".")[0] || "0";
    const indexB = filenameB.split("_").pop()?.split(".")[0] || "0";

    // Convert to numbers and compare in descending order (higher index first)
    return parseInt(indexB, 10) - parseInt(indexA, 10);
  }

  // Otherwise, sort by date in descending order
  return dateB.getTime() - dateA.getTime();
};

const sortedContentChanges = contentChanges.sort(sortByDateAndIndex);
const sortedCodeChanges = codeChanges.sort(sortByDateAndIndex);

// Helper function to normalize author data
const normalizeAuthorData = (entry) => {
  // Handle both author (string) and authors (array) fields
  let authorData = [];

  if (entry.data.authors) {
    // If authors is already an array, use it
    authorData = Array.isArray(entry.data.authors)
      ? entry.data.authors
      : [entry.data.authors];
  } else if (entry.data.author) {
    // If only author is present (string), convert to array
    authorData = [entry.data.author];
  }

  return {
    ...entry.data,
    id: entry.id,
    body: entry.body,
    slug: path.basename(entry.id, ".md"),
    authors: authorData,
  };
};
---

<Layout title={title} description={description}>
  <div class="changelog-content">
    <Tabs defaultValue="content" class="changelog-tabs">
      <div class="changelog-tabs_container">
        <TabsList class="changelog-tabs-list">
          <TabsTrigger value="content" class="changelog-tab"
            >Content Changes</TabsTrigger
          >
          <TabsTrigger value="code" class="changelog-tab"
            >Code Changes</TabsTrigger
          >
        </TabsList>
      </div>
      <TabsContent value="content" class="changelog-tab-content">
        <div class="search-container">
          <SearchInput id="content-search" />
        </div>
        {
          sortedContentChanges
            .map((entry) => normalizeAuthorData(entry))
            ?.map((entry) => (
              <div data-searchable="true" data-title={entry.title} data-description={entry.body}>
                <ChangelogEntry {...entry} key={entry.id} slug={'content-' + getReferenceSlug(entry.id)} />
              </div>
            ))
        }
      </TabsContent>
      <TabsContent value="code" class="changelog-tab-content">
        <div class="search-container">
          <SearchInput id="code-search" />
        </div>
        {
          sortedCodeChanges
            .map((entry) => normalizeAuthorData(entry))
            ?.map((entry) => (
              <div data-searchable="true" data-title={entry.title} data-description={entry.body}>
                <ChangelogEntry {...entry} key={entry.id} slug={'code-' + getReferenceSlug(entry.id)} />
              </div>
            ))
        }
      </TabsContent>
    </Tabs>
  </div>
</Layout>

<style>
  .changelog-content {
    margin-bottom: 2rem;
    padding-top: 2rem;
    overflow-x: hidden; /* Prevent horizontal overflow */
    max-width: 100%;
  }

  /* Style the tabs with our brand colors */
  :global(.changelog-tabs-list) {
    background: var(--clr-lossless-primary-dark);
    border: 1px solid var(--clr-lossless-primary-light);
    border-radius: 0.5rem;
  }

  :global(.changelog-tab) {
    color: var(--clr-body);
    font-family: var(--ff-legible);
    font-weight: var(--fw-semi-bold);
    transition: all 0.2s ease;
  }

  :global(.changelog-tab:hover) {
    color: var(--clr-lossless-accent--brightest);
  }

  :global(.changelog-tab-content) {
    margin-top: 1.5rem;
    overflow-x: hidden; /* Prevent horizontal overflow */
    max-width: 100%;
  }

  /* Container styles */
  .changelog-tabs_container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto ;
    padding: 1rem;
  }

  /*
    Increase specificity to override Starwind's data-[state=active]:* classes.
    - Uses double class selector for higher specificity.
    - Applies !important for guaranteed override if needed.
    - Uses brand accent color for selected tab background.
    - Uses a softer text color for accessibility and visual comfort.
  */
  :global(.changelog-tabs-list .changelog-tab[data-state="active"]) {
    background: var(--clr-lossless-attn-action) !important;
    color: var(--clr-lossless-primary-light) !important;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  /* Search container styling */
  .search-container {
    max-width: 1200px;
    margin: 0 auto 2rem;
    padding: 0.25rem 1rem;
  }
</style>