---
// Core imports
import fs from 'node:fs/promises';
import path from 'node:path';

// Component imports
import Hero from "@components/basics/Hero.astro";
import AnimationWrapper from "@components/basics/AnimationWrapper.astro";
import Layout from '@layouts/Layout.astro';
import ThinGradientBleedSeparator from '@components/basics/separators/ThinGradientBleedSeparator.astro';
import IconHeaderMessageCardGrid from '@components/basics/messages/IconHeaderMessageCardGrid.astro';
import IconHeaderMessageCard from '@components/basics/messages/IconHeaderMessageCard.astro';
import ToolingGallery from '@components/markdown/ToolingGallery.astro';
import ClientReferenceSection from '@components/client-portals/ClientReferenceSection.astro';

// Utility imports
import { getCollection } from "astro:content";
import { toProperCase, slugify } from '@utils/slugify';
import { resolveToolId } from '@utils/toolUtils';
import { extractFrontmatter } from '@utils/yamlFrontmatter';

// Type imports
import type { ClientPortalProps, OpenGraphData } from '../types/client-data.d';

const { client } = Astro.props as ClientPortalProps;

// Import contentBasePath from envUtils which handles the correct path based on DEPLOY_ENV
import { contentBasePath } from '@utils/envUtils';

// Debug log the content path
console.log('Content base path from envUtils:', contentBasePath);

let openGraphData: OpenGraphData = {
  title: `Client Portal: ${toProperCase(client)}`,
  description: `Explore tailored AI content for ${toProperCase(client)}.`,
  image: undefined
};

try {
  const ogPath = path.resolve(contentBasePath, `client-content/${toProperCase(client)}/opengraph.json`);
  const rawOg = await fs.readFile(ogPath, 'utf-8');
  const parsedOg = JSON.parse(rawOg);

  openGraphData = {
    ...openGraphData,
    ...parsedOg
  };
} catch (err) {
  console.warn(`No Open Graph data found for client: ${client}`);
}


// Process tool gallery
let toolGalleryTools = [];

try {
  // IMPORTANT: Clients must have proper cased names (Laerdal). "laerdal" will fail
  const yamlPath = path.resolve(contentBasePath, `client-content/${toProperCase(client)}/tool-gallery.yaml`);
  const rawYaml = await fs.readFile(yamlPath, 'utf-8');
  const config = extractFrontmatter(`---\n${rawYaml}\n---`);

  if (!config) {
    console.warn(`No valid tool gallery config found for ${client}`);
    return;
  }

  const tagFilters = [];
  const rawToolIds = [];
  const items = Array.isArray(config) ? config : [config];

  for (const item of items) {
      if (item.tag) {
        const raw = String(item.tag).trim();
        const match = raw.match(/^\[\[(.*?)\]\]$/);
        const tag = match ? match[1].trim() : raw;
        tagFilters.push(tag);
      } else if (typeof item === 'string') {
        const raw = item.trim();
        const match = raw.match(/^\[\[(.*?)\]\]$/);
        const toolId = match ? match[1].trim() : raw;
        rawToolIds.push(toolId);
      }
  }


  const allTools = await getCollection('tooling');
  const toolMap = new Map(allTools.map(entry => [entry.id, {
    ...entry.data,
    id: entry.id,
    filePath: entry.id,
  }]));

  const tools: Array<{ id: string; filePath: string; [key: string]: any }> = [];
  const normalizeTag = (tag: string): string => slugify(tag).toLowerCase();

  for (const input of rawToolIds) {
    let id = input;
    const match = input.match(/^\[\[(?!.*?visuals)(.*?)(?:\|.*?)?\]\]$/);
    if (match) id = match[1].trim();

    const resolvedId = await resolveToolId(id, allTools);
    if (resolvedId && toolMap.has(resolvedId)) tools.push(toolMap.get(resolvedId));
  }

  if (tagFilters.length > 0) {
    const tagFiltered = allTools
      .filter(tool => tool.data.tags?.some(tag =>
        tagFilters.some(filter => normalizeTag(filter) === normalizeTag(tag))
      ))
      .map(entry => ({
        ...entry.data,
        id: entry.id,
        filePath: entry.id,
      }));

    for (const tool of tagFiltered) {
      if (!tools.some(t => t.id === tool.id)) tools.push(tool);
    }
  }

  toolGalleryTools = tools;
} catch (err) {
  console.warn(`No tool-gallery.yaml for ${client}`);
}

// Load and process client portal cards
let clientPortalCards = [];
try {
  const cardsPath = path.resolve(process.cwd(), 'src/content/messages/clientPortalCards.json');
  const rawCards = await fs.readFile(cardsPath, 'utf-8');
  clientPortalCards = JSON.parse(rawCards);
  console.log(`Loaded ${clientPortalCards.length} cards from messages/clientPortalCards.json`);
} catch (error) {
  console.error('Error loading client portal cards:', error);
}

---

<Layout 
  frontmatter={{
    title: openGraphData.title,
    description: openGraphData.description,
    banner_image: openGraphData.image
  }}>
    <AnimationWrapper>
      <Hero
        title={openGraphData.heroTitle || `Welcome, ${toProperCase(client)}`}
        subtitle={openGraphData.heroSubtitle || `It's time to enter the era of AI`}
        description={openGraphData.heroDescription || `Explore AI tools and resources tailored for ${toProperCase(client)}`}
        ctaText={openGraphData.ctaText || "Explore Tools"}
        ctaUrl={openGraphData.ctaUrl || "/toolkit"}
        image={{
          src: openGraphData.heroImage || openGraphData.image || "/images/placeholder-hero.jpg",
          alt: `${toProperCase(client)} Logo`
        }}
        alignment="left"
        fullBleed={true}
        animate={true}
        classes="client-portal-hero"
      />
    </AnimationWrapper>

    <!-- Separator between Hero and Client Portal Cards -->
    <ThinGradientBleedSeparator height="2px" marginTop="3rem" marginBottom="2rem" />

  <div class="client-reader-wrapper">
    <!-- Client Portal Cards Section -->
    <section class="client-portal-cards-section">
      <div class="client-portal-cards-content">
        <div class="client-portal-cards-text">
          <p class="client-portal-cards-subtitle">Client Resources</p>
          <h2 class="client-portal-cards-title">Explore {toProperCase(client)} Content</h2>
          <p class="client-portal-cards-description">
            Access strategic recommendations, active projects, and case studies tailored specifically for {toProperCase(client)}.
          </p>
        </div>
      </div>

      <section class="client-portal-cards-grid-section" style="--client-portal-section-top-margin: 0.5rem;">
        <div class="icon-header-message-card-grid" style="margin-top: 0; margin-bottom: 0;">
          {clientPortalCards.map(card => (
            <div class="card-container">
              <IconHeaderMessageCard
                title={card.title}
                description={card.description}
                badge={card.badge}
                verified={card.verified}
                to_path={card.to_path?.replace('[client]', client)}
              >
                {card.icon && card.icon.trim().endsWith('.svg') ? (
                  <img src={card.icon} alt={card.title} width="64" height="64" loading="lazy" />
                ) : (
                  <span set:html={card.icon} />
                )}
              </IconHeaderMessageCard>
            </div>
          ))}
        </div>
      </section>
    </section>

    <!-- Separator between Client Portal Cards and Reference Section -->
    <ThinGradientBleedSeparator height="2px" marginTop="3rem" marginBottom="2rem" />

    <div class="client-portal-container">
      <div id="reference-section">
        <ClientReferenceSection client={client} contentBasePath={contentBasePath} />
      </div>

      {toolGalleryTools.length > 0 && (
        <>
          <ThinGradientBleedSeparator height="2px" marginTop="2rem" marginBottom="2rem" />
          <section class="mb-12 tooling-section">
            <h2 class="text-2xl font-bold mb-4">Related Tools</h2>
            <ToolingGallery tools={toolGalleryTools} takeUpWholeWidth={true} />
          </section>
        </>
      )}

    </div>
  </div>
  

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const readerButton = document.getElementById('toggle-reader');
      const readerSection = document.getElementById('reader-section');
      
      // Reader toggle functionality
      readerButton.addEventListener('click', () => {
        const isCollapsed = readerSection.classList.toggle('collapsed');
        readerSection.classList.toggle('expanded', !isCollapsed);
        readerButton.textContent = isCollapsed ? 'Show Reader' : 'Hide Reader';
      });
    });
  </script>
</Layout>

<style>
/* Hero Section Styles */
:global(.client-portal-hero) {
  --hero-max-width: 1200px;
  --hero-padding: 1.5rem;
  width: 100%;
  margin: 0 auto;
  padding: 0;
}

:global(.client-portal-hero .hero-container) {
  max-width: var(--hero-max-width);
  width: 100%;
  margin: 10rem auto 0;
  padding: 0 var(--hero-padding);
}

:global(.client-portal-hero .hero-title) {
  font-size: var(--fs-900);
  line-height: 1.2;
  margin-bottom: 1.5rem;
}

:global(.client-portal-hero .hero-subtitle) {
  font-size: var(--fs-600);
  font-weight: var(--fw-semi-bold);
  margin-bottom: 1rem;
  color: var(--clr-lossless-accent--brightest);
}

:global(.client-portal-hero .hero-description) {
  font-size: var(--fs-500);
  line-height: 1.6;
  margin-bottom: 2rem;
  max-width: 65ch;
}

:global(.client-portal-hero .hero-cta) {
  margin-top: 1.5rem;
}

@media (max-width: 768px) {
  :global(.client-portal-hero) {
    margin-top: 6rem;
    padding: 0 1rem;
  }
  
  :global(.client-portal-hero .hero-title) {
    font-size: var(--fs-800);
  }
  
  :global(.client-portal-hero .hero-subtitle) {
    font-size: var(--fs-500);
  }
  
  :global(.client-portal-hero .hero-description) {
    font-size: var(--fs-400);
  }
}

.client-reader-wrapper {
  padding: 2rem 0rem;
}

.client-reader-header, .client-portal-container {
  padding: 0rem 2rem;
}

#reference-section {
  padding: 0 2rem;
  margin: 0 auto;
  max-width: var(--max-content-width, 1200px);
  width: 100%;
  box-sizing: border-box;
  opacity: 1;
}

@media (max-width: 768px) {
  #reference-section {
    padding: 0 1.5rem;
  }

  .tooling-section {
    padding: 0rem;
  }
}

.tooling-section {
  padding: 0rem 2rem;
}

.client-portal-cards-section {
  margin-bottom: 0;
  margin-top: 1.5rem;
  padding: 2.5rem 1.5rem;
  border-radius: 1rem;
  /* Removed box-shadow to eliminate shadow boxes */
  animation: fadeInSlideUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  opacity: 0;
  transform: translateY(30px);
}

.client-portal-cards-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.5rem;
  max-width: 900px;
  margin: 0 auto 3rem auto;
  animation: fadeInContent 1s cubic-bezier(0.4, 0, 0.2, 1) 0.2s forwards;
  opacity: 0;
}

.client-portal-cards-text {
  text-align: center;
  animation: fadeInText 0.8s cubic-bezier(0.4, 0, 0.2, 1) 0.4s forwards;
  opacity: 0;
  transform: translateY(20px);
}

.client-portal-cards-subtitle {
  font-family: var(--ff-legible);
  font-weight: var(--fw-semi-bold);
  font-size: var(--fs-400);
  color: var(--clr-lossless-accent--brightest);
  margin-bottom: 0.5rem;
  letter-spacing: 0.5px;
  animation: fadeInSubtitle 0.6s cubic-bezier(0.4, 0, 0.2, 1) 0.6s forwards;
  opacity: 0;
  transform: translateY(15px);
}

.client-portal-cards-title {
  font-family: var(--ff-base);
  font-weight: var(--fw-bold);
  font-size: var(--fs-900);
  line-height: 1.2;
  margin-bottom: 1rem;
  background: linear-gradient(90deg, var(--clr-lossless-primary-light) 0%, var(--clr-lossless-accent--brightest) 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-fill-color: transparent;
  animation: fadeInTitle 0.8s cubic-bezier(0.4, 0, 0.2, 1) 0.8s forwards;
  opacity: 0;
  transform: translateY(20px);
}

.client-portal-cards-description {
  font-family: var(--ff-legible);
  font-weight: var(--fw-regular);
  font-size: var(--fs-450);
  line-height: 1.6;
  opacity: 0.9;
  max-width: 60ch;
  margin-bottom: 0;
  margin-left: auto;
  margin-right: auto;
  animation: fadeInDescription 0.8s cubic-bezier(0.4, 0, 0.2, 1) 1s forwards;
  opacity: 0;
  transform: translateY(15px);
}

.client-portal-cards-grid-section {
  padding: 2rem 0 3rem 0;
  display: flex;
  flex-direction: column;
  place-content: center;
  align-items: center;
  width: 100%;
  margin-top: var(--client-portal-section-top-margin, 2.5rem);
  animation: fadeInGrid 1s cubic-bezier(0.4, 0, 0.2, 1) 1.2s forwards;
  opacity: 0;
  transform: translateY(25px);
}

/* Animation Keyframes */
@keyframes fadeInSlideUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInContent {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeInText {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInSubtitle {
  from {
    opacity: 0;
    transform: translateY(15px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInTitle {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInDescription {
  from {
    opacity: 0;
    transform: translateY(15px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInGrid {
  from {
    opacity: 0;
    transform: translateY(25px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@media (max-width: 768px) {
  .client-reader-wrapper {
    padding: 3rem 2rem;
  }
  
  .client-portal-cards-section {
    padding: 1.5rem;
    margin: 1.5rem 0;
  }
}

/* Collapsible section styles moved to where they're needed */

.toggle-button {
  background: var(--clr-lossless-primary, #333);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 8px;
  font-weight: 600;
  margin-top: 2rem;
  margin-bottom: 1rem;
  border: none;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.toggle-button:hover {
  background: var(--clr-lossless-primary, #333);
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  border: 1px solid rgba(255,255,255,0.1);
}

.toggle-button:active {
  transform: translateY(0);
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}

.toggle-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s;
}

.toggle-button:hover::before {
  left: 100%;
}
</style>
