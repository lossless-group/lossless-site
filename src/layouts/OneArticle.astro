---
/**
 * OneArticle.astro
 * Layout for displaying a single article in a centered, readable format
 * Handles markdown processing with remark plugins
 */

import { unified } from 'unified';
import remarkParse from 'remark-parse';
import remarkGfm from 'remark-gfm';
import remarkDirective from 'remark-directive';
import remarkBacklinks from '@utils/markdown/remark-backlinks';
import remarkImages from '@utils/markdown/remark-images';
import remarkCitations from '@utils/markdown/remark-citations';
import remarkTableOfContents from '@utils/markdown/remark-toc';
import { remarkDirectiveToComponent } from '@utils/markdown/remark-directives';
import DebugMarkdown from '@components/markdown/DebugMarkdown.astro';
import '@styles/markdown.css';
import { markdownDebugger } from '@utils/markdown/markdownDebugger';

interface Props {
  Component: any;
  title: string; // Added title prop
  data: Record<string, any>;
  content: string;
  markdownFile?: string;
}

const { Component, title, data, content, markdownFile } = Astro.props; // Added title

// Process with our custom remark plugins to get MDAST
const processor = unified()
  .use(remarkParse)
  .use(remarkGfm)
  .use(remarkBacklinks)
  .use(remarkImages)
  .use(remarkDirective)
  .use(remarkDirectiveToComponent)
  .use(remarkCitations)
  .use(remarkTableOfContents)

// First parse to MDAST
const mdast = processor.parse(content || '');
// console.log("=== Raw MDAST ===", JSON.stringify(mdast, null, 2));

const transformedMdast = await processor.run(mdast);

// Debug output to see AST structure
// markdownDebugger.log('OneArticle.astro Debug');
// markdownDebugger.writeDebugFile('transformed-mdast', transformedMdast);
// markdownDebugger.verbose('MDAST structure:', transformedMdast);

// Helper function to normalize author data, adapted from ChangelogLayout.astro
const normalizeDataWithAuthors = (pageData) => {
  if (!pageData) return { authors: [] }; // Return a default if pageData is null/undefined

  let authorList = [];
  if (pageData.authors) {
    authorList = Array.isArray(pageData.authors)
      ? pageData.authors
      : [pageData.authors]; // Ensure it's an array
  } else if (pageData.author) {
    authorList = [pageData.author]; // Ensure it's an array
  }

  return {
    ...pageData, // Preserve ALL original fields including participants
    // id: pageData.id, // Assuming id is already part of pageData if needed elsewhere
    // body: pageData.body, // body is handled separately as 'content' prop
    // slug: pageData.slug || (pageData.id ? path.basename(pageData.id, ".md") : undefined),
    authors: authorList, // Ensure 'authors' is always an array
  };
};

const normalizedData = normalizeDataWithAuthors(data);

---

<div class="one-article collection-reader-pane">
  {/* Render the title if it's provided */}
  
  {markdownFile && <DebugMarkdown content={content} markdownFile={markdownFile} />}
  <Component 
    content={transformedMdast}
    data={normalizedData}
    articleHeading={title} // Renamed prop to avoid conflict
  >
    <slot />
  </Component>
</div>

<style>
  .one-article {
    width: 100%;
    max-width: 100vw;
    margin: 0 auto;
    padding: 2rem;
    overflow-x: hidden;
    box-sizing: border-box;
    height: calc(100vh - 4rem); /* Fixed height minus header */
    overflow-y: auto; /* Independent scroll */
    scroll-behavior: smooth; /* Smooth scrolling */
  }

  /* Scroll margin for headings in OneArticle layout */
  .one-article :global(h1),
  .one-article :global(h2),
  .one-article :global(h3),
  .one-article :global(h4),
  .one-article :global(h5),
  .one-article :global(h6) {
    scroll-margin-top: 150px; /* Account for fixed header */
  }

  /* Constrain the content width and add proper spacing */
  .one-article :global(.content-wrapper) {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .one-article :global(.content-inner) {
    max-width: 900px;
    padding: 0 2rem;
  }

  /* Responsive adjustments for OneArticle layout */
  @media (max-width: 1600px) {
    .one-article :global(.content-wrapper) {
      max-width: 1200px;
      padding: 0 1.5rem;
    }
    
    .one-article :global(.content-inner) {
      max-width: 800px;
      padding: 0 1.5rem;
    }
  }

  @media (max-width: 1400px) {
    .one-article :global(.content-wrapper) {
      max-width: 1000px;
      padding: 0 1rem;
    }
    
    .one-article :global(.content-inner) {
      max-width: 700px;
      padding: 0 1rem;
    }
  }

  @media (max-width: 1200px) {
    .one-article :global(.content-wrapper) {
      max-width: 900px;
      padding: 0 1rem;
    }
    
    .one-article :global(.content-inner) {
      max-width: 600px;
      padding: 0 1rem;
    }
  }

  @media (max-width: 1024px) {
    .one-article {
      padding: 1.5rem;
      height: auto; /* Allow natural height on mobile */
      overflow: visible;
    }
    
    .one-article :global(.content-wrapper) {
      padding: 0 1rem;
      max-width: 100%;
    }
    
    .one-article :global(.content-inner) {
      max-width: 100%;
      padding: 0 1.5rem;
    }
    
    .one-article :global(.main-content) {
      max-width: 100%;
    }
  }

  @media (max-width: 768px) {
    .one-article {
      padding: 1rem;
    }
    
    .one-article :global(.content-wrapper) {
      padding: 0 0.5rem;
      max-width: 100%;
    }
    
    .one-article :global(.content-inner) {
      padding: 0 1rem;
      max-width: 100%;
    }
    
    .one-article :global(.main-content) {
      max-width: 100%;
    }
  }

  /* @media (min-width: 768px) {
    .one-article {
      padding: 4rem 2rem;
    }
  } */

</style>