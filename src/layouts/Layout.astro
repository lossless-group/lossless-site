---
import Header from "@basics/Header.astro";
import Footer from "@basics/Footer.astro";
import "@styles/global.css";
import "@styles/starwind.css";
import "@styles/callouts.css";
import "@styles/codeblocks.css";
import "@styles/shiki-github-dark.css";
import PageMeta from "@components/basics/PageMeta.astro";

/**
 * Open Graph Meta Tags Pipeline:
 * 
 * 1. PAGES pass frontmatter data to Layout.astro
 *    - Direct pages: frontmatter = { title, description, lede, banner_image, portrait_image }
 *    - Markdown pages: frontmatter = entry.data (from content collections)
 * 
 * 2. LAYOUT.ASTRO processes frontmatter and extracts values
 *    - Prioritizes: frontmatter.title â†’ Astro.props.title â†’ (PageMeta default)
 *    - Prioritizes: frontmatter.lede â†’ frontmatter.description â†’ Astro.props.description â†’ (PageMeta default)
 *    - Prioritizes: frontmatter.banner_image â†’ frontmatter.portrait_image â†’ (PageMeta default)
 * 
 * 3. PAGE META generates all meta tags with fallbacks
 *    - Single source of truth for all defaults
 *    - Generates Open Graph, Twitter Card, and standard SEO tags
 *    - Ensures consistent meta tags across all pages
 */

interface Props {
  // Direct props that .astro pages might pass (e.g., for title, description)
  title?: string;
  description?: string;

  // Props from Markdown/MDX page frontmatter, which Astro nests under `frontmatter`
  frontmatter?: {
    title?: string;
    description?: string;
    lede?: string;
    banner_image?: string;
    portrait_image?: string;
    og_image?: string; // OpenGraph specific image for toolkit pages
  };
}

// Process frontmatter data with clear priority order
const fm = Astro.props.frontmatter || {};

// Extract values with clear priority
const pageTitle = fm.title || Astro.props.title;
const pageDescription = fm.lede || fm.description || Astro.props.description;

// For toolkit pages, prioritize og_image over other image fields
const isToolkitPage = Astro.url.pathname.startsWith('/toolkit/');
const pageImageUrl = isToolkitPage && fm.og_image 
  ? fm.og_image 
  : fm.banner_image || fm.portrait_image;

// Debug logging for toolkit pages with og_image
if (isToolkitPage && fm.og_image) {
  console.log(`ðŸ”— Toolkit page ${Astro.url.pathname} using og_image: ${fm.og_image}`);
}

// Extract page context for dynamic header
const currentPath = Astro.url.pathname;
let pageType = "";
let clientName = "";

// Determine page type based on URL
if (currentPath === '/toolkit' || currentPath.startsWith('/toolkit/')) {
  pageType = "toolkit";
} else if (currentPath.startsWith('/client/')) {
  pageType = "client";
  // Extract client name from URL like /client/hypernova/...
  const pathParts = currentPath.split('/');
  if (pathParts.length > 2) {
    clientName = pathParts[2];
  }
} else if (currentPath.startsWith('/read/')) {
  pageType = "read";
} else if (currentPath.startsWith('/projects/')) {
  pageType = "projects";
} else if (currentPath.startsWith('/learn-with/') || currentPath.startsWith('/vibe-with/')) {
  pageType = "learning";
}

// PageMeta.astro will handle all defaults if these are undefined
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/visuals/appIcon__Lossless_Record--Rounded-Rectangle.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="google-site-verification" content="DxG05i6VcG3uGrOped0ZQGyw5Oorv30KqRY9EPadxCc" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    
    {/* Page title for browser tab */}
    <title>{pageTitle || "Go Lossless: Innovate and Collaborate"}</title>
    
    {/* Open Graph and SEO meta tags - PageMeta handles all defaults */}
    <PageMeta
      title={pageTitle}
      description={pageDescription}
      imageUrl={pageImageUrl}
      ogType="article" 
      twitterCardType="summary_large_image"
    />

    {/* Import global avatar and author handle styles */}
    <link rel="stylesheet" href="/src/styles/avatars.css" />
  </head>
  <body>
    <Header 
      currentPath={currentPath}
      pageType={pageType}
      clientName={clientName}
    />
    <main>
      <slot />
    </main>
    <Footer />
  </body>
</html>

<style>
  body, html {
    background-color: var(--clr-primary-bg);
  }

  main {
    margin-top: 4.5rem;
  }
  h1 {
    font-family: "Poppins", sans-serif;
    color: var(--clr-lossless-primary-light);
  }
</style>
