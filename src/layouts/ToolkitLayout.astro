---
import "@styles/global.css";
import Layout from "@layouts/Layout.astro";
import { getCollection } from "astro:content";
import CardGrid from "@basics/CardGrid.astro";
import TagColumn from "@components/tool-components/TagColumn.astro";

// Get all entries from the tools collection
const toolEntries = await getCollection("tooling");

const {
  title = "Toolkit",
  description = "A curated collection of tools",
  columns = 3,
  gap = "1rem",
  minCardWidth = "300px",
  filterTag
} = Astro.props;

// Filter entries by tag if filterTag is provided
const filteredEntries = filterTag
  ? toolEntries.filter(entry => entry.data.tags?.includes(filterTag))
  : toolEntries;

// Get all unique tags
const allTags = Array.from(
  new Set(
    toolEntries.flatMap(entry => entry.data.tags || [])
  )
).sort();

// Map entries to tools format with filePath
const toolsWithFilePath = filteredEntries.map(entry => ({
  ...entry.data,
  id: entry.id,
  filePath: `../content/tooling/${entry.id}`,
}));

---

<Layout title={title} description={description}>
  <main>
    <div class="toolkit-container">
      <div class="sidebar">
        <TagColumn allRenderedTags={allTags} tools={toolEntries.map(entry => entry.data)} />
      </div>
      <div class="tools-container">
        <CardGrid
          tools={toolsWithFilePath}
          gap={gap}
          minCardWidth={minCardWidth}
        />
      </div>
    </div>
  </main>
</Layout>

<style>
  .toolkit-container {
    width: 92%;
    margin: 0 auto;
    padding: 2rem;
    display: flex;
    gap: 2rem;
    overflow: visible; /* Allow overflow for hover effects */
  }

  .sidebar {
    flex: 0 0 250px;
    position: relative; /* Ensure proper stacking context */
    overflow: visible; /* Allow overflow for hover effects */
  }

  .tools-container {
    flex: 1;
  }

  .toolkit-header {
    margin-bottom: 3rem;
    text-align: center;
  }

  .toolkit-header h1 {
    font-size: var(--fs-800);
    color: var(--clr-heading);
    margin-bottom: 1rem;
  }

  .toolkit-description {
    font-size: var(--fs-400);
    color: var(--clr-body);
    max-width: 800px;
    margin: 0 auto;
    line-height: 1.6;
  }

  .toolkit-content {
    display: flex;
    gap: 2rem;
    width: 100%;
    position: relative;
  }

  @media (max-width: 768px) {
    .toolkit-container {
      padding: 1rem;
      flex-direction: column;
    }

    .sidebar {
      flex: none;
      width: 100%;
      overflow: visible; /* Allow overflow for hover effects */
    }

    .toolkit-header {
      margin-bottom: 2rem;
    }

    .toolkit-content {
      flex-direction: column;
    }

    .bare-tools-section {
      padding: 1rem;
    }

    .bare-tools-grid {
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
  }

  .filter-notice {
    font-size: var(--fs-300);
    color: var(--clr-body);
    opacity: 0.8;
    margin-top: 0.5rem;
  }

  .no-tools {
    text-align: center;
    color: var(--clr-body);
    font-style: italic;
    padding: 2rem;
  }
</style>
