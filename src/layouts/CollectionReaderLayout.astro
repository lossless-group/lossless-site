---
// site/src/layouts/CollectionReaderLayout.astro

import { unified } from 'unified';
import remarkParse from 'remark-parse';
import remarkGfm from 'remark-gfm';
import remarkImages from '@utils/markdown/remark-images'; 
import remarkBacklinks from '@utils/markdown/remark-backlinks';
import remarkCitations from '@utils/markdown/remark-citations';
import remarkTableOfContents from '@utils/markdown/remark-toc';
import type { Root } from 'mdast';

import CollectionSidebar from '@components/articles/ContentNavSidebar.astro';
import OneArticleOnPage from '@components/articles/OneArticleOnPage.astro';
import { markdownDebugger } from '@utils/markdown/markdownDebugger';

// Props
interface Props {
  collection: string;
  entry: any;
  essays: any[];
}

const { collection, entry, essays } = Astro.props as Props;
console.log('[CollectionReaderLayout.astro] Received essays prop:', essays);

let mdastNode: Root | null = null;

// Process markdown content
if (entry) {
  const processor = unified()
    .use(remarkParse)
    .use(remarkGfm)
    .use(remarkImages)
    .use(remarkBacklinks)
    .use(remarkCitations)
    .use(remarkTableOfContents);

  const mdast = processor.parse(entry.body || '');
  mdastNode = await processor.run(mdast);

  // Debug output
  markdownDebugger.log('CollectionReaderLayout.astro Debug');
  markdownDebugger.writeDebugFile('collection-reader-mdast', mdastNode);
  markdownDebugger.verbose('MDAST structure:', mdastNode);
}

// Prepare content data for OneArticleOnPage
const contentData = entry ? {
  path: entry.id,
  id: entry.id,
  collection: collection,
  ...entry.data
} : null;
---

<div class="collection-reader-layout">
  <main class="collection-reader-pane">
    {entry && mdastNode && contentData ? (
      <OneArticleOnPage 
        content={mdastNode} 
        data={contentData} 
      />
    ) : (
      <h2>Collection: {collection}</h2>
    )}
  </main>

  <aside class="collection-sidebar mobile-bottom-sidebar">
    <div class="sidebar-inner">
      <CollectionSidebar essays={essays} currentSlug={entry ? entry.id : null} />
    </div>
  </aside>
</div>


<style>
.collection-reader-layout {
  display: flex;
  flex-direction: row;
  width: 100%;
  height: auto;
  overflow: auto;
}

.collection-sidebar {
  width: 300px;
  min-width: 300px;
  max-width: 800px;
  flex-shrink: 0;
  border-left: 1px solid var(--clr-lossless-ui-btn-border, #ccc);
  overflow-y: auto;
  position: sticky;
  top: 4rem; /* Adjust for header height */
  height: calc(100vh - 4rem);
  padding: 1rem;
  background: var(--clr-sidebar-bg, #111);
}

.sidebar-inner {
  width: 100%;
  min-width: 0;
}

.collection-reader-pane {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1rem 2rem;
  overflow-y: auto;
  min-width: 0;
}

@media (max-width: 1024px) {
  .collection-reader-layout {
    flex-direction: column;
  }

  .collection-reader-pane {
    padding: 1rem;
  }

  .collection-sidebar {
    position: relative;
    width: 100%;
    max-width: 100%;
    min-width: 100%;
    height: auto;
    border-left: none;
    border-top: 1px solid var(--clr-lossless-ui-btn-border, #ccc);
    padding: 1rem 0;
  }

  /* Optional: make it scrollable if very long */
  .mobile-bottom-sidebar {
    max-height: 400px; /* Adjust as needed */
    overflow-y: auto;
  }
}

</style>
