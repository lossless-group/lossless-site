---
// site/src/layouts/CollectionReaderLayout.astro
import { unified } from 'unified';
import remarkParse from 'remark-parse';
import remarkGfm from 'remark-gfm';
import remarkImages from 'remark-images'; 
import remarkBacklinks from '@utils/markdown/remark-backlinks';
import remarkCitations from '@utils/markdown/remark-citations';

import CollectionSidebar from '@components/articles/ContentNavSidebar.astro';

// Define the expected props structure for type safety and clarity
interface Props {
  collection: string; 
  entry: any; 
  essays: any[];
}

// Destructure props passed from the page component
const { collection, entry, essays } = Astro.props as Props;

// Initialize MDAST node variable and rendered HTML string
let mdastNode = null;
let renderedHtml = '';

// Process markdown content only if a specific entry is being displayed
if (entry) {
  // Use the pre-rendered HTML from the entry object
  // This assumes `entry.rendered.html` is passed from getStaticPaths
  renderedHtml = entry.rendered?.html || '';

  // Optionally, re-process the body if needed for other reasons,
  // but primarily rely on the pre-rendered HTML.
  // The unified processing logic can remain for potential future use
  // or if we need to extract specific data from the MDAST.
  const processor = unified()
    .use(remarkParse) 
    .use(remarkGfm) 
    .use(remarkImages) 
    .use(remarkBacklinks)
    .use(remarkCitations); 

  // Parse the markdown content into an MDAST tree
  const mdast = processor.parse(entry.body || '');
  // Run transformations on the MDAST tree
  mdastNode = await processor.run(mdast);

}

---
<div class="collection-reader-layout grid grid-cols-1 md:grid-cols-[240px_1fr] lg:grid-cols-[280px_1fr] gap-8">
  <aside class="sidebar w-full md:w-1/3 lg:w-1/4 p-2 md:p-4 border-r border-neutral-300 dark:border-neutral-700 overflow-y-auto flex flex-col">
    <CollectionSidebar essays={essays} currentSlug={entry ? entry.id : null} />
  </aside>

  <main class="reader-pane flex-1 p-2 md:p-4 lg:p-6 overflow-y-auto">
    <div id="reader-content-wrapper">
      {entry ? (
        <div>
          <h2>{entry.data.title}</h2>
          {/* Use Astro's directive to render HTML */}
          <div set:html={renderedHtml} />
        </div>
      ) : (
        <h2>Collection: {collection}</h2>
      )}
    </div>
  </main>
</div>
