---
/**
 * TagChip.astro â€” Dynamic Tag Routing Component
 *
 * Implements dynamic routing for tags as specified in:
 *   /content/lost-in-public/prompts/render-logic/Convert-Static-Routing-to-Dynamic-Routing-in-Tags.md
 *
 * Follows comprehensive, parallel commenting rules as outlined in:
 *   /content/lost-in-public/reminders/Comprehensive-Rules-for-Code-Generation.md
 *
 * - Accepts a `route` prop for dynamic routing (defaults to 'toolkit').
 * - Generates href as `/${route}/${tag}` unless `href` is explicitly provided.
 * - Logs a warning in development if `route` is missing or invalid.
 */

interface Props {
  tag: string;
  count?: number;
  selected?: boolean;
  includeCount?: boolean;
  title?: string;
  href?: string;
  route?: string; // NEW: dynamic route context for tag links
  [key: string]: any; // Allow other HTML attributes such as aria-label, onClick, etc.
}

// Destructure props, providing defaults for count, includeCount, selected, and route
const {
  tag,
  count = 0,
  includeCount = false,
  selected = false,
  title,
  href,
  route = 'toolkit' // Default route for backward compatibility
} = Astro.props;

// Helper function to convert train-case tags to normal case for UI display
function trainCaseToNormalCase(tag: string): string {
  if (typeof tag !== 'string') {
    console.error('[TagChip] trainCaseToNormalCase received non-string tag:', tag, 'Type:', typeof tag);
    return String(tag); // or return '' as a fallback
  }
  return tag
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

const normalCase = trainCaseToNormalCase(tag);
// Only use the explicit 'selected' prop, not the legacy 'isSelected' prop
const isTagSelected = selected;

// --- DYNAMIC HREF LOGIC ---
// If `href` is provided, use it. Otherwise, generate href using route and tag.
// If route is missing or falsy, fallback to 'toolkit' and log a warning in development.
let computedHref = href;
if (!href) {
  let routeToUse = route || 'toolkit';
  if (!route && import.meta.env.DEV) {
    // Log a warning in development mode if route is not provided
    console.warn('[TagChip.astro] No `route` prop provided. Falling back to "/toolkit". See Convert-Static-Routing-to-Dynamic-Routing-in-Tags.md for details.');
  }
  computedHref = `/${routeToUse}/${encodeURIComponent(tag)}`;
}

---

<!--
  TagChip.astro Render Block

  - Renders a clickable tag chip with dynamic href.
  - Displays tag in normal case and count if provided.
  - Applies selected styling if applicable.
  - Accepts additional HTML attributes via ...rest.
-->
<a 
  href={computedHref} 
  class={`tool-tag${isTagSelected ? ' selected' : ''}`} 
  title={title || `Click to filter by ${normalCase}`}
  aria-label={`Filter by ${normalCase}${isTagSelected ? ' (currently selected)' : ''}`}
  data-tag={tag}
>
  <p>{normalCase}</p>
  {count !== undefined && count > 0 ? <span class="count">({count})</span> : null}
</a>

<style>
  /* Container to handle the hover effect */
  .tool-tag {
    background: var(--clr-lossless-primary-dark);
    color: var(--clr-lossless-primary-glass);
    border-radius: 0.25em;
    white-space: nowrap;
    padding: 0.1em 0.1em;
    display: inline-block;
    height: fit-content;
    position: relative;
    cursor: pointer;
    border: 1px solid transparent;
    transition: all 0.2s ease-in-out;
    margin: 3px;
    overflow: visible;
  }

  /* Content styling */
  .tool-tag p {
    font-size: var(--fs-250);
    margin: 0.1em 0.3em;
    display: inline-block;
  }

  /* Count styling */
  .tool-tag .count {
    font-size: var(--fs-200) !important;
    margin-left: 0.3em;
    opacity: 0.8;
    display: inline-block;
  }

  /* Direct hover style in the component to ensure it works */
  .tool-tag:hover {
    background-color: #3a3a45;
    border-color: var(--clr-lossless-accent--brightest);
    color: var(--clr-lossless-primary-glass--lighter);
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  /* Selected state styling */
  .tool-tag.selected {
    background-color: var(--clr-lossless-accent);
    color: var(--clr-white, #ffffff);
    border-color: var(--clr-lossless-accent);
    box-shadow: 0 0 5px rgba(255, 165, 0, 0.5);
  }
</style>
