---
interface Props {
  tagString: string;
  count?: number;
  selected?: boolean;
  includeCount?: boolean;
  title?: string;
  fontSize?: string;
  [key: string]: any; // Allow other HTML attributes such as aria-label, onClick, etc.
}

const {
  tagString,
  count = 0,
  includeCount = false,
  selected = false,
  title,
  fontSize,
} = Astro.props;

function trainCaseToNormalCase(tag: string): string {
  if (typeof tag !== 'string') {
    console.error('[TagChip] trainCaseToNormalCase received non-string tag:', tag);
    return String(tag);
  }
  return tag
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

const normalCase = trainCaseToNormalCase(tagString);
const isTagSelected = selected;
---

<span
  class={`tool-tag${isTagSelected ? ' selected' : ''}`}
  title={title || `Click to filter by ${normalCase}`}
  aria-label={`Filter by ${normalCase}${isTagSelected ? ' (currently selected)' : ''}`}
  data-tag={tagString}
  data-count={count}
  role="button"
  tabindex="0"
>
  <p style={fontSize ? `font-size: ${fontSize};` : undefined}>{normalCase}</p>
  {includeCount && count > 0 ? <span class="count">({count})</span> : null}
</span>

<script>
  // DEBUG: Log script loading
  // console.log('üîç TagChip DEBUG - Script loaded');
  
  document.addEventListener('DOMContentLoaded', () => {
    // console.log('üîç TagChip DEBUG - DOMContentLoaded fired');
    
    const tagChips = document.querySelectorAll('.tool-tag');
    // console.log('üîç TagChip DEBUG - Found tag chips:', {
    //   count: tagChips.length,
    //   elements: Array.from(tagChips).map(el => ({
    //     tag: el.getAttribute('data-tag'),
    //     classes: el.className,
    //     html: el.outerHTML.substring(0, 100) + '...'
    //   }))
    // });
    
    tagChips.forEach((tagChip, index) => {
      // console.log(`üîç TagChip DEBUG - Setting up listener for chip ${index}:`, {
      //   tag: tagChip.getAttribute('data-tag'),
      //   element: tagChip
      // });
      
      tagChip.addEventListener('click', (e) => {
        // console.log('üîç TagChip DEBUG - CLICK EVENT FIRED!', {
        //   target: e.target,
        //   currentTarget: e.currentTarget
        // });
        
        e.preventDefault();
        const tag = tagChip.getAttribute('data-tag');
        const isCurrentlySelected = tagChip.classList.contains('selected');
        
        if (tag) {
          // Toggle selection state
          tagChip.classList.toggle('selected');
          const isNowSelected = tagChip.classList.contains('selected');
          
          // DEBUG: Log tag selection change with detailed analysis
          // console.log('üîç TagChip DEBUG - Tag clicked:', {
          //   tag,
          //   tagType: typeof tag,
          //   tagLength: tag?.length,
          //   tagValue: JSON.stringify(tag),
          //   dataTagAttribute: tagChip.getAttribute('data-tag'),
          //   wasSelected: isCurrentlySelected,
          //   isNowSelected,
          //   element: tagChip,
          //   elementHTML: tagChip.outerHTML.substring(0, 200) + '...'
          // });
          
          // Dispatch custom event for TagShareHeader to listen to
          const tagSelectionEvent = new CustomEvent('tagSelectionChanged', {
            detail: {
              tag: tag,
              selected: isNowSelected,
              element: tagChip
            },
            bubbles: true
          });
          
          // DEBUG: Log event dispatch with validation
          // console.log('üîç TagChip DEBUG - Dispatching tagSelectionChanged event:', {
          //   eventDetail: tagSelectionEvent.detail,
          //   tagIsString: typeof tag === 'string',
          //   tagIsValid: tag && tag.length > 0,
          //   tagContainsHTML: tag && (tag.includes('<') || tag.includes('>')),
          //   originalDataTag: tagChip.getAttribute('data-tag')
          // });
          
          document.dispatchEvent(tagSelectionEvent);
          
          // Legacy support for existing toggleTagSelection function
          if (typeof (window as any).toggleTagSelection === 'function') {
            (window as any).toggleTagSelection(tag);
          }
        } else {
          console.error('üîç TagChip DEBUG - No tag attribute found!', {
            element: tagChip,
            attributes: Array.from(tagChip.attributes).map(attr => `${attr.name}="${attr.value}"`)
          });
        }
      });
      
      // Also add a test click handler to see if ANY events work
      tagChip.addEventListener('mousedown', () => {
        // console.log('üîç TagChip DEBUG - MOUSEDOWN event fired for:', tagChip.getAttribute('data-tag'));
      });
    });
  });
</script>


<style is:global>
  .tool-tag {
    background: var(--clr-lossless-primary-dark, #2a2a30);
    color: var(--clr-lossless-primary-glass, #ccc);
    border-radius: 0.25em;
    white-space: nowrap;
    padding: 0.1em 0.1em;
    display: inline-block;
    height: fit-content;
    position: relative;
    cursor: pointer;
    border: 1px solid transparent;
    transition: all 0.2s ease-in-out;
    margin: 3px;
    overflow: visible;
  }

  .tool-tag p {
    font-size: var(--fs-250, 0.85rem);
    margin: 0.1em 0.3em;
    display: inline-block;
  }

  .tool-tag .count {
    font-size: inherit;
    margin-left: 0.3em;
    opacity: 0.8;
    display: inline-block;
  }

  .tool-tag:hover {
    background-color: #3a3a45;
    border-color: var(--clr-lossless-accent--brightest);
    color: var(--clr-lossless-primary-glass--lighter);
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .tool-tag.selected {
    background-color: var(--clr-lossless-primary-glass, #444);
    color: var(--clr-white, #fff);
    border-color: var(--clr-lossless-primary-glass, #666);
    box-shadow: 0 0 5px rgba(100, 100, 100, 0.5);
  }
</style>