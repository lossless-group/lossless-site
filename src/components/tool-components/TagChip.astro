---
interface Props {
  tagString: string;
  count?: number;
  selected?: boolean;
  includeCount?: boolean;
  title?: string;
  fontSize?: string;
  [key: string]: any; // Allow other HTML attributes such as aria-label, onClick, etc.
}

const {
  tagString,
  count = 0,
  includeCount = false,
  selected = false,
  title,
  fontSize,
} = Astro.props;

function trainCaseToNormalCase(tag: string): string {
  if (typeof tag !== 'string') {
    console.error('[TagChip] trainCaseToNormalCase received non-string tag:', tag);
    return String(tag);
  }
  return tag
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

const normalCase = trainCaseToNormalCase(tagString);
const isTagSelected = selected;
---

<span
  class={`tool-tag${isTagSelected ? ' selected' : ''}`}
  title={title || `Click to filter by ${normalCase}`}
  aria-label={`Filter by ${normalCase}${isTagSelected ? ' (currently selected)' : ''}`}
  data-tag={tagString}
  data-count={count}
  role="button"
  tabindex="0"
>
  <p style={fontSize ? `font-size: ${fontSize};` : undefined}>{normalCase}</p>
  {includeCount && count > 0 ? <span class="count">({count})</span> : null}
</span>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.tool-tag').forEach(tagChip => {
      tagChip.addEventListener('click', (e) => {
        e.preventDefault();
        const tag = tagChip.getAttribute('data-tag');
        if (tag && typeof toggleTagSelection === 'function') {
          toggleTagSelection(tag);
        }
      });
    });
  });
</script>

