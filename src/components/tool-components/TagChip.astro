---
interface Props {
  tagString: string;
  count?: number;
  selected?: boolean;
  includeCount?: boolean;
  title?: string;
  fontSize?: string;
  [key: string]: any; // Allow other HTML attributes such as aria-label, onClick, etc.
}

const {
  tagString,
  count = 0,
  includeCount = false,
  selected = false,
  title,
  fontSize,
} = Astro.props;

function trainCaseToNormalCase(tag: string): string {
  if (typeof tag !== 'string') {
    console.error('[TagChip] trainCaseToNormalCase received non-string tag:', tag);
    return String(tag);
  }
  return tag
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

const normalCase = trainCaseToNormalCase(tagString);
const isTagSelected = selected;
---

<span
  class={`tool-tag${isTagSelected ? ' selected' : ''}`}
  title={title || `Click to filter by ${normalCase}`}
  aria-label={`Filter by ${normalCase}${isTagSelected ? ' (currently selected)' : ''}`}
  data-tag={tagString}
  data-count={count}
  role="button"
  tabindex="0"
>
  <p style={fontSize ? `font-size: ${fontSize};` : undefined}>{normalCase}</p>
  {includeCount && count > 0 ? <span class="count">({count})</span> : null}
</span>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.tool-tag').forEach(tagChip => {
      tagChip.addEventListener('click', (e) => {
        e.preventDefault();
        const tag = tagChip.getAttribute('data-tag');
        if (tag && typeof toggleTagSelection === 'function') {
          toggleTagSelection(tag);
        }
      });
    });
  });
</script>


<style is:global>
  .tool-tag {
    background: var(--clr-lossless-primary-dark, #2a2a30);
    color: var(--clr-lossless-primary-glass, #ccc);
    border-radius: 0.25em;
    white-space: nowrap;
    padding: 0.1em 0.1em;
    display: inline-block;
    height: fit-content;
    position: relative;
    cursor: pointer;
    border: 1px solid transparent;
    transition: all 0.2s ease-in-out;
    margin: 3px;
    overflow: visible;
  }

  .tool-tag p {
    font-size: var(--fs-250, 0.85rem);
    margin: 0.1em 0.3em;
    display: inline-block;
  }

  .tool-tag .count {
    font-size: inherit;
    margin-left: 0.3em;
    opacity: 0.8;
    display: inline-block;
  }

  .tool-tag:hover {
    background-color: #3a3a45;
    border-color: var(--clr-lossless-accent--brightest);
    color: var(--clr-lossless-primary-glass--lighter);
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .tool-tag.selected {
    background-color: var(--clr-lossless-primary-glass, #444);
    color: var(--clr-white, #fff);
    border-color: var(--clr-lossless-primary-glass, #666);
    box-shadow: 0 0 5px rgba(100, 100, 100, 0.5);
  }
</style>