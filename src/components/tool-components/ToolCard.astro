---
import { filterTitle, getEffectiveSiteName } from "@utils/toolUtils";
import TagCloud from "./TagCloud.astro";
import TextCTA from "@components/basics/cta/TextCTA.astro";
import { getReferenceSlug } from "@utils/slugify";

interface Tool {
  site_name?: string;
  title?: string;
  zinger?: string;
  og_title?: string;
  url: string;
  image?: string;
  og_image?: string;
  og_image_url?: string;
  favicon?: string;
  description?: string;
  description_site_cp?: string;
  tags?: string[];
  filename?: string;
  og_screenshot_url?: string;
}

interface Props {
  [key: string]: any; // Allow arbitrary HTML attributes (class, data-*, aria-*, etc.)
  tool?: Tool;
  // Support for direct properties
  site_name?: string;
  title?: string;
  zinger?: string;
  og_title?: string;
  url?: string;
  image?: string;
  og_image?: string;
  og_image_url?: string;
  favicon?: string;
  description?: string;
  description_site_cp?: string;
  tags?: string[];
  filename?: string;
  og_screenshot_url?: string;
  filePath?: string; // Allow filePath to be passed as a prop
  small?: boolean;
}


const {
  id,
  site_name,
  title,
  zinger,
  og_title,
  url,
  image,
  og_image,
  og_image_url,
  favicon,
  description,
  description_site_cp,
  tags = [],
  filename,
  og_screenshot_url,
  filePath,
  small = false,
  // Allow all other HTML attributes like class, data-*, aria-*
  ...rest
} = Astro.props;

if (!id) {
  throw new Error(`Missing tooling ID in ToolCard.astro.\n\nProps: ${JSON.stringify(Astro.props, null, 2)}`);
}

// Ensure tags is always an array
const safeTags = tags || [];

// Get the effective site name using the utility function
const effectiveSiteName = getEffectiveSiteName(site_name, filename, url);

// Get the effective title with fallback order: zinger â†’ title â†’ og_title
const effectiveTitle = zinger || title || og_title || "";

// Only filter the title if it exists, otherwise leave it blank
const displayTitle = effectiveTitle ? filterTitle(effectiveTitle, effectiveSiteName || "") : "";

// More robust description handling
const hasDescriptionSiteCp =
  description_site_cp !== undefined &&
  description_site_cp !== null &&
  description_site_cp.trim() !== "";
const hasDescription =
  description !== undefined &&
  description !== null &&
  description.trim() !== "";

/* console.log("Description availability:", {
  hasDescriptionSiteCp,
  hasDescription,
  description_site_cp_type: typeof description_site_cp,
  description_type: typeof description,
  description_site_cp_value: description_site_cp,
  description_value: description,
}); */

const effectiveDescription = hasDescriptionSiteCp
  ? description_site_cp
  : hasDescription
    ? description
    : "";

// Log the final effective description
/* console.log("Effective description:", {
  value: effectiveDescription,
  length: effectiveDescription.length,
  isEmpty: effectiveDescription === "",
}); */

// Generate a toolkit path that preserves the directory structure
function generateToolkitPath(): string {
  return `/toolkit/${getReferenceSlug(id)}`;
}

// Get the toolkit path for this tool
const toolkitPath = generateToolkitPath();

---

<div class={`tool-card card card-hover-effect${small ? ' small' : ''}`} data-tags={JSON.stringify(safeTags)}>
  <div class="content-wrapper">
    {
      (image || og_image || og_image_url || og_screenshot_url) && (
        <div class="tool-card-image">
          <img
            src={image || og_image || og_image_url || og_screenshot_url}
            alt={displayTitle}
            data-primary-image={image || og_image || og_image_url}
            data-screenshot-url={og_screenshot_url}
            loading="lazy"
            decoding="async"
          />
        </div>
      )
    }
    <div class="tool-card__header">
      <div class="tool-card__site-name">
        {favicon && <img class="tool-favicon" src={favicon} alt="" />}
        <a href={url} target="_blank" rel="noopener noreferrer">
          <h2><span class="text-wrapper">{effectiveSiteName}</span></h2>
        </a>
      </div>
      <h4><span class="text-wrapper">{displayTitle}</span></h4>
    </div>

    {!small && effectiveDescription && (
      <p class="tool-description">
        <span class="description-text">{effectiveDescription}</span>
      </p>
    )}

    {!small && (
      <div class="tool-card__footer">
        <TagCloud tags={tags} />
      </div>
    )}

    {!small && (
      <div class="tool-card__cta">
        <TextCTA 
          href={toolkitPath} 
          text="Our Thoughts" 
          showArrow={true}
          class="tool-thoughts-cta"
        />
      </div>
    )}
  </div>
</div>

<script>
  // Handle image loading and fallback
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".tool-card-image img").forEach((img) => {
      const imgElement = img as HTMLImageElement;
      imgElement.addEventListener(
        "error",
        function () {
          const imageElement = imgElement;
          const primaryImage = imageElement.getAttribute("data-primary-image");
          const screenshotUrl = imageElement.getAttribute(
            "data-screenshot-url"
          );

          // If this is the primary image failing and we have a screenshot URL
          if (imageElement.src === primaryImage && screenshotUrl) {
            console.log(
              "Primary image failed to load, falling back to screenshot URL"
            );
            imageElement.src = screenshotUrl;

            // Set up error handler for the fallback image
            imageElement.addEventListener(
              "error",
              function () {
                console.log(
                  "Screenshot image also failed to load, hiding image container"
                );
                const container = imageElement.closest(
                  ".tool-card-image"
                ) as HTMLElement;
                if (container) container.style.display = "none";
              },
              { once: true }
            );
          } else {
            // Either the fallback failed or we don't have a fallback
            console.log(
              "Image failed to load and no fallback available, hiding image container"
            );
            const container = imageElement.closest(
              ".tool-card-image"
            ) as HTMLElement;
            if (container) container.style.display = "none";
          }
        },
        { once: true }
      );
    });
  });
</script>

<style>
  .tool-card {
    background: color-mix(
      in oklab,
      var(--clr-lossless-primary-glass),
      var(--clr-lossless-primary-dark) 90%
    );
    border: 1px solid var(--clr-lossless-ui-btn-border);
    color: aliceblue;
    padding: 0.15em;
    border-radius: 1em;
    /* Removed transition property - now handled by card-hover-effect class */
    height: 100%;
    display: flex;
    flex-direction: column;
    max-width: 100%;
    max-height: 100%;
    margin-bottom: 2px;
    box-sizing: border-box;
    opacity: 1;
    transform: translateY(0);
    transition: opacity 300ms ease, transform 300ms ease, box-shadow 300ms ease;
    will-change: opacity, transform, box-shadow;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15); /* Subtle base shadow */
    min-width: 0;
    flex-shrink: 1;
  }

  .tool-card.fade-in {
    animation: fadeInUp 400ms ease forwards;
  }

  .tool-card.fade-out {
    animation: fadeOutDown 300ms ease forwards;
    pointer-events: none;
  }

  .tool-card h2 {
    font-size: var(--fs-500);
    font-weight: var(--fw-bold);
    margin-bottom: 0.25em;
  }

  .tool-card .content-wrapper {
    display: flex;
    flex-direction: column;
    justify-content: space-between; /* ðŸ‘ˆ even out content */
    flex-grow: 1;
    height: 100%;
    width: 100%; /* Ensure content wrapper takes full width */
    padding: 0.5em;
    box-sizing: border-box; /* Include padding in width calculation */
  }

  .tool-card-image {
    border-radius: 8px 8px 0 0;
    overflow: hidden;
    margin-bottom: 0.5em;
    max-height: 180px;
    flex-shrink: 0;
  }

  .tool-card-image img {
    width: 100%;
    height: 100%;
    max-height: 180px;
    object-fit: cover;
    border-radius: 0.5em;
    transition: transform 0.3s ease-in-out;
  }

  .tool-card:hover .tool-card-image img {
    transform: scale(1.1);
  }

  .tool-card__header {
    display: flex;
    flex-direction: column;
    width: 100%;
    gap: 0.5em;
    margin-bottom: 0.5em;
  }

  .tool-card__site-name {
    display: inline-flex;
    align-items: center;
    gap: 0.5em;
    width: 100%; /* Ensure it takes full width */
  }

  .tool-card__site-name h2 {
    margin: 0;
    line-height: 1;
    width: 100%; /* Ensure it takes full width */
    overflow: hidden; /* Prevent overflow */
  }

  .tool-favicon {
    width: 20px;
    height: 20px;
    border-radius: 4px;
    display: block;
  }

  .tool-card h4 {
    color: var(--clr-heading);
    font-size: var(--fs-350);
    margin: 0;
    flex-grow: 1;
  }

  .tool-description {
    color: var(--clr-body);
    font-family: var(--ff-legible);
    font-weight: var(--fw-regular);
    font-size: var(--fs-300);
    margin-bottom: 0.5em;
    flex-grow: 1;
    width: 100%; /* Ensure it takes full width */
    max-width: 100%; /* Prevent overflow */
    word-wrap: break-word; /* Allow long words to break */
    word-break: break-word; /* Handle long strings without spaces */
    hyphens: auto; /* Enable hyphenation for better text wrapping */
    overflow-wrap: break-word; /* Modern property for word wrapping */
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
  }

  .description-text {
    display: inline-block;
    width: 100%;
    white-space: normal; /* Ensure text wraps */
  }

  /* Common text wrapping styles for all text elements */
  .text-wrapper {
    display: inline-block;
    width: 100%;
    white-space: normal;
    word-wrap: break-word;
    word-break: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
  }
  
  /* Apply text wrapping to headings */
  .tool-card h2, 
  .tool-card h4 {
    width: 100%;
    max-width: 100%;
    word-wrap: break-word;
    word-break: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
  }
  
  .tool-card h4 {
    color: var(--clr-heading);
    font-size: var(--fs-350);
    margin: 0;
    flex-grow: 1;
  }

  .tool-card__footer {
    display: flex;
    flex-direction: column;
    gap: 0.75em;
    margin-top: 0.5em;
  }

  .tool-card__cta {
    display: flex;
    justify-content: flex-end;
    width: 100%;
  }

  .tool-thoughts-cta {
    margin-top: 0.25em;
  }

  @keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeOutDown {
  from {
    opacity: 1;
    transform: translateY(0);
  }
  to {
    opacity: 0;
    transform: translateY(20px);
  }
}


.tool-card.small {
  height: auto !important;
  max-height: 320px !important;
  min-height: unset !important;
  flex: unset !important;
  width: 100% !important;
  max-width: 100% !important;
  min-width: 0 !important;
}

.tool-card.small .content-wrapper {
  height: auto !important;
  flex-grow: 0 !important;
}

.tool-card.small .tool-card__footer,
.tool-card.small .tool-card__cta,
.tool-card.small .tool-description {
  display: none !important;
}

.tool-card.small .tool-card-image {
  max-height: 140px;
}

.tool-card.small .tool-card-image img {
  height: 100%;
  max-height: 120px;
}

/* Responsive styles for better adaptation to smaller widths */
@media (max-width: 1024px) {
  .tool-card {
    padding: 0.1em;
  }
  
  .tool-card .content-wrapper {
    padding: 0.4em;
  }
  
  .tool-card-image img {
    height: 160px;
  }
  
  .tool-card h2 {
    font-size: var(--fs-400);
  }
  
  .tool-card h4 {
    font-size: var(--fs-300);
  }
  
  .tool-description {
    font-size: var(--fs-250);
  }
}

@media (max-width: 768px) {
  .tool-card-image img {
    height: 140px;
  }
  
  .tool-card h2 {
    font-size: var(--fs-350);
  }
  
  .tool-card h4 {
    font-size: var(--fs-250);
  }
  
  .tool-description {
    font-size: var(--fs-200);
  }
}

@media (max-width: 480px) {
  .tool-card-image img {
    height: 120px;
  }
  
  .tool-card h2 {
    font-size: var(--fs-300);
  }
  
  .tool-card h4 {
    font-size: var(--fs-200);
  }
  
  .tool-description {
    font-size: var(--fs-150);
  }
}

/* When sidebar is expanded (hover state on desktop) */
@media (min-width: 1025px) {
  .collection-reader-layout:has(.collection-sidebar:hover) .tool-card {
    padding: 0.1em;
  }
  
  .collection-reader-layout:has(.collection-sidebar:hover) .tool-card .content-wrapper {
    padding: 0.4em;
  }
  
  .collection-reader-layout:has(.collection-sidebar:hover) .tool-card-image img {
    height: 160px;
  }
  
  .collection-reader-layout:has(.collection-sidebar:hover) .tool-card h2 {
    font-size: var(--fs-400);
  }
  
  .collection-reader-layout:has(.collection-sidebar:hover) .tool-card h4 {
    font-size: var(--fs-300);
  }
  
  .collection-reader-layout:has(.collection-sidebar:hover) .tool-description {
    font-size: var(--fs-250);
  }
}

</style>