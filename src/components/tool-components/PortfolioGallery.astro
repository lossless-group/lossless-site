---
import PortfolioCard from "./PortfolioCard.astro";

interface Props {
  portfolios: any[];
  expanded?: boolean;
  galleryId?: string;
  small?: boolean;
  takeUpWholeWidth?: boolean;
}

const {
  portfolios,
  expanded = true,
  small,
  takeUpWholeWidth = false,
  galleryId = `portfolio-gallery-${Date.now()}-${Math.floor(Math.random() * 1000)}`
} = Astro.props;
---

<div class="portfolio-gallery-container" id={galleryId} class:list={[{ 'full-width': takeUpWholeWidth }]}>
  <div class="gallery-header">
    <button type="button" class="toggle-button" onclick={`togglePortfolioGallery('${galleryId}')`}>
      {expanded ? "Click to close" : "Click to expand"}
    </button>
  </div>

  <div class="portfolio-gallery-scroll" style={`display: ${expanded ? 'flex' : 'none'}`}>
    {portfolios.map(portfolio => (
      <div class="portfolio-card-wrapper">
        <PortfolioCard {...portfolio} filePath={portfolio.filePath} small={small} />
      </div>
    ))}
  </div>
</div>

<style>
.portfolio-gallery-container {
  margin-bottom: 2rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 0.5rem;
  background-color: rgba(255, 255, 255, 0.03);
  width: 100%;
  /* Smooth responsive width using clamp() - scales from 100% on mobile to 25vw on large screens */
  max-width: clamp(100%, calc(100vw - 2rem), 25vw);
  overflow: hidden;
  box-sizing: border-box;
  min-width: 0;
  word-wrap: break-word;
  overflow-wrap: break-word;
  /* Add smooth transition for width changes */
  transition: max-width 0.3s ease-in-out;
}

.gallery-header {
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  padding: 0.75rem 1rem;
  background-color: rgba(255, 255, 255, 0.02);
}

.portfolio-gallery-container.full-width {
  max-width: 100%;
  width: 100%;
}

.toggle-button {
  width: 100%;
  background: transparent;
  border: none;
  color: white;
  text-align: left;
  font-weight: 600;
  cursor: pointer;
  font-size: 0.9rem;
  box-sizing: border-box;
  padding: 0;
}

.portfolio-gallery-scroll {
  display: flex;
  overflow-x: auto;
  overflow-y: visible;
  scroll-snap-type: x mandatory;
  gap: 1rem;
  padding: 1rem;
  width: 100%;
  max-width: 100%;
  flex-wrap: nowrap;
  box-sizing: border-box;
  min-width: 0;
  word-wrap: break-word;
  overflow-wrap: break-word;
  align-items: flex-start;
}

.portfolio-card-wrapper {
  flex: 0 0 auto;
  scroll-snap-align: start;
  width: 320px;
  max-width: 320px;
  min-width: 280px;
  display: flex;
  box-sizing: border-box;
}

.portfolio-card-wrapper > * {
  width: 100%;
  display: flex;
  flex-direction: column;
  min-width: 0;
}

/* Override PortfolioCard styles when inside gallery */
.portfolio-gallery-scroll .portfolio-card {
  height: auto !important;
  max-height: none !important;
  min-height: auto !important;
}

.portfolio-gallery-scroll .portfolio-card .content-wrapper {
  height: auto !important;
}

/* Dynamic sizing for small galleries */
.portfolio-gallery-container:has(.portfolio-gallery-scroll .portfolio-card-wrapper:nth-child(-n+2)) .portfolio-card-wrapper {
  /* For galleries with 1-2 items, allow more compact sizing */
  width: 300px;
  max-width: 300px;
}

.portfolio-gallery-container:has(.portfolio-gallery-scroll .portfolio-card-wrapper:nth-child(-n+1)) .portfolio-card-wrapper {
  /* For galleries with just 1 item, make it even more compact */
  width: 280px;
  max-width: 280px;
}

/* Compact mode for cards with minimal content */
.portfolio-gallery-scroll .portfolio-card:not(:has(.portfolio-description)) {
  /* Cards without descriptions can be more compact */
  min-height: auto;
}

.portfolio-gallery-scroll .portfolio-card:not(:has(.portfolio-card__footer)) {
  /* Cards without footer content can also be more compact */
  min-height: auto;
}

/* JavaScript-enhanced compact sizing */
.compact-gallery .portfolio-card-wrapper {
  width: 300px !important;
  max-width: 300px !important;
}

.single-card-gallery .portfolio-card-wrapper {
  width: 280px !important;
  max-width: 280px !important;
}

.portfolio-card.minimal-content {
  min-height: auto !important;
}

.portfolio-card.minimal-content .content-wrapper {
  padding: 0.75em !important;
}

.portfolio-card.minimal-content .portfolio-card-image {
  height: 120px !important;
  max-height: 120px !important;
  min-height: 120px !important;
}

/* Responsive adjustments for compact galleries */
@media (max-width: 768px) {
  .compact-gallery .portfolio-card-wrapper {
    width: 260px !important;
    max-width: 260px !important;
  }
  
  .single-card-gallery .portfolio-card-wrapper {
    width: 240px !important;
    max-width: 240px !important;
  }
}

.portfolio-gallery-scroll .portfolio-card-image {
  height: 140px !important;
  max-height: 140px !important;
  min-height: 140px !important;
  overflow: hidden !important;
  flex-shrink: 0 !important;
}

.portfolio-gallery-scroll .portfolio-card-image img {
  height: 100% !important;
  max-height: 100% !important;
  width: 100% !important;
  object-fit: cover !important;
}

.portfolio-gallery-scroll .portfolio-description {
  -webkit-line-clamp: unset !important;
  max-height: none !important;
  overflow: visible !important;
  display: block !important;
  -webkit-box-orient: unset !important;
}

/* Ensure the gallery respects the prose container's max-width */
.prose .portfolio-gallery-container {
  max-width: 85ch;
  width: 100%;
  overflow: hidden;
}

.prose .portfolio-gallery-scroll {
  max-width: 85ch;
  width: 100%;
  overflow-x: auto;
}

/* Smooth responsive breakpoints using container queries and CSS custom properties */
@media (min-width: 1024px) {
  .portfolio-gallery-container {
    /* Smoothly scale from 25vw to 35vw as screen gets larger */
    max-width: clamp(25vw, calc(20vw + 5vw * (100vw - 1024px) / (1600px - 1024px)), 35vw);
  }
}

@media (min-width: 1600px) {
  .portfolio-gallery-container {
    /* Maintain 35vw for very large screens */
    max-width: 35vw;
  }
}

/* For smaller screens, use a more gradual approach */
@media (max-width: 1023px) {
  .portfolio-gallery-container {
    /* Smoothly scale from 100% on mobile to 35vw on tablet */
    max-width: clamp(100%, calc(100% - (100vw - 768px) * 0.65), 35vw);
  }
}

@media (max-width: 767px) {
  .portfolio-gallery-container {
    /* Full width on mobile */
    max-width: 100%;
  }
  
  .portfolio-card-wrapper {
    width: 280px;
    max-width: 280px;
    min-width: 260px;
  }
  
  .portfolio-gallery-scroll .portfolio-card-image {
    height: 120px !important;
    max-height: 120px !important;
    min-height: 120px !important;
  }
}

@media (max-width: 480px) {
  .portfolio-card-wrapper {
    width: 260px;
    max-width: 260px;
    min-width: 240px;
  }
  
  .portfolio-gallery-scroll .portfolio-card-image {
    height: 100px !important;
    max-height: 100px !important;
    min-height: 100px !important;
  }
}
</style>

<script type="module">
  function togglePortfolioGallery(id) {
    const container = document.getElementById(id);
    const scrollArea = container.querySelector('.portfolio-gallery-scroll');
    const button = container.querySelector('.toggle-button');

    const isVisible = scrollArea.style.display !== 'none';
    scrollArea.style.display = isVisible ? 'none' : 'flex';
    button.textContent = isVisible ? 'Click to expand' : 'Click to close';
  }

  function optimizeGallerySize() {
    document.querySelectorAll('.portfolio-gallery-container').forEach(container => {
      const cards = container.querySelectorAll('.portfolio-card-wrapper');
      const cardCount = cards.length;
      
      // Add data attributes for CSS targeting
      container.setAttribute('data-card-count', cardCount);
      
      // Add compact class for small galleries
      if (cardCount <= 2) {
        container.classList.add('compact-gallery');
      }
      
      if (cardCount === 1) {
        container.classList.add('single-card-gallery');
      }
      
      // Check each card for minimal content and mark accordingly
      cards.forEach(cardWrapper => {
        const card = cardWrapper.querySelector('.portfolio-card');
        const description = card.querySelector('.portfolio-description');
        const footer = card.querySelector('.portfolio-card__footer');
        
        let contentScore = 0;
        if (description && description.textContent.trim().length > 50) contentScore++;
        if (footer && footer.children.length > 0) contentScore++;
        
        if (contentScore === 0) {
          card.classList.add('minimal-content');
        } else if (contentScore === 1) {
          card.classList.add('moderate-content');
        } else {
          card.classList.add('rich-content');
        }
      });
    });
  }

  // Run optimization after DOM loads
  document.addEventListener('DOMContentLoaded', optimizeGallerySize);
  
  // Re-run if content changes dynamically
  window.addEventListener('load', optimizeGallerySize);

  window.togglePortfolioGallery = togglePortfolioGallery;
</script>
