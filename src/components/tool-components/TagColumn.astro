---
import SortAscLetters from '@assets/Icons/sort-ascending-letters.svg';
import SortDescLetters from '@assets/Icons/sort-descending-letters.svg';
import SortAscNumbers from '@assets/Icons/sort-ascending-numbers.svg';
import SortDescNumbers from '@assets/Icons/sort-descending-numbers.svg';
import TagChip from '@components/tool-components/TagChip.astro';

interface Props {
  tools: any[];
}

const { tools } = Astro.props;

const allTags = Array.from(new Set(tools.flatMap(tool => tool.tags || []))).sort();

function trainCaseToNormalCase(tag: string): string {
  return tag
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

const tagCounts = tools.reduce((acc, tool) => {
  (tool.tags || []).forEach(tag => {
    acc[tag] = (acc[tag] || 0) + 1;
  });
  return acc;
}, {});
---

<!-- Choices.js CDN -->
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css"
/>
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

<div class="tag-panel">
  <h3 class="tag-heading">Filter by Tag</h3>

  <div class="tag-actions">
    <button id="sort-alpha-asc" class="sort-btn" title="Sort A → Z"><SortAscLetters /></button>
    <button id="sort-alpha-desc" class="sort-btn" title="Sort Z → A"><SortDescLetters /></button>
    <button id="sort-count-desc" class="sort-btn" title="Sort by Count ↓"><SortDescNumbers /></button>
    <button id="sort-count-asc" class="sort-btn" title="Sort by Count ↑"><SortAscNumbers /></button>

    <button id="clear-tags" class="clear-tags-btn">Clear All</button>
  </div>

  <!-- Choices-enhanced select multiple -->
  <select id="tag-select" multiple class="js-choice">
    {allTags.map(tag => (
      <option value={tag}>{`${trainCaseToNormalCase(tag)} (${tagCounts[tag]})`}</option>
    ))}
  </select>

  <!-- Optional visual tag list -->
  <!-- <div class="tag-list" id="tag-list">
    {allTags.map(tag => (
      <TagChip
        tagString={tag}
        count={tagCounts[tag]}
        includeCount={true}
        data-tag={tag}
        data-count={tagCounts[tag]}
      />
    ))}
  </div> -->
</div>

<script type="module">
let currentPage = 1;
const itemsPerPage = 50;

let choices;


function refreshChoices() {
  choices.setChoices(
    choices._store.state.choices.map(choice => ({
      value: choice.value,
      label: choice.label,
      selected: choice.selected,
      disabled: choice.disabled,
    })),
    'value',
    'label',
    true
  );
}

function getSelectedTags() {
  return choices ? choices.getValue(true) : [];
}

function filterCards() {
  const selectedTags = getSelectedTags();
  const allCards = Array.from(document.querySelectorAll('.tool-card'));

  // Compute matching cards in DOM order
  const matchingCards = allCards.filter(card => {
    const tags = JSON.parse(card.dataset.tags || '[]');
    return selectedTags.every(tag => tags.includes(tag)) || selectedTags.length === 0;
  });

  // Show first currentPage * itemsPerPage matching cards
  let visibleCount = 0;
  matchingCards.forEach((card, index) => {
    if (index < currentPage * itemsPerPage) {
      card.classList.add('fade-in');
      card.addEventListener('animationend', () => {
        card.classList.remove('fade-in');
      }, { once: true });
      card.style.display = '';

      // ✅ Increment count of visible cards
      visibleCount += 1;
    } else {
      card.style.display = 'none';
    }
  });



  // Hide unmatched cards
  allCards.forEach(card => {
    if (!matchingCards.includes(card)) {
      card.style.display = 'none';
    }
  });

  // Update Load More button visibility
  const loadMoreBtn = document.getElementById('load-more');
  if (loadMoreBtn) {
    if (visibleCount >= matchingCards.length) {
      loadMoreBtn.style.display = 'none';
    } else {
      loadMoreBtn.style.display = '';
    }
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const tagSelectEl = document.getElementById('tag-select');
  const clearBtn = document.getElementById('clear-tags');
  let currentSort = 'alpha-asc';

  // Initialize Choices.js
  choices = new Choices(tagSelectEl, {
    removeItemButton: true,
    searchPlaceholderValue: 'Search tags...',
    itemSelectText: '',
    shouldSort: true, // must be true for sorter to apply
    sorter: (a, b) => {
      // Use currentSort to determine sort logic
      if (currentSort === 'alpha-asc') {
        return a.label.localeCompare(b.label);
      } else if (currentSort === 'alpha-desc') {
        return b.label.localeCompare(a.label);
      } else if (currentSort === 'count-asc') {
        // Extract count from label e.g. "AI Toolkit (123)"
        const countA = parseInt(a.label.match(/\((\d+)\)/)?.[1] || '0', 10);
        const countB = parseInt(b.label.match(/\((\d+)\)/)?.[1] || '0', 10);
        return countA - countB;
      } else if (currentSort === 'count-desc') {
        const countA = parseInt(a.label.match(/\((\d+)\)/)?.[1] || '0', 10);
        const countB = parseInt(b.label.match(/\((\d+)\)/)?.[1] || '0', 10);
        return countB - countA;
      } else {
        return 0;
    }
  },
  });

  tagSelectEl.addEventListener('change', () => {
    currentPage = 1; // Reset page when changing tags
    filterCards();
  });

  clearBtn?.addEventListener('click', () => {
    choices.removeActiveItems();
    currentPage = 1;
    filterCards();
  });

  const loadMoreBtn = document.getElementById('load-more');
  if (loadMoreBtn) {
    loadMoreBtn.addEventListener('click', () => {
      currentPage += 1;
      filterCards();
    });
  }

  // Handle .tool-tag clicks in ToolCards
  document.addEventListener('click', (e) => {
    const chip = e.target.closest('.tool-tag');
    if (chip && chip.dataset && chip.dataset.tag) {
      const clickedTag = chip.dataset.tag;

      const selectedTags = getSelectedTags();
      if (!selectedTags.includes(clickedTag)) {
        choices.setChoiceByValue(clickedTag);
        currentPage = 1; // Reset page to 1 when adding new tag
        filterCards();
      }
    }
  });

  document.getElementById('sort-alpha-asc')?.addEventListener('click', () => {
    currentSort = 'alpha-asc';
    refreshChoices();
  });

  document.getElementById('sort-alpha-desc')?.addEventListener('click', () => {
    currentSort = 'alpha-desc';
    refreshChoices();
  });

  document.getElementById('sort-count-asc')?.addEventListener('click', () => {
    currentSort = 'count-asc';
    refreshChoices();
  });

  document.getElementById('sort-count-desc')?.addEventListener('click', () => {
    currentSort = 'count-desc';
    refreshChoices();
  });


  // Initial reveal: show first N matching cards
  filterCards();
});

</script>

<style>
  .tag-panel {
    padding: 1rem;
    background: var(--clr-sidebar-bg);
    border-radius: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .tag-heading {
    font-size: 1rem;
    font-weight: 600;
    color: white;
  }

  .clear-tags-btn {
    background: transparent;
    border: 1px solid white;
    color: white;
    padding: 0.3rem 0.6rem;
    font-size: 0.8rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease;
    align-self: start;
  }

  .clear-tags-btn:hover {
    background-color: white;
    color: black;
  }

  .sort-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.3rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .sort-btn svg {
    width: 20px;
    height: 20px;
    fill: currentColor;
    transition: transform 0.2s;
    display: inline-block;
    color: white;
  }

  .sort-btn:hover svg {
    transform: scale(1.1);
  }

  .tag-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.4rem;
    max-height: 60vh;
    overflow-y: auto;
    overflow-x: hidden;
    width: 100%;
    box-sizing: border-box;
    border-bottom: 5px solid var(--clr-lossless-primary-glass);
    padding-bottom: 1rem;
  }

  .tag-actions {
    display: flex;
    justify-content: flex-start;
    flex-wrap: wrap;
    gap: 0.4rem;
  }

</style>

<style is:global>
  .choices__inner {
    background-color: var(--clr-lossless-primary-dark) !important;
    border: 1px solid var(--clr-lossless-primary-glass) !important;
    color: white !important;
  }

  .choices__list--multiple .choices__item {
    background-color: var(--clr-lossless-primary-glass) !important;
    color: white !important;
    white-space: normal !important;
    overflow: visible !important;
    text-overflow: clip !important;
    word-break: break-word !important;
    hyphens: auto !important;
    display: inline-flex !important;
    align-items: center;
  }

  .choices__list--dropdown {
    background-color: var(--clr-lossless-primary-dark) !important;
    color: white !important;
  }

  .choices__item--choice {
    color: white !important;
  }

  .choices__item--choice.is-highlighted {
    background-color: var(--clr-lossless-primary-glass) !important;
    color: white !important;
  }

  .choices__input {
    background-color: var(--clr-lossless-primary-dark) !important;
    color: white !important;
    border: none !important;
    box-shadow: none !important;
  }
</style>
