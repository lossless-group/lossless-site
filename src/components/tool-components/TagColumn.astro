---
interface Props {
  tools: any[];
}

const { tools } = Astro.props;

// Extract and sort all unique tags
const allTags = Array.from(new Set(tools.flatMap(tool => tool.tags || []))).sort();

function trainCaseToNormalCase(tag: string): string {
  return tag
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}
---

<div class="tag-panel">
  <h3 class="tag-heading">Filter by Tag</h3>

  <input
    id="tag-search"
    type="text"
    placeholder="Search tags..."
    class="tag-search"
    aria-label="Search tags"
  />

  <div class="tag-actions">
    <button id="clear-tags" class="clear-tags-btn">Clear All</button>
  </div>

  <div class="tag-list" id="tag-list">
    {allTags.map(tag => (
      <span class="tool-tag" data-tag={tag} role="button" tabindex="0">
        <p>{trainCaseToNormalCase(tag)}</p>
      </span>
    ))}
  </div>
</div>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('tag-search');
    const tagList = document.getElementById('tag-list');
    const clearBtn = document.getElementById('clear-tags');
    const allCards = Array.from(document.querySelectorAll('.tool-card'));
    let selectedTags = [];

    function filterCards() {
      allCards.forEach(card => {
        const tags = JSON.parse(card.dataset.tags || '[]');
        const match = selectedTags.every(tag => tags.includes(tag));
        card.style.display = match || selectedTags.length === 0 ? '' : 'none';
      });

      document.querySelectorAll('.tool-tag').forEach(chip => {
        const tag = chip.dataset.tag;
        chip.classList.toggle('selected', selectedTags.includes(tag));
      });
    }

    function toggleTag(tag) {
      if (selectedTags.includes(tag)) {
        selectedTags = selectedTags.filter(t => t !== tag);
      } else {
        selectedTags.push(tag);
      }
      filterCards();
    }

    document.addEventListener('click', e => {
      const chip = e.target.closest('.tool-tag');
      if (chip && chip.dataset.tag) {
        e.preventDefault();
        toggleTag(chip.dataset.tag);
      }
    });

    searchInput?.addEventListener('input', () => {
      const query = searchInput.value.toLowerCase();
      document.querySelectorAll('.tool-tag').forEach(tag => {
        const text = tag.textContent?.toLowerCase() || '';
        tag.style.display = text.includes(query) ? '' : 'none';
      });
    });

    clearBtn?.addEventListener('click', () => {
      selectedTags = [];
      filterCards();
    });
  });
</script>

<style>
  .tag-panel {
    padding: 1rem;
    background: var(--clr-sidebar-bg);
    border-radius: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .tag-heading {
    font-size: 1rem;
    font-weight: 600;
    color: white;
  }

  .tag-search {
    padding: 0.4rem 0.6rem;
    font-size: 0.9rem;
    border-radius: 0.25rem;
    border: 1px solid var(--clr-lossless-primary-glass);
    background-color: var(--clr-lossless-primary-dark);
    color: white;
    width: 100%;
  }

  .tag-actions {
    display: flex;
    justify-content: flex-end;
  }

  .clear-tags-btn {
    background: transparent;
    border: 1px solid white;
    color: white;
    padding: 0.3rem 0.6rem;
    font-size: 0.8rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .clear-tags-btn:hover {
    background-color: white;
    color: black;
  }

  .tag-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.4rem;
    max-height: 60vh;
    overflow-y: auto;
  }

  .tool-tag {
    background: var(--clr-lossless-primary-dark);
    color: var(--clr-lossless-primary-glass);
    border-radius: 0.25em;
    white-space: nowrap;
    padding: 0.1em 0.1em;
    display: inline-block;
    height: fit-content;
    position: relative;
    cursor: pointer;
    border: 1px solid transparent;
    transition: all 0.2s ease-in-out;
    margin: 2px;
    overflow: visible;
  }

  .tool-tag p {
    font-size: var(--fs-250);
    margin: 0.1em 0.3em;
    display: inline-block;
  }

  .tool-tag:hover {
    background-color: #3a3a45;
    border-color: var(--clr-lossless-accent--brightest);
    color: var(--clr-lossless-primary-glass--lighter);
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .tool-tag.selected {
    background-color: var(--clr-lossless-accent);
    color: white;
    border-color: var(--clr-lossless-accent);
    box-shadow: 0 0 5px rgba(255, 165, 0, 0.5);
  }

  @media (max-width: 768px) {
    .tag-panel {
      max-height: 300px;
      overflow-y: auto;
    }
  }
</style>
