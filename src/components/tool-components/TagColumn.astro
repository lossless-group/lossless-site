---
import SortAscLetters from '@assets/Icons/sort-ascending-letters.svg';
import SortDescLetters from '@assets/Icons/sort-descending-letters.svg';
import SortAscNumbers from '@assets/Icons/sort-ascending-numbers.svg';
import SortDescNumbers from '@assets/Icons/sort-descending-numbers.svg';
import TagChip from '@components/tool-components/TagChip.astro';

interface Props {
  tools: any[];
}

const { tools } = Astro.props;

const allTags = Array.from(new Set(tools.flatMap(tool => tool.tags || []))).sort();

function trainCaseToNormalCase(tag: string): string {
  return tag
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

const tagCounts = tools.reduce((acc, tool) => {
  (tool.tags || []).forEach(tag => {
    acc[tag] = (acc[tag] || 0) + 1;
  });
  return acc;
}, {});
---

<!-- Choices.js CDN -->
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css"
/>
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

<div class="tag-panel">
  <div class="tag-header">
    <h3 class="tag-heading">Filter by Tag</h3>
  </div>

  <div class="tag-actions">
    <button id="sort-alpha-asc" class="sort-btn" title="Sort A → Z"><SortAscLetters /></button>
    <button id="sort-alpha-desc" class="sort-btn" title="Sort Z → A"><SortDescLetters /></button>
    <button id="sort-count-desc" class="sort-btn" title="Sort by Count ↓"><SortDescNumbers /></button>
    <button id="sort-count-asc" class="sort-btn" title="Sort by Count ↑"><SortAscNumbers /></button>

    <button id="clear-tags" class="clear-tags-btn">Clear All</button>
  </div>

  <!-- Choices-enhanced select multiple -->
  <select id="tag-select" multiple class="js-choice">
    {allTags.map(tag => (
      <option value={tag}>{`${trainCaseToNormalCase(tag)} (${tagCounts[tag]})`}</option>
    ))}
  </select>

  <!-- Optional visual tag list -->
  <!-- <div class="tag-list" id="tag-list">
    {allTags.map(tag => (
      <TagChip
        tagString={tag}
        count={tagCounts[tag]}
        includeCount={true}
        data-tag={tag}
        data-count={tagCounts[tag]}
      />
    ))}
  </div> -->
</div>

<script type="module">
let currentPage = 1;
const itemsPerPage = 50;

let choices;


function refreshChoices() {
  // Clear any existing selected items to prevent duplicates

  const selectedTags = getSelectedTags();
  choices.removeActiveItems();

  choices.setChoices(
    choices._store.state.choices.map(choice => ({
      value: choice.value,
      label: choice.label,
      selected: choice.selected,
      disabled: choice.disabled,
    })),
    'value',
    'label',
    true
  );
  
  selectedTags.forEach(tag => {
    choices.setChoiceByValue(tag);
  });
}

function getSelectedTags() {
  return choices ? choices.getValue(true) : [];
}

function filterCards() {
  const selectedTags = getSelectedTags();
  const allCards = Array.from(document.querySelectorAll('.tool-card'));

  // Compute matching cards in DOM order
  const matchingCards = allCards.filter(card => {
    const tags = JSON.parse(card.dataset.tags || '[]');
    return selectedTags.every(tag => tags.includes(tag)) || selectedTags.length === 0;
  });

  // Show first currentPage * itemsPerPage matching cards
  let visibleCount = 0;
  matchingCards.forEach((card, index) => {
    if (index < currentPage * itemsPerPage) {

    const tagChips = card.querySelectorAll('.tool-tag');
    tagChips.forEach(chip => {
        const tag = chip.dataset.tag;
        if (selectedTags.includes(tag)) {
          console.log("Added selected")
          chip.classList.add('selected');
        } else {
          chip.classList.remove('selected');
        }
      });
      
      card.classList.add('fade-in');
      card.addEventListener('animationend', () => {
        card.classList.remove('fade-in');
      }, { once: true });
      card.style.display = '';

      // ✅ Increment count of visible cards
      visibleCount += 1;
    } else {
      card.style.display = 'none';
    }
  });



  // Hide unmatched cards
  allCards.forEach(card => {
    if (!matchingCards.includes(card)) {
      card.style.display = 'none';
    }
  });

  // Update Load More button visibility
  const loadMoreBtn = document.getElementById('load-more');
  if (loadMoreBtn) {
    if (visibleCount >= matchingCards.length) {
      loadMoreBtn.style.display = 'none';
    } else {
      loadMoreBtn.style.display = '';
    }
  }

  // Dispatch custom event to update filter header
  const filtersChangedEvent = new CustomEvent('filtersChanged', {
    detail: {
      selectedTags: selectedTags,
      visibleCount: visibleCount
    }
  });
  document.dispatchEvent(filtersChangedEvent);
}

document.addEventListener('DOMContentLoaded', () => {
  const tagSelectEl = document.getElementById('tag-select');
  const clearBtn = document.getElementById('clear-tags');
  let currentSort = 'alpha-asc';

  // Initialize Choices.js
  choices = new Choices(tagSelectEl, {
    removeItemButton: true,
    searchPlaceholderValue: 'Search tags...',
    itemSelectText: '',
    shouldSort: true, // must be true for sorter to apply
    searchEnabled: true,
    searchFields: ['label'],
    position: 'auto',
    // Mobile-friendly settings
    shouldSortItems: true,
    searchResultLimit: 50,
    // Ensure search input is properly accessible on mobile
    classNames: {
      containerOuter: 'choices',
      containerInner: 'choices__inner',
      input: 'choices__input',
      inputCloned: 'choices__input--cloned',
      list: 'choices__list',
      listItems: 'choices__list--multiple',
      listSingle: 'choices__list--single',
      listDropdown: 'choices__list--dropdown',
      item: 'choices__item',
      placeholder: 'choices__placeholder',
      group: 'choices__group',
      groupHeading: 'choices__heading',
      button: 'choices__button',
      activeState: 'is-active',
      focusState: 'is-focused',
      openState: 'is-open',
      disabledState: 'is-disabled',
      flippedState: 'is-flipped',
      loadingState: 'is-loading',
      noResults: 'has-no-results',
      noChoices: 'has-no-choices'
    },
    sorter: (a, b) => {
      // Use currentSort to determine sort logic
      if (currentSort === 'alpha-asc') {
        return a.label.localeCompare(b.label);
      } else if (currentSort === 'alpha-desc') {
        return b.label.localeCompare(a.label);
      } else if (currentSort === 'count-asc') {
        // Extract count from label e.g. "AI Toolkit (123)"
        const countA = parseInt(a.label.match(/\((\d+)\)/)?.[1] || '0', 10);
        const countB = parseInt(b.label.match(/\((\d+)\)/)?.[1] || '0', 10);
        return countA - countB;
      } else if (currentSort === 'count-desc') {
        const countA = parseInt(a.label.match(/\((\d+)\)/)?.[1] || '0', 10);
        const countB = parseInt(b.label.match(/\((\d+)\)/)?.[1] || '0', 10);
        return countB - countA;
      } else {
        return 0;
    }
  },
  });

  // Handle URL parameters for pre-selected tags
  function handleUrlParameters() {
    const urlParams = new URLSearchParams(window.location.search);
    const tagsParam = urlParams.get('tags');
    
    if (tagsParam) {
      // Split by comma and trim whitespace
      const selectedTags = tagsParam.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
      
      // Set the selected tags in Choices.js
      selectedTags.forEach(tag => {
        choices.setChoiceByValue(tag);
      });
      
      // Trigger filtering to show only matching cards
      filterCards();
    }
  }

  // Mobile-specific enhancements
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  
  if (isMobile) {
    // Force focus on search input when dropdown opens
    choices.passedElement.element.addEventListener('focus', () => {
      setTimeout(() => {
        const searchInput = choices.input.element;
        if (searchInput) {
          searchInput.focus();
          searchInput.click();
        }
      }, 100);
    });

    // Ensure search input is properly styled for mobile
    const searchInput = choices.input.element;
    if (searchInput) {
      searchInput.setAttribute('inputmode', 'search');
      searchInput.setAttribute('autocomplete', 'off');
      searchInput.setAttribute('autocorrect', 'off');
      searchInput.setAttribute('autocapitalize', 'off');
      searchInput.setAttribute('spellcheck', 'false');
    }

    // Handle touch events to ensure search input gets focus
    choices.passedElement.element.addEventListener('touchstart', (e) => {
      e.preventDefault();
      setTimeout(() => {
        const searchInput = choices.input.element;
        if (searchInput) {
          searchInput.focus();
          searchInput.click();
        }
      }, 50);
    }, { passive: false });

    // Ensure search input is visible when dropdown is open
    const observer = new MutationObserver(() => {
      if (choices.isOpen) {
        const searchInput = choices.input.element;
        if (searchInput) {
          searchInput.style.display = 'block';
          searchInput.style.visibility = 'visible';
          searchInput.style.opacity = '1';
          searchInput.focus();
        }
      }
    });

    observer.observe(choices.passedElement.element, {
      attributes: true,
      attributeFilter: ['class']
    });

    // Handle dropdown open event
    choices.passedElement.element.addEventListener('showDropdown', () => {
      setTimeout(() => {
        const searchInput = choices.input.element;
        if (searchInput) {
          searchInput.focus();
          searchInput.click();
        }
      }, 100);
    });
  }

  tagSelectEl.addEventListener('change', () => {
    currentPage = 1; // Reset page when changing tags
    filterCards();
  });

  clearBtn?.addEventListener('click', () => {
    choices.removeActiveItems();
    currentPage = 1;
    filterCards();
  });

  const loadMoreBtn = document.getElementById('load-more');
  if (loadMoreBtn) {
    loadMoreBtn.addEventListener('click', () => {
      currentPage += 1;
      filterCards();
    });
  }

  // Handle .tool-tag clicks in ToolCards
    document.addEventListener('click', (e) => {
      const chip = e.target.closest('.tool-tag');
      if (chip && chip.dataset && chip.dataset.tag) {
        const clickedTag = chip.dataset.tag;
        const selectedTags = getSelectedTags();

        if (selectedTags.includes(clickedTag)) {
          // ❌ Remove tag
          const item = choices.getValue().find(val => val.value === clickedTag);
          if (item) choices.removeActiveItemsByValue(clickedTag);
        } else {
          // ✅ Add tag
          choices.setChoiceByValue(clickedTag);
        }

        currentPage = 1;
        filterCards();
      }
    });


  document.getElementById('sort-alpha-asc')?.addEventListener('click', () => {
    currentSort = 'alpha-asc';
    refreshChoices();
  });

  document.getElementById('sort-alpha-desc')?.addEventListener('click', () => {
    currentSort = 'alpha-desc';
    refreshChoices();
  });

  document.getElementById('sort-count-asc')?.addEventListener('click', () => {
    currentSort = 'count-asc';
    refreshChoices();
  });

  document.getElementById('sort-count-desc')?.addEventListener('click', () => {
    currentSort = 'count-desc';
    refreshChoices();
  });

  // Handle URL parameters after Choices.js is initialized
  handleUrlParameters();



  // Initial reveal: show first N matching cards
  filterCards();
});

</script>

<style>
  .tag-panel {
    padding: 1rem;
    background: var(--clr-sidebar-bg);
    border-radius: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .tag-heading {
    font-size: 1rem;
    font-weight: 600;
    color: white;
    margin: 0;
  }

  .tag-header {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 2rem;
  }



  .clear-tags-btn {
    background: transparent;
    border: 1px solid white;
    color: white;
    padding: 0.3rem 0.6rem;
    font-size: 0.8rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease;
    align-self: start;
  }

  .clear-tags-btn:hover {
    background-color: white;
    color: black;
  }

  .sort-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.3rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .sort-btn svg {
    width: 20px;
    height: 20px;
    fill: currentColor;
    transition: transform 0.2s;
    display: inline-block;
    color: white;
  }

  .sort-btn:hover svg {
    transform: scale(1.1);
  }

  .tag-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.4rem;
    max-height: 60vh;
    overflow-y: auto;
    overflow-x: hidden;
    width: 100%;
    box-sizing: border-box;
    border-bottom: 5px solid var(--clr-lossless-primary-glass);
    padding-bottom: 1rem;
  }

  .tag-actions {
    display: flex;
    justify-content: flex-start;
    flex-wrap: wrap;
    gap: 0.4rem;
  }

</style>

<style is:global>
.choices__inner {
  background-color: var(--clr-lossless-primary-dark) !important;
  border: 1px solid var(--clr-lossless-primary-glass) !important;
  color: white !important;
  min-height: 44px !important;
  border-radius: 0.5rem !important; /* rounded corners */
}



  .choices__list--multiple .choices__item {
    background-color: var(--clr-lossless-primary-glass) !important;
    color: white !important;
    white-space: normal !important;
    overflow: visible !important;
    text-overflow: clip !important;
    word-break: break-word !important;
    hyphens: auto !important;
    display: inline-flex !important;
    align-items: center;
    min-height: 32px !important; /* Mobile-friendly touch target */
  }

  .choices__list--dropdown {
  background-color: var(--clr-lossless-primary-dark) !important;
  color: white !important;
  max-height: 300px !important;
  overflow-y: auto !important;
  border-radius: 0.5rem !important; /* rounded corners for dropdown too */
}
.choices__list--dropdown .choices__list {
  overflow-y: visible !important;
  max-height: none !important;
}
  .choices__item--choice {
    color: white !important;
    padding: 8px 12px !important; /* Mobile-friendly padding */
    min-height: 44px !important; /* Mobile-friendly touch target */
    display: flex !important;
    align-items: center !important;
  }

  .choices__item--choice.is-highlighted {
    background-color: var(--clr-lossless-primary-glass) !important;
    color: white !important;
  }

  .choices__input {
    background-color: var(--clr-lossless-primary-dark) !important;
    color: white !important;
    border: none !important;
    box-shadow: none !important;
    font-size: 16px !important; /* Prevent zoom on iOS */
    min-height: 44px !important; /* Mobile-friendly touch target */
    padding: 8px 12px !important;
    width: 100% !important;
    box-sizing: border-box !important;
  }

  .choices__input:focus {
    outline: 2px solid var(--clr-lossless-highlight) !important;
    outline-offset: 2px !important;
  }

  /* Mobile-specific improvements */
  @media (max-width: 768px) {
    .choices__inner {
      font-size: 16px !important; /* Prevent zoom on iOS */
    }
    
    .choices__input {
      font-size: 16px !important;
      -webkit-appearance: none !important;
      border-radius: 0 !important;
    }
    
    .choices__list--dropdown {
      max-height: 250px !important;
      z-index: 9999 !important;
    }
    
    .choices__item--choice {
      font-size: 16px !important;
      padding: 12px 16px !important;
    }
  }

  /* Ensure search input is always visible and accessible */
  .choices.is-focused .choices__input {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
  }

  .choices.is-open .choices__input {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
  }

  .tool-card.selected {
  outline: 2px solid var(--clr-lossless-highlight);
  background-color: rgba(255, 255, 255, 0.05);
  transition: outline 0.2s ease;
}
</style>
