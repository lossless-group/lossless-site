---
import SortAscLetters from '@assets/Icons/sort-ascending-letters.svg';
import SortDescLetters from '@assets/Icons/sort-descending-letters.svg';
import SortAscNumbers from '@assets/Icons/sort-ascending-numbers.svg';
import SortDescNumbers from '@assets/Icons/sort-descending-numbers.svg';

interface Props {
  tools: any[];
}

const { tools } = Astro.props;

const allTags = Array.from(new Set(tools.flatMap(tool => tool.tags || []))).sort();

function trainCaseToNormalCase(tag: string): string {
  return tag
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

const tagCounts = tools.reduce((acc, tool) => {
  (tool.tags || []).forEach(tag => {
    acc[tag] = (acc[tag] || 0) + 1;
  }); 
  return acc;
}, {});
---

<div class="tag-panel">
  <h3 class="tag-heading">Filter by Tag</h3>

  <div class="tag-actions">
    <button id="sort-alpha-asc" class="sort-btn" title="Sort A â†’ Z"><SortAscLetters /></button>
    <button id="sort-alpha-desc" class="sort-btn" title="Sort Z â†’ A"><SortDescLetters /></button>
    <button id="sort-count-desc" class="sort-btn" title="Sort by Count â†“"><SortDescNumbers /></button>
    <button id="sort-count-asc" class="sort-btn" title="Sort by Count â†‘"><SortAscNumbers /></button>
  
    <button id="clear-tags" class="clear-tags-btn">Clear All</button>
  </div>

  <!-- Choices select -->
  <select
    id="tag-select"
    multiple
    class="js-choice"
    data-all-tags={JSON.stringify(allTags)}
    data-tag-counts={JSON.stringify(tagCounts)}
  >
    {allTags.map(tag => (
      <option value={tag}>{`${trainCaseToNormalCase(tag)} (${(tagCounts[tag])})`}</option>
    ))}
  </select>

  <!-- Optional visual tag list for sorting -->
  <!-- <div class="tag-list" id="tag-list">
    {allTags.map(tag => (
      <div
        class="tool-tag"
        data-tag={tag}
        data-count={tagCounts[tag]}
      >
        {trainCaseToNormalCase(tag)} ({tagCounts[tag]})
      </div>
    ))}
  </div> -->
</div>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const tagSelectEl = document.getElementById('tag-select');
    const clearBtn = document.getElementById('clear-tags');
    const allCards = Array.from(document.querySelectorAll('.tool-card'));
    const revealedCards = new Set();
    let currentSort = 'alpha-asc';

    const allTags = JSON.parse(tagSelectEl.dataset.allTags);
    const tagCounts = JSON.parse(tagSelectEl.dataset.tagCounts);

    const choices = new Choices(tagSelectEl, {
      removeItemButton: true,
      searchPlaceholderValue: 'Search tags...',
      shouldSort: false,
      itemSelectText: '', // Removes "Press to select"
    });

    function getSelectedTags() {
      return choices.getValue(true);
    }

    function filterCards() {
      const selectedTags = getSelectedTags();

      allCards.forEach(card => {
        const tags = JSON.parse(card.dataset.tags || '[]');
        const match = selectedTags.every(tag => tags.includes(tag));

        if (match || selectedTags.length === 0) {
          card.style.removeProperty('display'); // force full reset
        } else {
          card.style.display = 'none';
        }
      });
    }

    // Choices change listener
    tagSelectEl.addEventListener('change', () => {
      filterCards();
    });

    // Clear all button
    clearBtn?.addEventListener('click', () => {
      choices.removeActiveItems();
      setTimeout(() => {
        filterCards();
      }, 0);
    });

    // Tag sorting â€” only sort .tag-list visually â†’ no dropdown rebuild
    function renderTags(sortBy = currentSort) {
      const tagList = document.getElementById('tag-list');
      if (!tagList) return;

      const tags = [...tagList.querySelectorAll('.tool-tag')];

      const sortFuncs = {
        'alpha-asc': (a, b) => a.dataset.tag.localeCompare(b.dataset.tag),
        'alpha-desc': (a, b) => b.dataset.tag.localeCompare(a.dataset.tag),
        'count-asc': (a, b) =>
          parseInt(a.dataset.count || '0', 10) - parseInt(b.dataset.count || '0', 10),
        'count-desc': (a, b) =>
          parseInt(b.dataset.count || '0', 10) - parseInt(a.dataset.count || '0', 10),
      };

      tags.sort(sortFuncs[sortBy]);
      tagList.innerHTML = '';
      tags.forEach(tag => tagList.appendChild(tag));

      // ðŸš€ DO NOT call setChoices() â†’ huge perf win!
    }

    // Sort button listeners
    document.getElementById('sort-alpha-asc')?.addEventListener('click', () => {
      currentSort = 'alpha-asc';
      renderTags();
    });
    document.getElementById('sort-alpha-desc')?.addEventListener('click', () => {
      currentSort = 'alpha-desc';
      renderTags();
    });
    document.getElementById('sort-count-asc')?.addEventListener('click', () => {
      currentSort = 'count-asc';
      renderTags();
    });
    document.getElementById('sort-count-desc')?.addEventListener('click', () => {
      currentSort = 'count-desc';
      renderTags();
    });

    // Initial reveal
    allCards.forEach(card => {
      if (card.offsetParent !== null) {
        card.classList.add('fade-in');
        revealedCards.add(card);
      }
    });
  });
</script>

<style>
  .tag-panel {
    padding: 1rem;
    background: var(--clr-sidebar-bg);
    border-radius: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .tag-heading {
    font-size: 1rem;
    font-weight: 600;
    color: white;
  }

  .tag-actions {
    display: flex;
    justify-content: flex-start;
    flex-wrap: wrap;
    gap: 0.4rem;
  }

  .clear-tags-btn {
    background: transparent;
    border: 1px solid white;
    color: white;
    padding: 0.3rem 0.6rem;
    font-size: 0.8rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .clear-tags-btn:hover {
    background-color: white;
    color: black;
  }

  .tag-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.4rem;
    max-height: 60vh;
    overflow-y: auto;
    overflow-x: hidden;
    width: 100%;
    box-sizing: border-box;
    border-bottom: 5px solid var(--clr-lossless-primary-glass);
    padding-bottom: 1rem;
  }

  .tool-tag {
    background-color: var(--clr-lossless-primary-glass);
    color: white;
    padding: 0.3rem 0.6rem;
    border-radius: 0.25rem;
    cursor: default;
    font-size: 0.85rem;
  }

  .sort-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.3rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .sort-btn svg {
    width: 20px;
    height: 20px;
    fill: currentColor;
    transition: transform 0.2s;
    display: inline-block;
    color: white;
  }

  .sort-btn:hover svg {
    transform: scale(1.1);
  }

  @media (max-width: 768px) {
    .tag-actions {
      display: none;
    }

    .tag-list {
      display: none;
    }

    #tag-select {
      display: block;
      width: 100%;
      padding: 0.4rem;
      font-size: 1rem;
    }
  }
</style>

<style is:global>
.choices__inner {
  background-color: var(--clr-lossless-primary-dark) !important;
  border: 1px solid var(--clr-lossless-primary-glass) !important;
  color: white !important;
}

.choices__list--multiple .choices__item {
  background-color: var(--clr-lossless-primary-glass) !important;
  color: white !important;
  white-space: normal !important;
  overflow: visible !important;
  text-overflow: clip !important;
  word-break: break-word !important;
  hyphens: auto !important;
  display: inline-flex !important;
  align-items: center;
}

.choices__list--dropdown {
  background-color: var(--clr-lossless-primary-dark) !important;
  color: white !important;
}

.choices__item--choice {
  color: white !important;
}

.choices__item--choice.is-highlighted {
  background-color: var(--clr-lossless-primary-glass) !important;
  color: white !important;
}

.choices__input {
  background-color: var(--clr-lossless-primary-dark) !important;
  color: white !important;
  border: none !important;
  box-shadow: none !important;
}
</style>
