---
interface Props {
  tools: any[];
}

const { tools } = Astro.props;

const allTags = Array.from(new Set(tools.flatMap(tool => tool.tags || []))).sort().slice(1, 10);

function trainCaseToNormalCase(tag: string): string {
  return tag
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

const tagCounts = tools.reduce((acc, tool) => {
  (tool.tags || []).forEach(tag => {
    acc[tag] = (acc[tag] || 0) + 1;
  }); 
  return acc;
}, {});
---

<div class="tag-panel">
  <h3 class="tag-heading">Filter by Tag</h3>

  <button id="clear-tags" class="clear-tags-btn">Clear All</button>

  <!-- Choices select -->
  <select
    id="tag-select"
    multiple
    class="js-choice"
  >
    {allTags.map(tag => (
      <option value={tag}>{`${trainCaseToNormalCase(tag)} (${tagCounts[tag]})`}</option>
    ))}
  </select>
</div>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const tagSelectEl = document.getElementById('tag-select');
    const clearBtn = document.getElementById('clear-tags');
    const allCards = Array.from(document.querySelectorAll('.tool-card'));

    const choices = new Choices(tagSelectEl, {
      removeItemButton: true,
      searchPlaceholderValue: 'Search tags...',
      shouldSort: false,
      itemSelectText: '', // Removes "Press to select"
    });

    function getSelectedTags() {
      return choices.getValue(true);
    }

    function filterCards() {
      const selectedTags = getSelectedTags();

      allCards.forEach(card => {
        const tags = JSON.parse(card.dataset.tags || '[]');
        const match = selectedTags.every(tag => tags.includes(tag));

        if (match || selectedTags.length === 0) {
          card.style.removeProperty('display');
        } else {
          card.style.display = 'none';
        }
      });
    }

    // Choices change listener
    tagSelectEl.addEventListener('change', () => {
      filterCards();
    });

    // Clear all button
    clearBtn?.addEventListener('click', () => {
      choices.removeActiveItems();
      filterCards();
    });

    // Initial reveal
    allCards.forEach(card => {
      if (card.offsetParent !== null) {
        card.classList.add('fade-in');
      }
    });
  });
</script>

<style>
  .tag-panel {
    padding: 1rem;
    background: var(--clr-sidebar-bg);
    border-radius: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .tag-heading {
    font-size: 1rem;
    font-weight: 600;
    color: white;
  }

  .clear-tags-btn {
    background: transparent;
    border: 1px solid white;
    color: white;
    padding: 0.3rem 0.6rem;
    font-size: 0.8rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease;
    align-self: start;
  }

  .clear-tags-btn:hover {
    background-color: white;
    color: black;
  }

  #tag-select {
    display: block;
    width: 100%;
    padding: 0.4rem;
    font-size: 1rem;
  }
</style>

<style is:global>
.choices__inner {
  background-color: var(--clr-lossless-primary-dark) !important;
  border: 1px solid var(--clr-lossless-primary-glass) !important;
  color: white !important;
}

.choices__list--multiple .choices__item {
  background-color: var(--clr-lossless-primary-glass) !important;
  color: white !important;
  white-space: normal !important;
  overflow: visible !important;
  text-overflow: clip !important;
  word-break: break-word !important;
  hyphens: auto !important;
  display: inline-flex !important;
  align-items: center;
}

.choices__list--dropdown {
  background-color: var(--clr-lossless-primary-dark) !important;
  color: white !important;
}

.choices__item--choice {
  color: white !important;
}

.choices__item--choice.is-highlighted {
  background-color: var(--clr-lossless-primary-glass) !important;
  color: white !important;
}

.choices__input {
  background-color: var(--clr-lossless-primary-dark) !important;
  color: white !important;
  border: none !important;
  box-shadow: none !important;
}
</style>
