---
import SortAscLetters from '@assets/Icons/sort-ascending-letters.svg';
import SortDescLetters from '@assets/Icons/sort-descending-letters.svg';
import SortAscNumbers from '@assets/Icons/sort-ascending-numbers.svg';
import SortDescNumbers from '@assets/Icons/sort-descending-numbers.svg';
import TagChip from '@components/tool-components/TagChip.astro';

interface Props {
  tools: any[];
}

const { tools } = Astro.props;

// Extract and sort all unique tags
const allTags = Array.from(new Set(tools.flatMap(tool => tool.tags || []))).sort();

function trainCaseToNormalCase(tag: string): string {
  return tag
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

const tagCounts = tools.reduce((acc, tool) => {
  (tool.tags || []).forEach(tag => {
    acc[tag] = (acc[tag] || 0) + 1;
  }); 
  return acc;
}, {});
---

<div class="tag-panel">
  <h3 class="tag-heading">Filter by Tag</h3>

  <!-- Mobile: Choices.js enhanced multi-select -->
  <select id="mobile-tag-select" multiple>
    {allTags.map(tag => (
      <option value={tag}>{trainCaseToNormalCase(tag)}</option>
    ))}
  </select>

  <!-- Desktop tag search + actions -->
  <input
    id="tag-search"
    type="text"
    placeholder="Search tags..."
    class="tag-search"
    aria-label="Search tags"
    list="tag-options"
  />
  <datalist id="tag-options">
    {allTags.map(tag => (
      <option value={trainCaseToNormalCase(tag)} />
    ))}
  </datalist>

  <div class="tag-actions">
    <button id="sort-alpha-asc" class="sort-btn" title="Sort A → Z"><SortAscLetters /></button>
    <button id="sort-alpha-desc" class="sort-btn" title="Sort Z → A"><SortDescLetters /></button>
    <button id="sort-count-desc" class="sort-btn" title="Sort by Count ↓"><SortDescNumbers /></button>
    <button id="sort-count-asc" class="sort-btn" title="Sort by Count ↑"><SortAscNumbers /></button>
  
    <button id="clear-tags" class="clear-tags-btn">Clear All</button>
  </div>
  
  <div class="selected-tags" id="selected-tags"></div>

  <div class="tag-list" id="tag-list">
    {allTags.map(tag => (
      <TagChip 
        tagString={tag} 
        count={tagCounts[tag]} 
        includeCount={true} 
        data-tag={tag} 
        data-count={tagCounts[tag]} 
      />
    ))}
  </div>
</div>

<script type="module">
  import Choices from 'choices.js';
  import 'choices.js/public/assets/styles/choices.min.css';

  let selectedTags = [];

  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('tag-search');
    const clearBtn = document.getElementById('clear-tags');
    const allCards = Array.from(document.querySelectorAll('.tool-card'));
    const revealedCards = new Set();

    // Initialize Choices.js for mobile select
    const mobileSelectEl = document.getElementById('mobile-tag-select');
    const mobileChoices = new Choices(mobileSelectEl, {
      removeItemButton: true,
      searchPlaceholderValue: 'Search tags...',
      placeholder: true,
      placeholderValue: 'Select tags...',
      shouldSort: false
    });

    function renderTags(sortBy = 'alpha-asc') {
      const tagList = document.getElementById('tag-list');
      const tags = [...tagList.querySelectorAll('.tool-tag')];

      const sortFuncs = {
        'alpha-asc': (a, b) => a.dataset.tag.localeCompare(b.dataset.tag),
        'alpha-desc': (a, b) => b.dataset.tag.localeCompare(a.dataset.tag),
        'count-asc': (a, b) =>
          parseInt(a.dataset.count || '0', 10) - parseInt(b.dataset.count || '0', 10),
        'count-desc': (a, b) =>
          parseInt(b.dataset.count || '0', 10) - parseInt(a.dataset.count || '0', 10),
      };

      tags.sort(sortFuncs[sortBy]);
      tagList.innerHTML = '';
      tags.forEach(tag => tagList.appendChild(tag));
    }

    function filterCards() {
      allCards.forEach(card => {
        const tags = JSON.parse(card.dataset.tags || '[]');
        const match = selectedTags.every(tag => tags.includes(tag));

        if (match || selectedTags.length === 0) {
          card.style.display = '';

          if (!revealedCards.has(card)) {
            card.classList.add('fade-in');
            revealedCards.add(card);
          }
        } else {
          card.style.display = 'none';
        }
      });

      document.querySelectorAll('.tool-tag').forEach(chip => {
        const tag = chip.dataset.tag;
        chip.classList.toggle('selected', selectedTags.includes(tag));
      });

      renderSelectedTags();
    }

    function renderSelectedTags() {
      const container = document.getElementById('selected-tags');
      if (!container) return;

      container.innerHTML = '';

      selectedTags.forEach(tag => {
        const chip = document.createElement('span');
        chip.className = 'tool-tag selected';
        chip.setAttribute('data-tag', tag);
        chip.setAttribute('role', 'button');
        chip.setAttribute('tabindex', '0');

        const p = document.createElement('p');
        p.textContent = tag
          .split('-')
          .map(w => w.charAt(0).toUpperCase() + w.slice(1))
          .join(' ');

        chip.appendChild(p);
        container.appendChild(chip);
      });
    }

    function toggleTag(tag) {
      if (selectedTags.includes(tag)) {
        selectedTags = selectedTags.filter(t => t !== tag);
      } else {
        selectedTags.push(tag);
      }
      filterCards();
      syncChoices();
    }

    function syncChoices() {
      const currentValues = mobileChoices.getValue(true);
      mobileChoices.removeActiveItems();
      selectedTags.forEach(tag => {
        mobileChoices.setChoiceByValue(tag);
      });
    }

    // Desktop tag click
    document.addEventListener('click', e => {
      const chip = e.target.closest('.tool-tag');
      if (chip && chip.dataset.tag) {
        e.preventDefault();
        toggleTag(chip.dataset.tag);
      }
    });

    // Desktop search
    searchInput?.addEventListener('input', () => {
      const query = searchInput.value.toLowerCase();
      document.querySelectorAll('.tag-list .tool-tag').forEach(tag => {
        const text = tag.textContent?.toLowerCase() || '';
        tag.style.display = text.includes(query) ? '' : 'none';
      });
    });

    // Desktop clear all
    clearBtn?.addEventListener('click', () => {
      selectedTags = [];
      searchInput.value = '';
      filterCards();
      mobileChoices.removeActiveItems();

      document.querySelectorAll('.tool-tag').forEach(tag => {
        tag.style.display = '';
      });
    });

    // Desktop sort
    document.getElementById('sort-alpha-asc')?.addEventListener('click', () => {
      renderTags('alpha-asc');
    });
    document.getElementById('sort-alpha-desc')?.addEventListener('click', () => {
      renderTags('alpha-desc');
    });
    document.getElementById('sort-count-asc')?.addEventListener('click', () => {
      renderTags('count-asc');
    });
    document.getElementById('sort-count-desc')?.addEventListener('click', () => {
      renderTags('count-desc');
    });

    // Choices.js event listener
    mobileSelectEl.addEventListener('change', () => {
      selectedTags = Array.from(mobileSelectEl.selectedOptions).map(opt => opt.value);
      filterCards();
    });

    // Initial reveal:
    allCards.forEach(card => {
      if (card.offsetParent !== null) {
        card.classList.add('fade-in');
        revealedCards.add(card);
      }
    });
  });
</script>

<style>
  .tag-panel {
    padding: 1rem;
    background: var(--clr-sidebar-bg);
    border-radius: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .tag-heading {
    font-size: 1rem;
    font-weight: 600;
    color: white;
  }

  .tag-search {
    padding: 0.4rem 0.6rem;
    font-size: 0.9rem;
    border-radius: 0.25rem;
    border: 1px solid var(--clr-lossless-primary-glass);
    background-color: var(--clr-lossless-primary-dark);
    color: white;
    width: 100%;
  }

  .tag-actions {
    display: flex;
    justify-content: flex-start;
  }

  .clear-tags-btn {
    background: transparent;
    border: 1px solid white;
    color: white;
    padding: 0.3rem 0.6rem;
    font-size: 0.8rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .clear-tags-btn:hover {
    background-color: white;
    color: black;
  }

  .tag-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.4rem;
    max-height: 60vh;
    overflow-y: auto;
    overflow-x: hidden;
    width: 100%;
    box-sizing: border-box;
    border-bottom: 1px solid var(--clr-lossless-ui-btn-border);
    padding-bottom: 1rem;
  }

  .sort-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.3rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .sort-btn svg {
    width: 20px;
    height: 20px;
    fill: currentColor;
    transition: transform 0.2s;
    display: inline-block;
    color: white;
  }

  .sort-btn:hover svg {
    transform: scale(1.1);
  }

  .selected-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.4rem;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    border-top: 1px solid var(--clr-lossless-ui-btn-border);
    border-bottom: 1px solid var(--clr-lossless-ui-btn-border);
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .tag-list,
    .selected-tags,
    .tag-actions,
    .tag-search {
      display: none;
    }

    #mobile-tag-select {
      display: block;
      width: 100%;
    }
  }
</style>
