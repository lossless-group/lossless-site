---
import { formatDate } from "@utils/formatDate";

interface Props {
  entry: {
    title?: string;
    date?: Date | string;
    category?: string;
    context_setter?: string;
    contextSetter?: string;
    fileName?: string;
    [key: string]: any;
  }
}

const { entry } = Astro.props;
const {
  title,
  date,
  category,
  context_setter,
  contextSetter = context_setter // Use the transformed version if available, fallback to original
} = entry;

// Format the date if it exists
const formattedDate = date ? new Date(date).toLocaleDateString() : '';

---

<div class="changelog-entry-full">
  <a href="/workflow/changelog" class="back-link">‚Üê Back to Changelog</a>
  <article>
    <header>
      <div class="meta">
        {formattedDate && (
          <time datetime={formattedDate}>{formattedDate}</time>
        )}
        {category && (
          <span class="category">{category}</span>
        )}
      </div>
      {contextSetter && (
        <h1 class="emphasis">{contextSetter}</h1>
      )}
      {title && (
        <h1 class="title">{title}</h1>
      )}
    </header>
    
    <div class="content">
      <slot />
    </div>
  </article>
</div>

<style>
  .changelog-entry-full {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }

  .back-link {
    display: inline-block;
    margin-bottom: 2rem;
    color: var(--clr-lossless-accent--brightest);
    text-decoration: none;
    font-family: var(--ff-legible);
    font-size: var(--fs-300);
  }

  .back-link:hover {
    text-decoration: underline;
  }

  header {
    margin-bottom: 2rem;
  }

  .meta {
    display: flex;
    gap: 1rem;
    align-items: center;
    margin-bottom: 1rem;
    font-family: var(--ff-legible);
    font-size: var(--fs-300);
  }

  time {
    color: var(--clr-lossless-accent--brightest);
    font-weight: var(--fw-semi-bold);
  }

  .category {
    padding: 0.2rem 0.5rem;
    border-radius: 0.25rem;
    background: var(--clr-lossless-attn-action);
    color: var(--white--pure);
    font-weight: var(--fw-semi-bold);
  }

  .emphasis {
    font-size: var(--fs-700);
    color: var(--clr-heading);
    margin: 0 0 0.5rem;
    line-height: 1.2;
  }

  .title {
    font-size: var(--fs-500);
    font-family: var(--ff-legible);
    color: var(--clr-body);
    margin: 0;
    line-height: 1.4;
  }

  .content {
    font-family: var(--ff-legible);
    font-size: var(--fs-400);
    line-height: 1.6;
    color: var(--clr-body);
  }

  .content :global(h2) {
    font-size: var(--fs-500);
    color: var(--clr-heading);
    margin: 2rem 0 1rem;
  }

  .content :global(p) {
    margin: 1rem 0;
  }

  .content :global(ul) {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .content :global(li) {
    margin: 0.5rem 0;
  }

  /* Internal link styles */
  .content :global(a[data-internal-link]) {
    color: var(--clr-lossless-accent--brightest);
    text-decoration: none;
    border-bottom: 1px dashed var(--clr-lossless-accent--brightest);
    padding-bottom: 0.1rem;
    transition: border-bottom-style 0.2s ease;
  }

  .content :global(a[data-internal-link]:hover) {
    border-bottom-style: solid;
  }

  /* Code block styles */
  .content :global(pre) {
    background: var(--clr-code-bg, #1e1e1e);
    border-radius: 0.5rem;
    padding: 1.25rem;
    margin: 1.5rem 0;
    overflow-x: auto;
  }

  .content :global(code) {
    font-family: var(--ff-mono, 'JetBrains Mono', monospace);
    font-size: var(--fs-300);
    line-height: 1.5;
  }

  /* Inline code styles */
  .content :global(:not(pre) > code) {
    background: var(--clr-code-inline-bg, #2e2e2e);
    color: var(--clr-code-inline, #e0e0e0);
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.9em;
  }
</style>