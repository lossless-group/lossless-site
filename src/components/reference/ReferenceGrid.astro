---
/**
 * ReferenceGrid.astro
 *
 * A reusable component to display a grid of reference items (vocabulary or concepts).
 * It takes an array of items and renders the appropriate preview card for each.
 * Styling is handled via local CSS using project variables, replacing Tailwind.
 *
 * @component
 * @param {ReferenceItem[]} items - Array of items to display in the grid.
 * @param {string} [class] - Optional class to apply to the root div.
 */
import type { CollectionEntry } from 'astro:content';
import VocabularyPreviewCard from '@components/reference/VocabularyPreviewCard.astro';
import ConceptPreviewCard from '@components/reference/ConceptPreviewCard.astro';

// Combine potential data fields from both vocabulary and concepts collections
type ReferenceData = {
  title: string;
  slug?: string; // Optional slug defined in frontmatter
  aliases?: string[]; // Specific to vocabulary
  description?: string; // Specific to concepts
  // Add any other common or specific data fields if needed in the future
};

// Define the structure for each item passed to this grid component
// This structure helps ensure the necessary data is available for the preview cards
interface ReferenceItem {
  id: string; // Original filename-based ID from the collection entry
  slug: string; // The URL slug generated by Astro (e.g., 'my-term')
  collection: 'vocabulary' | 'concepts'; // The source collection
  data: ReferenceData; // The frontmatter data
}

// Define the component's props interface
interface Props {
  items: ReferenceItem[];
  class?: string; // Add optional class prop
}

// Get the items array from the component's props
const { items, class: className } = Astro.props; // Destructure class prop (rename to avoid keyword conflict)

// Helper function to format the ReferenceItem back into the 'entry' structure
// expected by the VocabularyPreviewCard and ConceptPreviewCard components.
function formatEntryForCard(item: ReferenceItem): {
  id: string;
  collection: string; // Pass collection for potential future use in cards
  slug: string; // Pass Astro's generated slug
  data: ReferenceData;
} {
  return {
    id: item.id, // The original ID (e.g., 'vocabulary/term.md')
    collection: item.collection,
    slug: item.slug, // Astro's URL slug (e.g., 'term')
    data: {
      ...item.data, // Pass all frontmatter data
      // Ensure the optional frontmatter slug is included if present
      // Note: The cards themselves contain logic to prioritize frontmatter slug over ID for URL generation
      slug: item.data.slug,
    },
  };
}
---

<div class:list={[
    "grid",
    "grid-cols-1", // Default: 1 column
    "md:grid-cols-2", // Medium screens: 2 columns
    "lg:grid-cols-3", // Large screens: 3 columns
    "gap-4", // Apply gap using Tailwind utility (adjust value if needed)
    className // Include any passed-in class
  ]}>
  {items.map((item) => (
    <div> {/* Removed specific item class, grid handles item placement */}
      {/* Conditionally render the correct preview card based on the item's collection */}
      {item.collection === 'vocabulary' ? (
        <VocabularyPreviewCard entry={formatEntryForCard(item)} />
      ) : item.collection === 'concepts' ? (
        <ConceptPreviewCard entry={formatEntryForCard(item)} />
      ) : (
        <p>Error: Unknown item type</p> // Fallback for safety
      )}
    </div>
  ))}
</div>