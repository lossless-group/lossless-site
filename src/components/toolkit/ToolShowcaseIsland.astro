---
/**
 * ToolShowcaseIsland.astro
 * Server island component for rendering tool carousels from backlink lists
 * Used by the ::tool-showcase directive in markdown
 */

import { getCollection } from 'astro:content';
import ToolShowcaseCarousel from './ToolShowcaseCarousel.astro';

interface Props {
  toolPaths: string[];
}

// Define the shape of tool data from the collection
type ToolData = {
  id: string;
  data: {
    title?: string;
    og_image?: string;
    image?: string;
    og_screenshot?: string;
    og_screenshot_url?: string;
    og_favicon?: string;
    favicon?: string;
    og_title?: string;
    url?: string;
    og_description?: string;
    description_site_cp?: string;
    tags?: string[] | string;
    [key: string]: unknown; // Allow for any additional properties
  };
};

const { toolPaths } = Astro.props;

// Get all tools from the content collections
const allTools = (await getCollection('tooling')) as unknown as ToolData[];

// Find tools that match the provided paths
const matchedTools = toolPaths
  .map(path => {
    // Try to find exact matches first
    const exactMatch = allTools.find(tool => tool.id.endsWith(path));
    if (exactMatch) return exactMatch;
    
    // Fallback to partial matches in title or ID
    return allTools.find(tool => {
      const title = tool.data?.title || '';
      return tool.id.includes(path) || 
        (typeof title === 'string' && title.toLowerCase().includes(path.toLowerCase()));
    });
  })
  .filter((tool): tool is ToolData => Boolean(tool));

// Transform the data to match the expected format
const tools = matchedTools.map(tool => {
  const data = tool.data || {};
  
  // Handle tags - ensure it's always an array
  let tags: string[] = [];
  if (Array.isArray(data.tags)) {
    tags = data.tags;
  } else if (data.tags) {
    tags = [String(data.tags)];
  }
  
  return {
    title: typeof data.title === 'string' ? data.title : '',
    og_image: typeof data.og_image === 'string' ? data.og_image : undefined,
    image: typeof data.image === 'string' ? data.image : undefined,
    og_screenshot: typeof data.og_screenshot === 'string' ? data.og_screenshot : undefined,
    og_screenshot_url: typeof data.og_screenshot_url === 'string' ? data.og_screenshot_url : undefined,
    og_favicon: typeof data.og_favicon === 'string' ? data.og_favicon : undefined,
    favicon: typeof data.favicon === 'string' ? data.favicon : undefined,
    og_title: typeof data.og_title === 'string' ? data.og_title : undefined,
    url: typeof data.url === 'string' ? data.url : undefined,
    og_description: typeof data.og_description === 'string' ? data.og_description : undefined,
    description_site_cp: typeof data.description_site_cp === 'string' ? data.description_site_cp : undefined,
    tags: tags,
    inCarousel: true
  };
});
---

<ToolShowcaseCarousel tools={tools} />
