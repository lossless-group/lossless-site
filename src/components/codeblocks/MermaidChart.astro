---
const { code } = Astro.props;
const chartId = `mermaid-chart-${Math.random().toString(36).slice(2, 10)}`;
import Image from 'astro:assets';
import ExpandIcon from '@assets/Icons/arrows-maximize.svg';
import CollapseIcon from '@assets/Icons/arrows-minimize.svg';

---
<div id={chartId} class="mermaid-breakout" tabindex="0">
  <div class="mermaid-chart-shell">
    <!-- Accessible, pure HTML/CSS expand/collapse toggle for Mermaid chart -->
    <input type="checkbox" id={`toggle-${chartId}`} class="mermaid-toggle-checkbox" hidden>
    <label 
      for={`toggle-${chartId}`} 
      class="mermaid-expand-toggle"
      onclick={`toggleMermaidExpand('${chartId}', true)`}
    >
      <span class="expand-icon">
        <ExpandIcon class="icon-expand" />
      </span>
    </label>
    <div class="mermaid">{code}</div>
  </div>
</div>

<!-- Fullscreen modal markup will be injected by JS when needed -->

<script is:inline>
  function toggleMermaidExpand(chartId, expand = true) {
    const existingModal = document.getElementById(`${chartId}-lightbox`);
    if (expand) {
      if (existingModal) return; // Already open
  
      const originalChart = document.getElementById(chartId);
      if (!originalChart) return;
  
      const chartContent = originalChart.querySelector('.mermaid-chart-shell .mermaid')?.innerHTML;
  
      // Create modal container
      const modal = document.createElement('div');
      modal.id = `${chartId}-lightbox`;
      modal.className = 'mermaid-fullscreen-modal';
      modal.tabIndex = 0;
  
      modal.innerHTML = `
        <div class="lightbox-content">
          <button class="mermaid-collapse-toggle" aria-label="Close chart" tabindex="0">
            <span class="collapse-icon">&times;</span>
          </button>
          <div class="mermaid">${chartContent}</div>
        </div>
      `;
  
      // Append to body
      document.body.appendChild(modal);
      modal.focus();
  
      // Collapse handler
      modal.querySelector('.mermaid-collapse-toggle').onclick = () => toggleMermaidExpand(chartId, false);
  
      // Escape key closes modal
      const escHandler = (e) => {
        if (e.key === 'Escape') {
          toggleMermaidExpand(chartId, false);
          window.removeEventListener('keydown', escHandler);
        }
      };
      window.addEventListener('keydown', escHandler);
    } else {
      // Close logic
      if (existingModal) {
        existingModal.remove();
      }
    }
  }
</script>
  

<style>
    .mermaid-breakout {
      width: 100%;
      max-width: 100%;
      overflow-x: auto;
      margin: 0 auto;
    }

    .mermaid-chart-shell {
      width: 100%;
      max-width: 100%;
      overflow-x: auto;
      position: relative;
      background: var(--bastille);
      box-shadow: 0 4px 48px rgba(0,0,0,0.25);
      border-radius: 10px;
      border: 2px solid var(--lossless-accent--brightest);
      margin: 1.25rem 0;
      padding: 1rem;
    }

    .mermaid {
      background: transparent !important;
      box-shadow: none !important;
      border-radius: 0 !important;
      padding: 0 !important;
      margin: 0 !important;
    }
    .mermaid-chart-shell .mermaid-expand-toggle {
      position: absolute;
      top: 0.75rem;
      right: 1.5rem;
      z-index: 10;
      background: none;
      color: #fff;
      border: none;
      border-radius: 4px;
      padding: 0.25rem 0.5rem;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.2s;
    }
    .mermaid-chart-shell .mermaid-expand-toggle:hover, .mermaid-chart-shell .mermaid-expand-toggle:focus {
      opacity: 1;
      outline: 2px solid #88f;
    }
</style>

<style is:global>
/*
  Fullscreen modal overlay for Mermaid chart
  - Always overlays the entire viewport
  - Very high z-index to ensure it is above all other content
  - Removes all margin/padding, and uses fixed positioning
  - No parent context can restrict its stacking
*/
.mermaid-fullscreen-modal {
  position: fixed;
  inset: 0;
  z-index: 99999;
  background: rgba(0, 0, 0, 0.85);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  overflow: auto;
}

.lightbox-content {
  position: relative;
  background: var(--bastille, #121212);
  border: 2px solid var(--lossless-accent--brightest, #64f4a4);
  border-radius: 10px;
  width: 100%;
  max-width: 1200px;      /* Optional: cap to keep readable */
  max-height: 90vh;
  overflow: auto;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  align-items: stretch;
}

.mermaid-fullscreen-modal .mermaid {
  flex-grow: 1;
  width: 100%;
  height: auto;
  max-height: 80vh;
  max-width: 100%;
  display: block;
}


.mermaid-collapse-toggle {
  position: absolute;
  top: 0.75rem;
  right: 0.75rem;
  background: none;
  color: #fff;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  opacity: 0.7;
  transition: opacity 0.2s;
}

.mermaid-collapse-toggle:hover {
  opacity: 1;
}

</style>

<!-- SVG symbols for icons -->
<svg style="display:none">
  <symbol id="collapse-icon-symbol" viewBox="0 0 24 24">
    <CollapseIcon />
  </symbol>
  <symbol id="expand-icon-symbol" viewBox="0 0 24 24">
    <ExpandIcon />
  </symbol>
</svg>

<script is:inline>
  // Mermaid rendering logic (custom base theme, transparent background)
  // Dynamically resolve CSS variable for primary text color at runtime
  function getCssVar(name, fallback) {
    return getComputedStyle(document.documentElement).getPropertyValue(name).trim() || fallback;
  }

  const bodyColor = getCssVar('--clr-body', '#e0e0e0');
  const primaryNodeBg = getCssVar('--clr-primary-bg', '#181818');
  const secondaryNodeBg = getCssVar('#64F4a4');
  const edgeLabelBg = getCssVar('--clr-aquamarine', '#64d4a4');
  const hippieBlue = getCssVar('--clr-hippie-blue', '#50a3b3');
  const secondaryTextClr = getCssVar('--clr-hippie-blue', '#50a3b3');
  const clusterBkg = getCssVar('--clr-gunmetal', '#283139');
  const lineClr = getCssVar('--clr-aqua-brightest', '#69e2e3');
  const fontFmly = 'Open Sans, sans-serif';

  const mermaidConfig = {
    startOnLoad: true,
    theme: 'base', // Use base for full customizability
    themeVariables: {
      darkMode: true,
      background: 'transparent', // No background for SVG/chart
      primaryColor: primaryNodeBg,
      primaryBorderColor: '#6fffd6',
      primaryTextColor: bodyColor,
      secondaryColor: '#BF23F7',
      secondaryTextColor: secondaryTextClr,
      clusterBkg: clusterBkg,
      lineColor: lineClr,
      fontFamily: fontFmly,
      // Add more custom variables here as needed
    }
  };

  if (!window.__MERMAID_LOADED__) {
    import('https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs')
      .then((mermaid) => {
        mermaid.default.initialize(mermaidConfig);
        mermaid.default.run();
        window.mermaid = mermaid.default;
        window.__MERMAID_LOADED__ = true;
      })
      .catch(console.error);
  } else {
    window.mermaid?.initialize(mermaidConfig);
    window.mermaid?.run();
  }
</script>
