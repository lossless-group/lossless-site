---
/**
 * BaseCodeblock.astro
 * 
 * Base component for rendering code blocks with a copy button.
 * This component is used by the remark-codeblocks plugin to transform
 * standard code blocks in markdown.
 * 
 * @component
 * @example
 * <BaseCodeblock code="console.log('hello')" lang="js" />
 */


import { Code } from 'astro/components';

interface Props {
  code: string;
  lang: string;
}

const { code, lang = 'text' } = Astro.props;

// Import Shiki syntax highlighting utilities (handled by Astro's built-in renderer or markdown config)

---

<div class="codeblock-container">
  <div class="codeblock-header">
    <span class="codeblock-language">{lang}</span>
    <button class="copy-button" aria-label="Copy code to clipboard">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
      </svg>
    </button>
  </div>
  
  <!--
    Code Rendering Section
    Uses Astro's built-in syntax highlighting (Shiki) for code blocks.
    The code is rendered as HTML with syntax highlighting in markdown/remark pipeline.
    The language label is rendered ONLY in the header above, never duplicated below.
  -->
  <div class="codeblock-content">
    <!-- Use Astro's built-in <Code /> component for robust Shiki highlighting -->
    <Code code={code} lang={lang as any} />
  </div>
  <!--
    DO NOT render the language header (codeblock-language) inside the <pre> or <code> block.
    The language label should ONLY appear in the header above the code block, not inside.
    This is the single source of truth for the language label.
    If you see a language header inside the code area, check your Markdown plugins or input for extra markup.
  -->
  <slot />
</div>

<script>
  // Find all copy buttons
  const copyButtons = document.querySelectorAll('.copy-button');
  
  // Add click event listeners
  copyButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Find the closest codeblock container
      const container = button.closest('.codeblock-container');
      if (!container) return;
      
      // Get the code content
      const codeElement = container.querySelector('pre code');
      if (!codeElement) return;
      
      // Copy to clipboard - get the text content to avoid HTML tags
      navigator.clipboard.writeText(codeElement.textContent || '')
        .then(() => {
          // Visual feedback
          button.classList.add('copied');
          setTimeout(() => {
            button.classList.remove('copied');
          }, 2000);
        })
        .catch(err => {
          console.error('Failed to copy: ', err);
        });
    });
  });
</script>

<style>
  .codeblock-container {
    position: relative;
    margin: 1.5rem 0;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }
  
  .codeblock-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 1rem;
    background-color: rgba(0, 0, 0, 0.2);
    border-top-left-radius: 0.5rem;
    border-top-right-radius: 0.5rem;
    font-family: var(--ff-monospace, monospace);
    font-size: 0.8rem;
  }
  
  .codeblock-language {
    text-transform: uppercase;
    font-weight: bold;
    color: var(--clr-code-lang, #8a8a8a);
    letter-spacing: 0.05em;
  }
  
  .copy-button {
    background: transparent;
    border: none;
    color: var(--clr-code-lang, #8a8a8a);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 0.25rem;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .copy-button:hover {
    background-color: rgba(255, 255, 255, 0.1);
    color: white;
  }
  
  .copy-button.copied {
    color: var(--clr-lossless-accent--brightest, #4a9eff);
  }
  
  /* Style the Shiki-highlighted code */
  .codeblock-content {
    margin: 0;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    padding: 1em;
    overflow-x: auto;
    background-color: var(--clr-code-bg, #1e1e1e);
  }
  
  /*
    Hide any language label injected inside the <pre> or <code> block by Markdown plugins or syntax highlighters.
    We want the language label to appear ONLY in the header above the code block, not inside.
    This targets any span, div, or element with a class containing 'language-'.
  */
  .codeblock-content [class*="language-"] {
    display: none !important;
  }
  
  /*
    Hide any "before" or "after" labels or elements injected by Markdown plugins or syntax highlighters.
    This includes pseudo-elements, classes, or even non-standard HTML tags.
    Covers: ::before, ::after, [class*="before"], [class*="after"], and any literal <::before> or <::after> tags.
  */
  .codeblock-content ::before,
  .codeblock-content ::after,
  .codeblock-content [class*="before"],
  .codeblock-content [class*="after"] {
    display: none !important;
  }
</style>
