---
// PostCardFeature.astro
// Accepts a generic prompt object (Astro content entry) as props and destructures to get frontmatter fields.
// This follows project rules: NO type safety, NO explicit interfaces, passthrough pattern only.
// Example usage: <PostCardFeature {...item} />

import TagCloud from "../tool-components/TagCloud.astro";
import AuthorHandle from "../basics/AuthorHandle.astro";
import { formatDate } from "@utils/formatDate";

// Accept both Astro collection entry and flat frontmatter object
const props = Astro.props.data ? Astro.props.data : Astro.props;
const { title, lede, authors, tags, date_authored_initial_draft, url, summary, banner_image } = props;

// Format date if it exists
// Defensive: Always use the robust formatDate utility, which handles Date, string, or number
let formattedDate = '';
if (date_authored_initial_draft) {
  try {
    formattedDate = formatDate(date_authored_initial_draft);
  } catch (e) {
    console.error('Error formatting date:', e);
    formattedDate = date_authored_initial_draft?.toString() || '';
  }
}

const hasAuthors = Array.isArray(authors) && authors.length > 0;

---

<article class="post-card-feature card-hover-effect">
  <div class="post-card-feature__grid">
    <div class="post-card-feature__image-container">
      {banner_image && (
        <figure class="post-card-feature__figure">
          <img 
            src={String(banner_image)} 
            alt={title} 
            class="post-card-feature__image" 
          />
        </figure>
      )}
    </div>
    <div class="post-card-feature__content">
      <h1 class="post-card-feature__title"><a href={url}><span class="text-wrapper">{title}</span></a></h1>
      <p class="post-card-feature__lede"><span class="text-wrapper">{lede || summary}</span></p>
      <div class="post-card-feature__meta">
        <div class="post-card-feature__meta-row">
          {hasAuthors && (
            <span class="post-card-feature__author">
              <AuthorHandle authors={authors} showName={true} showRole={false} />
            </span>
          )}
          <span class="post-card-feature__date">{formattedDate && <time datetime={formattedDate}>{formattedDate}</time>}</span>
        </div>
        {tags && tags.length > 0 && (
          <div class="post-card-feature__meta-tags">
            <TagCloud tags={tags} />
          </div>
        )}
      </div>
    </div>
  </div>
</article>

<!-- Browser-side debug output for the actual props object
<script type="module" is:inline>
  // eslint-disable-next-line no-console
  const props = JSON.parse(`${debugProps}`);
  console.log("[PostCardFeature] Props:", props);
</script>
-->

<!--
  PostCardFeature.astro expects to receive either:
    - a generic prompt object (Astro content entry) with data: {frontmatter fields}
    - or a flat frontmatter object with all fields at the top level
  All props are destructured from Astro.props and data; no type enforcement is used.
  This pattern is explicitly required by project rules and .windsurfrules.
  If you change the data shape, update this destructure accordingly.
  Temporary browser-side debug output is included for rapid troubleshooting. Remove after debugging.
-->

<style>
  /* Feature card styling aligned with site design system */
  .post-card-feature {
    background: color-mix(
      in oklab,
      var(--clr-lossless-primary-glass),
      var(--clr-lossless-primary-dark) 90%
    );
    border: 1px solid var(--clr-lossless-ui-btn-border);
    color: var(--clr-lossless-primary-light);
    border-radius: 1em;
    padding: 1.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .post-card-feature__grid {
    display: grid;
    gap: 1.5rem;
    /* Stack vertically on mobile */
    grid-template-columns: 1fr;
  }

  /* Switch to 1:3 grid on medium screens and up */
  @media (min-width: 768px) {
    .post-card-feature__grid {
      /* Use 4 columns with image taking 1 and content taking 3 */
      grid-template-columns: repeat(3, 1fr);
      gap: 1rem;
      align-items: start;
    }

    .post-card-feature__image-container {
      grid-column: 1 / span 2; /* Take up first column */
    }

    .post-card-feature__content {
      grid-column: 3 / span 1; /* Take up remaining 3 columns */
    }
  }

  .post-card-feature__image-container {
    border-radius: 0.5rem;
    overflow: hidden;
    border: 1px solid var(--clr-lossless-ui-btn-border);
  }

  .post-card-feature__figure {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    display: block;
  }

  .post-card-feature__image {
    width: 100%;
    height: auto;
    aspect-ratio: 16/9;
    object-fit: cover;
    display: block;
    transition: transform 0.3s ease-in-out;
  }

  .post-card-feature:hover .post-card-feature__image {
    transform: scale(1.02);
  }

  .post-card-feature__content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    height: 100%;
  }

  .post-card-feature__title {
    font-size: var(--fs-600);
    font-weight: var(--fw-semi-bold);
    margin: 0;
    line-height: 1.2;
  }

  @media (min-width: 768px) {
    .post-card-feature__title {
      font-size: var(--fs-600);
    }
  }

  .post-card-feature__title a {
    color: var(--clr-heading);
    text-decoration: none;
  }

  .post-card-feature__title a:hover {
    text-decoration: underline;
    color: var(--clr-lossless-accent--brightest);
  }

  .post-card-feature__lede {
    font-size: var(--fs-350);
    color: var(--clr-body);
    font-family: var(--ff-legible);
    margin: 0;
  }

  .post-card-feature__meta {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    font-size: var(--fs-250);
    color: var(--clr-body);
    margin-top: auto;
  }
  .post-card-feature__meta-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    gap: 1rem;
  }
  .post-card-feature__author,
  .post-card-feature__date {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
  }
  .post-card-feature__meta-tags {
    width: 100%;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  /* Common text wrapping styles for all text elements */
  .text-wrapper {
    display: inline-block;
    width: 100%;
    white-space: normal;
    word-wrap: break-word;
    word-break: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
  }
</style>
