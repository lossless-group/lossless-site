---
/**
 * ArticleListColumn.astro
 * A structural component that renders a collection of items in a column layout.
 * Does not make assumptions about the content type.
 * All mapping and conditional logic is handled in the Astro template (NOT in the script block),
 * following Astro syntax rules and .windsurfrules requirements.
 */
import type { CollectionEntry } from 'astro:content';
import CollectionEntryRow from '../basics/CollectionEntryRow.astro';
import RowArticlePreviewBare from './Row__ArticlePreview--Bare.astro';

// Define a type for the entry data that we expect
interface EntryData {
  title?: string;
  date?: string | Date;
  description?: string;
  [key: string]: unknown;
}

// Define the props interface
interface Props {
  // Array of collection entries with the expected data shape
  entries: Array<{
    id: string;
    slug: string;
    collection: string;
    data: EntryData;
  }>;
  // Optional component to render each entry
  EntryComponent?: any;
  // Additional props to forward to every EntryComponent instance
  entryProps?: Record<string, unknown>;
}

// Get the props with defaults
const props: Props = {
  entries: [],
  EntryComponent: RowArticlePreviewBare,
  entryProps: {},
  ...Astro.props
};

const { entries, EntryComponent, entryProps } = props;
---

<div class="article-list-column">
  {entries.map((entry) => (
    <EntryComponent 
      entry={entry} 
      {...entryProps} 
    />
  ))}
</div>

<style>
  .article-list-column {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
</style>