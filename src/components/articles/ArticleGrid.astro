---
// site/src/components/articles/ArticleGrid.astro
/**
 * ArticleGrid Component
 *
 * Renders a responsive grid of article previews using the PostCard--Bare component.
 *
 * Props:
 * - articles: Array<ArticleData> - An array of article objects from us.astro.
 *   Each ArticleData object should conform to (as provided by us.astro):
 *   {
 *     id: string;
 *     title: string;
 *     slug: string;         // raw slug from us.astro
 *     banner_image?: string;
 *     portrait_image?: string;
 *     imageAlt: string;
 *     date: string;         // Date as string from us.astro
 *     lede?: string;         // Lede/excerpt from us.astro
 *     tags: string[];
 *     authors: string[];
 *     categories: string[];
 *     imgWidth?: number | string;
 *     imgHeight?: number | string;
 *     class?: string;        // Optional class for the PostCardBare itself
 *   }
 * - gridClass?: string - Optional additional CSS classes for the grid container div.
 * - class?: string - Optional CSS classes for the root grid div element.
 * - All other attributes are passed to the root grid div element.
 */
import PostCardBare from './PostCard--Bare.astro';
import type { HTMLAttributes } from 'astro/types';
import type { ArticleData } from '../../types/article';

interface Props extends Omit<HTMLAttributes<'div'>, 'class'> {
  articles: ArticleData[]; 
  gridClass?: string; 
  class?: string;
  basePath?: string;
}

const { articles, gridClass, class: customRootClass, basePath, ...attrs } = Astro.props as Props;

const defaultGridClasses = 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 auto-rows-fr';

const processedArticles = articles.map(article => {
  const passthroughAttrs: { [key: string]: any } = {};
  // Define props that PostCardBare will receive directly
  const definedProps = [
    'slug', 'banner_image', 'portrait_image', 'imageAlt', 'title', 'date', 'lede',
    'imgWidth', 'imgHeight', 'class', 'basePath'
  ];
  
  // Pass through any additional props
  for (const key in article) {
    if (Object.prototype.hasOwnProperty.call(article, key) && !definedProps.includes(key)) {
      passthroughAttrs[key] = article[key];
    }
  }
  
  // Ensure we have a basePath - use the one from the article or the one passed to the component
  const effectiveBasePath = article.basePath || basePath;
  
  return {
    ...article,
    basePath: effectiveBasePath, // Ensure basePath is set
    passthroughAttrs
  };
});
---

<div class:list={[defaultGridClasses, gridClass, customRootClass]} {...attrs}>
  {processedArticles.map(p => {
    return (
      <PostCardBare
        slug={p.slug}       
        imageSrc={p.banner_image || p.portrait_image || '/images/placeholders/default-banner.jpg'}
        imageAlt={p.imageAlt}
        title={p.title}
        date={p.date}
        description={p.lede}
        imgWidth={p.imgWidth}
        imgHeight={p.imgHeight}
        basePath={p.basePath}
        class={p.class} 
        {...p.passthroughAttrs}
      />
    );
  })}
</div>

<style>
  /* Ensure proper grid behavior on mobile devices */
  .grid {
    grid-template-rows: auto;
    align-items: start;
    contain: layout style;
  }
  
  /* iOS-specific grid fixes */
  @supports (-webkit-touch-callout: none) {
    .grid {
      -webkit-transform: translateZ(0);
      transform: translateZ(0);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      -webkit-perspective: 1000px;
      perspective: 1000px;
    }
    
    .grid > * {
      -webkit-transform: translateZ(0);
      transform: translateZ(0);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      contain: layout style;
    }
  }
  
  /* Ensure grid items don't overlap on mobile */
  @media (max-width: 768px) {
    .grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
      grid-auto-rows: min-content;
    }
  }
  
  /* Additional mobile fixes for very small screens */
  @media (max-width: 480px) {
    .grid {
      gap: 1rem;
    }
  }
</style>