---
import AstroMarkdown from '@components/markdown/AstroMarkdown.astro';
import TableOfContents from '@components/markdown/TableOfContents.astro';
import type { Root } from 'mdast';
import { slugify } from '@utils/slugify'; // Corrected import path
import CopyLinkButton from '@components/markdown/CopyLinkButton.astro';
import InfoSidebar from '@components/markdown/InfoSidebar.astro';
import { formatDate } from '../../utils/formatDate.ts';
import { DEBUG_ARTICLE } from '@utils/envUtils';

const shareIconPath = '/src/assets/Icons/share.svg';

interface Props {
  effectiveHeading?: string; // Renamed from title to avoid conflict
  content: Root;
  articleHeading?: string;
  data?: {
    path: string;
    id?: string;  // File ID (e.g., 'Agile.md')
    title?: string; // Common frontmatter field
    author?: string; // For single author string
    authors?: string[]; // For an array of authors
    date_created?: string;
    date_modified?: string;
    tags?: Array<string>;
    [key: string]: any; // Allow other frontmatter fields
  };
  // compiledContent is removed as AstroMarkdown does not expect it
}

// =============================
// Defensive destructuring of props
// =============================
// Accepts content (mdast Root), data (optional)
// Defensive: If content or children is missing, fallback to empty root node
const { articleHeading, content, data: originalData = { path: Astro.url.pathname } } = Astro.props; // compiledContent removed
const effectiveHeading = articleHeading?.trim() || originalData.title?.trim() || '';

// Determine the author prop to pass to AuthorHandle
// Prefers data.authors (array) if available, otherwise falls back to data.author (string)
let authorForHandle: string | string[] | undefined = undefined;
if (originalData?.authors && Array.isArray(originalData.authors) && originalData.authors.length > 0) {
  authorForHandle = originalData.authors;
} else if (originalData?.author && typeof originalData.author === 'string') {
  authorForHandle = originalData.author;
}

// Determine participants for talks/events
let participants: string | string[] | undefined = undefined;
if (originalData?.participants && Array.isArray(originalData.participants) && originalData.participants.length > 0) {
  participants = originalData.participants;
} else if (originalData?.participant && typeof originalData.participant === 'string') {
  participants = originalData.participant;
}



let semanticVersion: string | undefined = undefined;
if (originalData?.at_semantic_version) {
  semanticVersion = originalData.at_semantic_version;
}

let categories: string[] = [];
if (originalData?.categories && Array.isArray(originalData.categories)) {
  categories = originalData.categories;
} else if (originalData?.category && typeof originalData.category === 'string' && originalData.category.length > 0) {
  categories = [originalData.category];
}

let augmentedWith: string | undefined = undefined;
if (originalData?.augmented_with) {
  augmentedWith = originalData.augmented_with;
}

let tags: string[] = [];
if (originalData?.tags && Array.isArray(originalData.tags)) {
  tags = originalData.tags;
}

if (DEBUG_ARTICLE) {
  console.log('\n\nüöÄüöÄüöÄ SERVER LOG FROM OneArticleOnPage.astro üöÄüöÄüöÄ');
  console.log('Page Path:', Astro.url.pathname);
  console.log('Raw data prop:', originalData);
  console.log('Extracted tags:', tags);
  console.log('Stringified data prop:', JSON.stringify(originalData, null, 2));
  console.log('üöÄüöÄüöÄ END SERVER LOG üöÄüöÄüöÄ\n\n');
}


let formattedDateModified: string | null = null;
if (originalData?.date_modified) {
  formattedDateModified = formatDate(originalData.date_modified);
}

let formattedDateCreated: string | null = null;
if (originalData?.date_created) {
  formattedDateCreated = formatDate(originalData.date_created);
}

let formattedDateOfEvent: string | null = null;
if (originalData?.date_of_event) {
  formattedDateOfEvent = formatDate(originalData.date_of_event);
}

// Prepare data for AstroMarkdown, conditionally removing title if effectiveHeading is used
let dataForMarkdown = { ...originalData };
if (effectiveHeading && originalData?.title === effectiveHeading) {
  // If OneArticleOnPage is rendering the title via effectiveHeading,
  // and it's the same as the frontmatter title, remove 'title' from the data 
  // passed to AstroMarkdown to prevent it from also rendering it.
  const { title, ...restOfData } = dataForMarkdown;
  dataForMarkdown = restOfData;
} else if (effectiveHeading && !originalData?.title) {
  // If effectiveHeading is provided but there's no frontmatter title, still ensure AstroMarkdown doesn't try to render one
  // (though AstroMarkdown relies on data.title, this is more of a conceptual safeguard)
}

// Define a type for data that may have hProperties
interface DataWithHProperties {
  hProperties?: unknown;
  [key: string]: any;
}

// Defensive: Ensure content is always an object with a children array
const safeContent = typeof content === 'object' && Array.isArray(content?.children)
  ? content
  : { type: 'root', children: [], data: {} };

// Defensive: Always provide a valid children array for filtering/finding
const children = Array.isArray(safeContent.children) ? safeContent.children : [];

// Defensive: Always provide a valid data object, typed for hProperties
const safeData: DataWithHProperties = typeof safeContent.data === 'object' && safeContent.data !== null ? safeContent.data : {};

// Defensive: Always provide a valid hProperties object for downstream usage
const hProperties: Record<string, any> =
  typeof safeData.hProperties === 'object' && safeData.hProperties !== null
    ? safeData.hProperties as Record<string, any>
    : {};

const tocNode = children.find(child => child?.type === 'tableOfContents');


// =============================
// Comprehensive comments for content rendering
// =============================
// This layout renders articles with 3 parts:
//
// 1Ô∏è‚É£ Main Content:
//    - Rendered using AstroMarkdown.
//    - Passes the full Markdown AST (mdast Root) except for the 'tableOfContents' node.
//    - Data and compiledContent are passed for custom renderers and code blocks.
//
// 2Ô∏è‚É£ Info Sidebar:
//    - Displays metadata about the article (path, id, author, created date, etc.).
//    - Fully static‚Äîcontent controlled by article frontmatter.
//
// 3Ô∏è‚É£ Table of Contents Sidebar:
//    - The 'tableOfContents' node is passed directly to TableOfContents component.
//    - TableOfContents handles all rendering, depth logic, and formatting internally.
//    - OneArticleOnPage no longer modifies or sanitizes the TOC ‚Äî separation of concerns.
//
// If no 'tableOfContents' node exists, fallback message is shown.
//
// Defensive notes:
// - The children array is validated to avoid errors if MDAST is malformed.
// - hProperties are passed through to AstroMarkdown for link and block styling.
// - The TOC and content rendering paths are now fully independent.
//


const bannerImage = originalData.banner_image || "https://ik.imagekit.io/xvpgfijuw/uploads/lossless/imageRep__North-Sea-of-Data_eueEtdpFG.webp";
const lede = originalData.lede;
const url = Astro.url.href.split('#')[0]; // Strip fragment from canonical URL
---

<div class="content-wrapper">
    <InfoSidebar 
      categories={categories}
      semanticVersion={semanticVersion}
      authorForHandle={authorForHandle}
      participants={participants}
      augmentedWith={augmentedWith}
      formattedDateModified={formattedDateModified}
      formattedDateCreated={formattedDateCreated}
      formattedDateOfEvent={formattedDateOfEvent}
      tags={tags}
      id={originalData.id}
      path={originalData.path}
      contentType={originalData.contentType}
      google_maps_url={originalData.google_maps_url}
      googleMapsUrl={originalData.googleMapsUrl}
  />
  <div class="content-inner">
    <article class="prose main-content">
      {/* Render the main page title if provided (not as an H1 to avoid ToC issues) */}
      {/* Render the main page title with share icon if effectiveHeading is provided */}
      {typeof effectiveHeading === 'string' && effectiveHeading.trim() !== '' && (() => {
        const titleId = slugify(effectiveHeading);
        return (
          <h1 id={titleId} class="page-main-title-display">
              <span class="title-text">{effectiveHeading}</span>
              <CopyLinkButton id={titleId} label={effectiveHeading} />
          </h1>
        );
      })()}

      <AstroMarkdown 
        node={{
          type: 'root',
          children: children.filter(child => child?.type !== 'tableOfContents'),
          data: { hProperties }
        }}         
        data={dataForMarkdown} 
        />
    </article>
  </div>

  <TableOfContents node={tocNode?.data.map} />

</div>



<style>
  .prose {
    color: var(--clr-lossless-primary-light);
    max-width: 85ch;
    padding: 1rem;
    overflow-x: hidden; /* Prevent horizontal overflow */
    width: 100%;
    box-sizing: border-box;
  }

  .prose > :global(h1:first-child) {  
    font-size: 2rem;
    margin-bottom: 2rem;
  }

  .prose :global(h1) {
    font-size: 2rem;
    color: var(--clr-lossless-accent--brightest);
  }

  .prose :global(h2) {
    font-size: 1.5rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
    color: var(--clr-lossless-accent--brightest);
  }

  .prose :global(h3) {
    font-size: 1.25rem;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    color: var(--clr-lossless-accent--brightest);
  }

  .prose :global(p), .prose :global(.paragraph) {
    margin-bottom: 1.2rem;
    line-height: 1.3;
  }

  /* Add citation specific styles */
  .prose :global(.citations) {
    display: block;
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid var(--clr-lossless-accent--brightest);
  }

  .prose :global(.citation) {
    display: block;
    font-size: 0.9rem;
    color: var(--clr-lossless-primary-light);
    opacity: 0.9;
    line-height: 1.8;
    padding-left: 2rem;
    text-indent: -2rem;
    margin-bottom: 0.5rem;
  }

  .prose :global(.citation:last-child) {
    margin-bottom: 0;
  }

  .prose :global(a) {
    color: var(--clr-lossless-accent--brightest);
    text-decoration: none;
  }

  .prose :global(a:hover) {
    text-decoration: underline;
  }

  .prose :global(ul), .prose :global(ol) {
    margin-left: 1.5rem;
    margin-bottom: 1rem;
  }

  .prose :global(li) {
    margin-bottom: 0.5rem;
  }

  /* Image responsive styles */
  .prose :global(img) {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 1rem auto;
    border-radius: 0.5rem;
    box-sizing: border-box;
  }

  /* Ensure images don't overflow their containers */
  .prose :global(p img),
  .prose :global(div img) {
    max-width: 100%;
    width: auto;
    height: auto;
  }

  /* Force all images to respect container bounds */
  .prose :global(img[src*="img.b2bpic.net"]),
  .prose :global(img[src*="i.imgur.com"]),
  .prose :global(img[src*="ik.imagekit.io"]) {
    max-width: 100% !important;
    width: auto !important;
    height: auto !important;
    object-fit: contain;
  }

  /* Handle any image that might have inline styles */
  .prose :global(img[style*="width"]),
  .prose :global(img[style*="height"]) {
    max-width: 100% !important;
    width: auto !important;
    height: auto !important;
  }

  /* Comprehensive image constraint - catch all images */
  .prose :global(img) {
    max-width: 100% !important;
    width: auto !important;
    height: auto !important;
    object-fit: contain;
    box-sizing: border-box;
  }

  /* Ensure images in paragraphs and divs are also constrained */
  .prose :global(p img),
  .prose :global(div img),
  .prose :global(article img),
  .prose :global(section img) {
    max-width: 100% !important;
    width: auto !important;
    height: auto !important;
  }

  /* Base styles for all list items */
  .prose :global(.custom-li) {
    padding-left: 1.25em;
    line-height: 1.5;
  }

  /* Level 2 nesting */
  .prose :global(ol ol > .custom-li),
  .prose :global(ul ul > .custom-li),
  .prose :global(ol ul > .custom-li),
  .prose :global(ul ol > .custom-li) {
    padding-left: 1.5em;
    font-size: 0.95em;
  }

  /* Level 3 nesting */
  .prose :global(ol ol ol > .custom-li),
  .prose :global(ul ul ul > .custom-li),
  .prose :global(ol ul ul > .custom-li),
  .prose :global(ul ol ol > .custom-li),
  .prose :global(ul ul ol > .custom-li),
  .prose :global(ol ol ul > .custom-li) {
    padding-left: 1.75em;
    font-size: 0.9em;
  }

  /* Level 4+ nesting - clamp to max padding and font size */
  .prose :global(ol ol ol ol > .custom-li),
  .prose :global(ul ul ul ul > .custom-li),
  .prose :global(ol ol ol ol ol > .custom-li),
  .prose :global(ul ul ul ul ul > .custom-li),
  .prose :global(ol ul ul ul > .custom-li),
  .prose :global(ul ol ol ol > .custom-li),
  .prose :global(ol ul ul ul ul > .custom-li),
  .prose :global(ul ol ol ol ol > .custom-li) {
    padding-left: 1.75em; /* SAME as level 3 */
    font-size: 0.9em;     /* SAME as level 3 */
  }

  /* MOBILE ADJUSTMENTS */
  @media (max-width: 600px) {
    /* Base level */
    .prose :global(.custom-li) {
      padding-left: 0.75em;
    }

    /* Level 2 */
    .prose :global(ol ol > .custom-li),
    .prose :global(ul ul > .custom-li),
    .prose :global(ol ul > .custom-li),
    .prose :global(ul ol > .custom-li) {
      padding-left: 1em;
      font-size: 0.9em;
    }

    /* Level 3 */
    .prose :global(ol ol ol > .custom-li),
    .prose :global(ul ul ul > .custom-li),
    .prose :global(ol ul ul > .custom-li),
    .prose :global(ul ol ol > .custom-li),
    .prose :global(ul ul ol > .custom-li),
    .prose :global(ol ol ul > .custom-li) {
      padding-left: 1.25em;
      font-size: 0.85em;
    }

    /* Level 4+ - clamp */
    .prose :global(ol ol ol ol > .custom-li),
    .prose :global(ul ul ul ul > .custom-li),
    .prose :global(ol ol ol ol ol > .custom-li),
    .prose :global(ul ul ul ul ul > .custom-li),
    .prose :global(ol ul ul ul > .custom-li),
    .prose :global(ul ol ol ol > .custom-li),
    .prose :global(ol ul ul ul ul > .custom-li),
    .prose :global(ul ol ol ol ol > .custom-li) {
      padding-left: 1.25em; /* Clamp */
      font-size: 0.85em;    /* Clamp */
    }

    /* Mobile image adjustments */
    .prose :global(img) {
      max-width: 100%;
      width: 100%;
      height: auto;
      margin: 0.75rem auto;
    }
  }

  /* Tablet adjustments */
  @media (max-width: 1024px) {
    .prose :global(img) {
      max-width: 100%;
      width: auto;
      height: auto;
    }
  }

  .content-wrapper {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    overflow: visible; /* üö® necessary */
    position: relative;
    padding-top: 2rem;
  }


  .content-inner {
    width: 100%;
    padding: 0 1rem;
    overflow-x: hidden; /* Prevent horizontal overflow */
    max-width: 100%;
  }

  .main-content {
    width: 100%;
    max-width: 85ch; /* already set in .prose but make explicit */
    overflow-wrap: break-word;
    overflow-x: hidden; /* Prevent horizontal overflow */
  }

  .toc-title {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--clr-lossless-accent--brightest);
  }


.toc-scroll-area {
  overflow-y: auto;
  flex-grow: 1; /* take remaining space */
  padding-right: 0.5rem;
  border-left: 1px solid var(--clr-lossless-accent--brightest);
  padding-left: 1rem;
  background: rgba(255, 255, 255, 0.02);
}

  @media (max-width: 1024px) {
    .content-inner {
      padding: 1rem; /* Reduce side padding on smaller screens */
    }

    @media (max-width: 768px) {
    .main-content {
      max-width: 100%;
      padding: 0 1rem;
    }
  }

    .content-wrapper {
      flex-direction: column;
      align-items: center;
    }
  }


  /* Removed scroll-margin-top as it conflicts with dynamic header calculation */
  .prose :global(h1),
  .prose :global(h2),
  .prose :global(h3),
  .prose :global(h4),
  .prose :global(h5),
  .prose :global(h6) {
    /* Headings styled by TOC JavaScript for proper scroll positioning */
  }


  
  .info-sidebar {
    position: sticky;
    margin-right: 1rem;
    top: 2rem;
    align-self: flex-start;
    width: 220px;
    flex-shrink: 0;
    padding: 1rem;
    border-right: 1px solid var(--clr-lossless-accent--brightest);
    background: rgba(255, 255, 255, 0.02);
  }

  .info-title {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--clr-lossless-accent--brightest);
  }

  .info-list {
    list-style: none;
    padding-left: 0;
    font-size: 0.9rem;
    color: var(--clr-lossless-primary-light);
  }

  .info-list > div {
    margin: 0.5rem 0;
    line-height: 1.4;
  }

.page-main-title-display {
  display: inline-flex;
  align-items: center;
  gap: 0.4rem;
  font-size: 2.25rem;
  font-weight: 700;
  color: var(--clr-lossless-accent--brightest);
  line-height: 1.2;
  margin-bottom: 1.5rem;
  padding-bottom: 0.75rem;
  border-bottom: 1px solid var(--clr-lossless-accent--medium);
}

.title-text {
  display: inline;
}

.header-anchor-symbol svg {
  display: inline-block;
  vertical-align: middle;
}

/* === Global Mermaid Chart Breakout === */
.mermaid-breakout {
  position: relative;
  left: 50%;
  right: 50%;
  width: 100vw;
  min-width: 760px;
  max-width: 100vw;
  margin-left: -50vw;
  margin-right: -50vw;
  z-index: 20;
  margin-top: 2rem;
  margin-bottom: 2rem;
}

@media (max-width: 1024px) {
  .mermaid-breakout {
    left: auto;
    right: auto;
    width: 100%;
    min-width: 0;
    max-width: 100%;
    margin-left: 0;
    margin-right: 0;
  }
}

/* Ensure all relevant containers allow overflow for breakout charts */
.content-inner,
.main-content,
.content-wrapper {
  overflow-x: visible !important;
}

</style>
