---
import AstroMarkdown from '@components/markdown/AstroMarkdown.astro';
import TableOfContents from '@components/markdown/TableOfContents.astro';
import type { Root } from 'mdast';

interface Props {
  articleHeading?: string; // Renamed from title to avoid conflict
  content: Root;
  data?: {
    path: string;
    id?: string;  // File ID (e.g., 'Agile.md')
  };
  compiledContent: string;
}

// =============================
// Defensive destructuring of props
// =============================
// Accepts content (mdast Root), data (optional), and compiledContent (string)
// Defensive: If content or children is missing, fallback to empty root node
const { articleHeading, content, data = { path: Astro.url.pathname }, compiledContent } = Astro.props; // Renamed from title

// Define a type for data that may have hProperties
interface DataWithHProperties {
  hProperties?: unknown;
  [key: string]: any;
}

// Defensive: Ensure content is always an object with a children array
const safeContent = typeof content === 'object' && Array.isArray(content?.children)
  ? content
  : { type: 'root', children: [], data: {} };

// Defensive: Always provide a valid children array for filtering/finding
const children = Array.isArray(safeContent.children) ? safeContent.children : [];

// Defensive: Always provide a valid data object, typed for hProperties
const safeData: DataWithHProperties = typeof safeContent.data === 'object' && safeContent.data !== null ? safeContent.data : {};

// Defensive: Always provide a valid hProperties object for downstream usage
const hProperties: Record<string, any> =
  typeof safeData.hProperties === 'object' && safeData.hProperties !== null
    ? safeData.hProperties as Record<string, any>
    : {};

const tocNode = children.find(child => child.type === 'tableOfContents');


// =============================
// Comprehensive comments for content rendering
// =============================
// This layout renders articles with 3 parts:
//
// 1Ô∏è‚É£ Main Content:
//    - Rendered using AstroMarkdown.
//    - Passes the full Markdown AST (mdast Root) except for the 'tableOfContents' node.
//    - Data and compiledContent are passed for custom renderers and code blocks.
//
// 2Ô∏è‚É£ Info Sidebar:
//    - Displays metadata about the article (path, id, author, created date, etc.).
//    - Fully static‚Äîcontent controlled by article frontmatter.
//
// 3Ô∏è‚É£ Table of Contents Sidebar:
//    - The 'tableOfContents' node is passed directly to TableOfContents component.
//    - TableOfContents handles all rendering, depth logic, and formatting internally.
//    - OneArticleOnPage no longer modifies or sanitizes the TOC ‚Äî separation of concerns.
//
// If no 'tableOfContents' node exists, fallback message is shown.
//
// Defensive notes:
// - The children array is validated to avoid errors if MDAST is malformed.
// - hProperties are passed through to AstroMarkdown for link and block styling.
// - The TOC and content rendering paths are now fully independent.
//


---

<div class="content-wrapper">
    <aside class="info-sidebar">
    <h2 class="info-title">Document Info</h2>
    <div class="info-scroll-area">
      <ul class="info-list">
        {data?.id && <li><strong>ID:</strong> {data.id}</li>}
        {data?.path && <li><strong>Path:</strong> {data.path}</li>}
        {data?.date_created && <li><strong>Created:</strong> {data.date_created}</li>}
        {data?.author && <li><strong>Author:</strong> {data.author}</li>}
        {/* Add more metadata fields as needed */}
      </ul>
    </div>
  </aside>

  <div class="content-inner">
    <article class="prose main-content">
      {/* Render the main page title if provided (not as an H1 to avoid ToC issues) */}
      {typeof articleHeading === 'string' && articleHeading.trim() !== '' && (
        <div class="page-main-title-display">{articleHeading}</div>
      )}
      <AstroMarkdown 
        node={{
          type: 'root',
          children: children.filter(child => child.type !== 'tableOfContents'),
          data: { hProperties }
        }}         
        data={data} 
        compiledContent={compiledContent}
        />
    </article>
  </div>

  <TableOfContents node={tocNode?.data?.map} />

</div>



<style>
  .prose {
    color: var(--clr-lossless-primary-light);
    max-width: 85ch;
    padding: 1rem;
  }

  .prose > :global(h1:first-child) {  
    font-size: 2rem;
    margin-bottom: 2rem;
  }

  .prose :global(h1) {
    font-size: 2rem;
    color: var(--clr-lossless-accent--brightest);
  }

  .prose :global(h2) {
    font-size: 1.5rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
    color: var(--clr-lossless-accent--brightest);
  }

  .prose :global(h3) {
    font-size: 1.25rem;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    color: var(--clr-lossless-accent--brightest);
  }

  .prose :global(p), .prose :global(.paragraph) {
    margin-bottom: 1.2rem;
    line-height: 1.3;
  }

  /* Add citation specific styles */
  .prose :global(.citations) {
    display: block;
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid var(--clr-lossless-accent--brightest);
  }

  .prose :global(.citation) {
    display: block;
    font-size: 0.9rem;
    color: var(--clr-lossless-primary-light);
    opacity: 0.9;
    line-height: 1.8;
    padding-left: 2rem;
    text-indent: -2rem;
    margin-bottom: 0.5rem;
  }

  .prose :global(.citation:last-child) {
    margin-bottom: 0;
  }

  .prose :global(a) {
    color: var(--clr-lossless-accent--brightest);
    text-decoration: none;
  }

  .prose :global(a:hover) {
    text-decoration: underline;
  }

  .prose :global(ul), .prose :global(ol) {
    margin-left: 1.5rem;
    margin-bottom: 1rem;
  }

  .prose :global(li) {
    margin-bottom: 0.5rem;
  }

  .prose :global(.custom-li) {
    position: relative;
    padding-left: 1.25em;
    list-style: none;
    line-height: 1.5;
  }

  .prose :global(.custom-li::before) {
    content: "-"; /* or "‚Ä¢" or "‚Äì" */
    position: absolute;
    left: 0;
    color: var(--clr-lossless-accent--brightest);
    font-size: 1em;
    line-height: 1;
  }


  .content-wrapper {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    overflow: visible; /* üö® necessary */
    position: relative;
  }


  .content-inner {
    width: 100%;
    padding: 0 1rem;
  }

  .main-content {
    width: 100%;
  }



  .toc-title {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--clr-lossless-accent--brightest);
  }


.toc-scroll-area {
  overflow-y: auto;
  flex-grow: 1; /* take remaining space */
  padding-right: 0.5rem;
  border-left: 1px solid var(--clr-lossless-accent--brightest);
  padding-left: 1rem;
  background: rgba(255, 255, 255, 0.02);
}

  @media (max-width: 1024px) {
    .toc-sidebar,
    .info-sidebar {
      display: none;
    }

    .content-inner {
      padding: 1rem; /* Reduce side padding on smaller screens */
    }

    .main-content {
      max-width: 100%;
    }

    .content-wrapper {
      flex-direction: column;
      align-items: center;
    }
  }


  .prose :global(h1),
  .prose :global(h2),
  .prose :global(h3),
  .prose :global(h4),
  .prose :global(h5),
  .prose :global(h6) {
    scroll-margin-top: 10rem;
  }


  
  .info-sidebar {
    position: sticky;
    top: 2rem;
    align-self: flex-start;
    width: 220px;
    flex-shrink: 0;
    padding: 1rem;
    border-right: 1px solid var(--clr-lossless-accent--brightest);
    background: rgba(255, 255, 255, 0.02);
  }

  .info-title {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--clr-lossless-accent--brightest);
  }

  .info-list {
    list-style: none;
    padding-left: 0;
    font-size: 0.9rem;
    color: var(--clr-lossless-primary-light);
  }

  .info-list li {
    margin: 0.5rem 0;
    line-height: 1.4;
  }

.page-main-title-display {
    font-size: 2.25rem; /* Example: slightly smaller than a typical H1 but larger than H2 */
    font-weight: 700;
    color: var(--clr-lossless-accent--brightest);
    line-height: 1.2;
    margin-bottom: 1.5rem; /* Space between this title and the start of Markdown content */
    padding-bottom: 0.75rem;
    border-bottom: 1px solid var(--clr-lossless-accent--medium);
  }
</style>
