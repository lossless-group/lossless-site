---
import "@styles/global.css";
import CardGrid from "@basics/CardGrid.astro";
import TagCloud from "@components/tool-components/TagCloud.astro";
import { getEntry, getCollection } from "astro:content";
import TrademarkRibbon from "@components/trademarks/TrademarkRibbon.astro";
import ThinGradientBleedSeparator from "@basics/separators/ThinGradientBleedSeparator.astro";
import AlternatingSideImageComponent from "@components/basics/messages/AlternatingSideImage.astro";
import Section__IconHeaderMessage from "@components/basics/messages/Section__IconHeaderMessage.astro";
import Section__QuestionsAnswers from "./reference/Section__QuestionsAnswers.astro";
import questionsAndAnswersData from "../content/q-and-a/questionsAndAnswers.json";

interface Tool {
  url: string;
  site_name?: string;
  title?: string;
  image?: string;
  favicon?: string;
  description?: string;
  tags?: string[];
  id: string;
}

const TRADEMARK_CONFIG = {
  sourceDir: "src/assets/Visuals/Tooling-Trademarks/usable--darkmode",
};

// ... existing type definitions ...

const toolEntries = await getCollection("tooling");
const tools = toolEntries.map((entry: any) => entry.data as Tool);
const featuresData = await getEntry("cards", "features");

const tagFrequencies = tools.reduce(
  (tagCounts: Record<string, number>, tool: Tool) => {
    tool.tags?.forEach((tag: any) => {
      tagCounts[tag] = (tagCounts[tag] || 0) + 1;
    });
    return tagCounts;
  },
  {} as Record<string, number>
);
// Get all unique tags from all tools
const allTags = [
  ...new Set(
    tools.flatMap((tool) => tool.tags || []).filter((tag) => tag) // Remove any undefined/null values
  ),
];

// Extract the questionsAndAnswers array for the "main" page
const qaList = questionsAndAnswersData.page === "main"
  ? questionsAndAnswersData.questionsAndAnswers
  : [];

---

<!-- Full-bleed separator with subtle styling -->
<ThinGradientBleedSeparator 
  height="1px" 
  marginTop="0.5rem" 
  marginBottom="1rem" 
  color="var(--grd__primary-bg)" 
/>

<!-- Content section with tools -->
<div class="content-wrapper">
  <section>
    <h2>Tools</h2>
    <div class="tools-header">
      <TagCloud
        tags={allTags}
        tagFrequencies={tagFrequencies}
        visibleTagRowLimit={4}
        maxWidth="96%"
      />
    </div>
    <div id="ribbon-context">
      <h2>Tech we're watching.</h2>
    </div>
  </section>
</div>

<!-- Full-bleed ribbon container -->
<div id="ribbon-container">
  <div class="trademark-ribbon-wrapper">
    <TrademarkRibbon
      sourceDir={TRADEMARK_CONFIG.sourceDir}
      width="auto"
      maxWidth="92%"
    />
  </div>
</div>

<!-- Full-bleed separator with more prominent styling -->
<ThinGradientBleedSeparator 
  height="3px" 
  marginTop="1.5rem" 
  marginBottom="1.5rem" 
  color="var(--grd__primary-bg)" 
  animate={true}
/>

<!-- Section: IconHeaderMessage grid for homepage (index instance) -->
<section class="content-wrapper">
  <Section__IconHeaderMessage instance="index" />
</section>

<!-- Content section with alternating side images -->
<div class="content-wrapper">
  <section>
    <AlternatingSideImageComponent jsonPath="messages/featureSideImage.json" />
  </section>
</div>

<!-- Full-bleed separator with standard styling -->
<ThinGradientBleedSeparator 
  height="2px" 
  marginTop="1rem" 
  marginBottom="1rem" 
  color="var(--grd__primary-bg)" 
/>

<!-- Q&A Section (Accordion) -->
<div class="content-wrapper">
  <section>
    <h2>Frequently Asked Questions</h2>
    <Section__QuestionsAnswers qaList={qaList} containerClass="w-[80vw]" />
  </section>
</div>

<!-- Content section with card grid -->
<div class="content-wrapper">
  <section>
    {
      tools && tools.length > 0 ? (
        <CardGrid gap="2rem" tools={tools} />
      ) : (
        <p>No tools found</p>
      )
    }
  </section>
</div>

<style>
  h1,
  h2 {
    margin-top: 1rem;
  }

  /* Content wrapper with consistent 92% max-width */
  .content-wrapper {
    width: 92%;
    max-width: 92%;
    margin: 0 auto;
    padding: 2rem 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .tools-header {
    margin-bottom: 2rem;
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 2rem;
    width: 100%;
  }

  #hero-container {
    display: flex;
    background: var(--grd--lossless-eastern-crimson);
    padding: 2rem;
    border-radius: 1rem;
    width: 100%;
    justify-content: center;
    align-items: center;
  }

  section {
    width: 100%;
    margin: 0 auto;
    padding: 1rem 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  #ribbon-context {
    width: 100%;
    text-align: center;
    margin: 0 auto 1rem auto;
  }

  /* Full-bleed container for the ribbon */
  #ribbon-container {
    width: 100vw;
    position: relative;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
    overflow: visible;
  }
  
  .trademark-ribbon-wrapper {
    width: 100%;
    overflow: visible;
  }
</style>
