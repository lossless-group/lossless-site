---
import type { BlockContent } from 'mdast'
import AstroMarkdownNew from './AstroMarkdownNew.astro'

export interface Props {
    node: {
        type: 'blockquote';
        children: BlockContent[];
    };
    data: {
        path: string;
        [key: string]: any;
    };
}

const { node, data } = Astro.props;

// Check if this is a callout by looking at first text content
const firstParagraph = node.children.find(child => child.type === 'paragraph');
const firstText = firstParagraph?.children.find(child => child.type === 'text');
const calloutMatch = firstText?.value.match(/^\[!(\w+)\](?:\s+(.+))?/);

let calloutType = '';
let calloutTitle = '';
let remainingContent = node.children;

if (calloutMatch) {
    calloutType = calloutMatch[1].toLowerCase();
    calloutTitle = calloutMatch[2] || calloutType.charAt(0).toUpperCase() + calloutType.slice(1);
    
    // Remove the [!TYPE] line from content
    const newFirstParagraph = {
        ...firstParagraph!,
        children: firstParagraph!.children.map(child => {
            if (child.type === 'text') {
                return {
                    ...child,
                    value: child.value.replace(/^\[!(\w+)\](?:\s+(.+))?/, '')
                };
            }
            return child;
        })
    };
    
    remainingContent = [
        ...node.children.slice(0, node.children.indexOf(firstParagraph!)),
        newFirstParagraph,
        ...node.children.slice(node.children.indexOf(firstParagraph!) + 1)
    ];
}

// Map callout types to icons
const icons = {
    note: '📝',
    info: 'ℹ️',
    tip: '💡',
    warning: '⚠️',
    danger: '🚫',
    example: '📋',
    quote: '💭',
    default: '📌'
};

const icon = icons[calloutType as keyof typeof icons] || icons.default;
---

{calloutMatch ? (
    <div class={`callout callout-${calloutType}`}>
        <div class="callout-header">
            <span class="callout-icon">{icon}</span>
            <span class="callout-title">{calloutTitle}</span>
        </div>
        <div class="callout-content">
            {remainingContent.map(child => (
                <AstroMarkdownNew node={child} data={data} />
            ))}
        </div>
    </div>
) : (
    <blockquote>
        {node.children.map(child => (
            <AstroMarkdownNew node={child} data={data} />
        ))}
    </blockquote>
)}
