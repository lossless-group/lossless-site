---
import {dirname} from 'path'
import ArticleCallout from './callouts/ArticleCallout.astro';
import ArticleCitationsBlock from './citations/ArticleCitations.astro';
import ArticleCitation from './citations/ArticleCitation.astro';
import BaseCodeblock from '../codeblocks/BaseCodeblock.astro';
import MermaidChart from '../codeblocks/MermaidChart.astro';
import ImageGallery from './ImageGallery.astro';
import ToolingGallery from './ToolingGallery.astro';
import { getCollection } from "astro:content";
import { DEBUG_AST } from '@utils/envUtils';
import { slugify, extractAllText } from '@utils/slugify';
import CopyLinkButton from './CopyLinkButton.astro';
import { resolveToolId } from '@utils/toolUtils';
/*
      Compose a unique id for markdown headings using ONLY the main heading text.
      - This function takes a heading MDAST node and returns a slugified version of the primary text content.
      - It does NOT include the file name, any prefix, or subtitle/lead-in text.
      - Example: 'A Parable of Directionality' → 'a-parable-of-directionality'
      - This logic matches ToC anchor links for in-page navigation.
      - Aggressively commented: update here and at all call sites if logic changes.
    */
    // Extract only the first text node (primary heading text)


interface Props {
    /**
     * Markdown AST node interface for AstroMarkdown.astro
     * - 'lang' is present on 'code' nodes and specifies the code language (e.g., 'js', 'python').
     * - See remark/rehype AST docs for more details.
     */
    node: {
        type: string;
        value?: string;
        lang?: string; // <-- Added for code blocks
        children?: any[];
        url?: string;
        depth?: number;
        data?: {
            hProperties?: Record<string, any>;
            map?: any[];
        };
        label?: string;
        meta?: string;
    };
    data: {
        path: string;
        id?: string;  // File ID (e.g., 'Agile.md')
        [key: string]: any;
    };
}

const { node, data } = Astro.props;



// List of node types we handle with specific components
// Order matters! Container types (like blockquote) should be handled before their children (like paragraph)
const handled_types = [
    "root",
    "link",        // Handle standard MDAST link nodes
    "blockquote",  // Handle blockquotes before paragraphs since they contain paragraphs
    "paragraph",
    "text",
    "heading",
    "image",
    "list",
    "listItem",
    "code",
    "inlineCode",
    "table",
    "tableRow",
    "tableCell",
    "strong",
    "emphasis",
    "break",
    "html",
    "citation",
    "citations",
    "citationReference",
    "footnoteReference",
    "footnoteDefinition",    
    "tableOfContents",
    "imageGallery",
    "toolingGallery",
    "thematicBreak" // Add support for horizontal rules
]

const other_type = !handled_types.includes(node.type)
data.dirpath = dirname(data.path)


//This logic has to be done up here because it's async work
// Only apply if it's a toolGallery code block
  const isToolingGallery = (
    node.lang === 'toolingGallery' || (node.lang === 'yaml' && node.meta?.startsWith('toolingGallery'))
  );

 

let toolGalleryTools = null;
let toolGalleryErrors: string[] = [];
let isSmallToolGallery = false


if (isToolingGallery) {  
  isSmallToolGallery = node.meta?.includes('small');

  const rawLines = node.value
    .split('\n')
    .map(line => line.trim())
    .filter(Boolean);

  const tagFilters = [];
  const rawToolIds = [];

  for (const line of rawLines) {
    const tagMatch = line.match(/^- tag:\s*(?:\[\[(.*?)\]\]|(.*))/i);
    if (tagMatch) {
      tagFilters.push((tagMatch[1] ?? tagMatch[2]).trim());
      continue;
    }

    // Otherwise treat as tool reference
    const toolMatch = line.replace(/^- /, '').trim();
    if (toolMatch) {
      rawToolIds.push(toolMatch);
    }
  }

  // Load tooling collection
  const allTools = await getCollection('tooling');
  const toolMap = new Map(allTools.map(entry => [entry.id, {
    ...entry.data,
    id: entry.id,
    filePath: entry.id,
  }]));

  const tools = [];
  const toolGalleryErrors = [];

  console.log(toolMap.values().next().value);

  // Resolve toolIds
  for (const input of rawToolIds) {
    let id = input;

    const backlinkMatch = input.match(/^\[\[(?!.*?visuals)(.*?)(?:\|.*?)?\]\]$/);
    if (backlinkMatch) {
      id = backlinkMatch[1].trim();
    }

    const resolvedId = await resolveToolId(id, allTools);
    if (resolvedId && toolMap.has(resolvedId)) {
      tools.push(toolMap.get(resolvedId));
    } else {
      toolGalleryErrors.push(input);
    }
  }

  // Add tools matching tagFilters
  const normalizeTag = tag => slugify(tag).toLowerCase();

  if (tagFilters.length > 0) {
    const tagFilteredTools = allTools
      .filter(tool => tool.data.tags?.some(tag =>
        tagFilters.some(filterTag =>
          normalizeTag(filterTag) === normalizeTag(tag)
        )
      ))
      .map(entry => ({
        ...entry.data,
        id: entry.id,
        filePath: entry.id,
      }));
    
    // Add tag-matched tools if not already added
    for (const tool of tagFilteredTools) {
      if (!tools.some(t => t.id === tool.id)) {
        tools.push(tool);
      }
    }
  }

  if (toolGalleryErrors.length > 0) {
    console.warn('[toolingGallery] Missing tools for IDs:', toolGalleryErrors);
  }

  toolGalleryTools = tools;

}
// Debug output to see AST structure
if (DEBUG_AST) {
  console.log(`=== AstroMarkdown Debug ===`)
  console.log(`Node type: ${node.type}`)
  console.log('Node structure:', JSON.stringify(node, null, 2))
}
---

{node.type === "root" && (() => {
  return (
    <>
      {node.children.map((child) => (
          <Astro.self node={child} data={data} />
      ))}
    </>
  );
})()}

{node.type === "heading" && (() => {
  const currentHeaderText = extractAllText(node.children).trim() || 'Untitled Section';

  const generateHeadingId = nodeForId =>
    slugify(extractAllText(nodeForId.children).trim() || 'untitled-heading');
  const id = generateHeadingId(node);

  const content = (
    <>
      <span class="heading-text">
        {node.children.map(child => (
          <Astro.self node={child} data={data} />
        ))}
      </span>
      <style>
  .heading-with-copy {
    display: flex;
    align-items: center;
    gap: 0.2rem;
    flex-wrap: nowrap;     
    max-width: 100%;
  }

  .heading-text {
    display: inline;
    line-height: inherit;
    flex-shrink: 1;
    min-width: 0;
  }
</style>

      <CopyLinkButton id={id} label={currentHeaderText} />
    </>
  );

  switch (node.depth) {
    case 1: return <h1 id={id} class="heading-with-copy">{content}</h1>;
    case 2: return <h2 id={id} class="heading-with-copy">{content}</h2>;
    case 3: return <h3 id={id} class="heading-with-copy">{content}</h3>;
    case 4: return <h4 id={id} class="heading-with-copy">{content}</h4>;
    case 5: return <h5 id={id} class="heading-with-copy">{content}</h5>;
    case 6: return <h6 id={id} class="heading-with-copy">{content}</h6>;
    default:
      return <div>{content}</div>;
  }
})()}


{(node.type === "strong") &&
  <strong>
    {node.children.map(child => (
      <Astro.self node={child} data={data} />
    ))}
  </strong>
}

{(node.type === "emphasis") &&
  <em>
    {node.children.map(child => (
      <Astro.self node={child} data={data} />
    ))}
  </em>
}


{(node.type === "image") &&
    <img src={node.url} />
}

{(node.type === "list") &&
  <>
    {node['ordered']
      ? <ol>
          {node.children.map((item) => (
            <Astro.self node={item} data={data} />
          ))}
        </ol>
      : <ul>
          {node.children.map((item) => (
            <Astro.self node={item} data={data} />
          ))}
        </ul>
    }
  </>
}

{(node.type === "listItem") &&
  <li class="custom-li">
    <span class="li-content">
      {node.children.map(child => (
        <Astro.self node={child} data={data} />
      ))}
    </span>
  </li>
}


{(node.type === "table") &&
  <div class="md-table-wrapper">
    <table class="md-table">
      <tbody>
        {node.children.map(row => (
          <Astro.self node={row} data={data} />
        ))}
      </tbody>
    </table>
  </div>
  <style>
     .md-table-wrapper {
        overflow-x: auto;
        margin-bottom: 1.5rem;
    }

    .md-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.95rem;
        background-color: transparent;
    }

    .md-tr:nth-child(even) {
        background-color: rgba(255, 255, 255, 0.03);
    }

    .md-td {
        border: 1px solid rgb(255, 255, 255);
        padding: 0.5rem 0.75rem;
        text-align: left;
        colrgb(255, 255, 255);
    }


  </style>
}

{(node.type === "tableRow") &&
  <tr class="md-tr">
    {node.children.map(cell => (
      <Astro.self node={cell} data={data} />
    ))}
  </tr>
}

{(node.type === "tableCell") &&
  <td class="md-td">
    {node.children.map(child => (
      <Astro.self node={child} data={data} />
    ))}
  </td>
}


{(node.type === "link") && (() => {
  // Function to extract YouTube video ID from various YouTube URL formats
  const extractYouTubeVideoId = (url) => {
    // youtu.be format
    const youtuBeMatch = url.match(/youtu\.be\/([a-zA-Z0-9_-]+)/);
    if (youtuBeMatch) return youtuBeMatch[1];
    
    // youtube.com/watch format
    const watchMatch = url.match(/youtube\.com\/watch\?.*v=([a-zA-Z0-9_-]+)/);
    if (watchMatch) return watchMatch[1];
    
    // youtube.com/embed format
    const embedMatch = url.match(/youtube\.com\/embed\/([a-zA-Z0-9_-]+)/);
    if (embedMatch) return embedMatch[1];
    
    // youtube.com/v format
    const vMatch = url.match(/youtube\.com\/v\/([a-zA-Z0-9_-]+)/);
    if (vMatch) return vMatch[1];
    
    return null;
  };

  // Function to extract text content from link children
  const extractLinkText = (children) => {
    if (!children || children.length === 0) return '';
    
    return children.map(child => {
      if (child.type === 'text') {
        return child.value || '';
      } else if (child.children) {
        return extractLinkText(child.children);
      }
      return '';
    }).join('');
  };

  // Check if this is a YouTube URL
  const videoId = extractYouTubeVideoId(node.url);
  
  if (videoId) {
    // For youtu.be URLs, preserve the si parameter if present
    let embedUrl = `https://www.youtube.com/embed/${videoId}`;
    
    // Extract si parameter from youtu.be URLs
    const siMatch = node.url.match(/[?&]si=([^&]+)/);
    if (siMatch) {
      embedUrl += `?si=${siMatch[1]}`;
    }
    
    // Extract the link text to use as caption
    const linkText = extractLinkText(node.children);
    
    return (
      <>
        <div class="youtube-embed-wrapper">
          <iframe 
            style="aspect-ratio:16/9;width:100%;height:auto" 
            src={embedUrl}
            title="YouTube video player" 
            frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
            referrerpolicy="strict-origin-when-cross-origin" 
            allowfullscreen
            loading="lazy"
          />
          {linkText && (
            <div class="youtube-caption">
              <div class="caption-content">
                {linkText}
              </div>
              <button 
                class="copy-url-btn" 
                onclick={`navigator.clipboard.writeText('${node.url}').then(() => {
                  const btn = event.target.closest('.copy-url-btn');
                  btn.classList.add('copied');
                  setTimeout(() => {
                    btn.classList.remove('copied');
                  }, 2000);
                }).catch(err => console.error('Failed to copy: ', err))`}
                title="Copy video URL to clipboard"
              >
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M16 3H4V16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M8 7H20V20H8V7Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </button>
            </div>
          )}
        </div>
        <style>
          .youtube-embed-wrapper {
            margin: 1.5rem 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
          }
          
          .youtube-embed-wrapper iframe {
            display: block;
            border: none;
          }
          
          .youtube-caption {
            padding: 0.75rem 1rem;
            background: rgba(255, 255, 255, 0.05);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            font-size: 0.9rem;
            line-height: 1.4;
            color: #e2e8f0;
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 0.75rem;
          }
          
          .caption-content {
            flex: 1;
            min-width: 0;
          }
          
          .copy-url-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            padding: 0.5rem;
            cursor: pointer;
            font-size: 0.875rem;
            color: #e2e8f0;
            transition: all 0.2s ease;
            flex-shrink: 0;
            min-width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
          }
          
          .copy-url-btn:hover {
            background: rgba(255, 255, 255, 0.15);
            border-color: rgba(255, 255, 255, 0.3);
            transform: translateY(-1px);
          }
          
          .copy-url-btn:active {
            transform: translateY(0);
          }
          
          .copy-url-btn.copied {
            background: rgba(34, 197, 94, 0.2);
            border-color: rgba(34, 197, 94, 0.4);
            color: #4ade80;
          }
          
          .copy-url-btn svg {
            width: 16px;
            height: 16px;
            transition: all 0.2s ease;
          }
        </style>
      </>
    );
  }
  
  // Regular link handling for non-YouTube URLs
  return (
    <a href={node.url} {...(node.data?.hProperties ?? {})}>
      {node.children[0].value}
    </a>
  );
})()}

{node.type === "code" && (() => {
  const { lang, meta, value } = node;

  const isImageGallery = (
    lang === 'imageGallery' || (lang === 'yaml' && meta === 'imageGallery')
  );

  if (toolGalleryTools?.length > 0) {
      return (
          <>
            <ToolingGallery tools={toolGalleryTools} small={isSmallToolGallery}/>
            {toolGalleryErrors.length > 0 && (
              <div class="tool-gallery-error">
                ⚠️ Tool(s) not found:
                <ul>
                  {toolGalleryErrors.map(id => <li><code>{id}</code></li>)}
                </ul>
              </div>

              <style>
                .tool-gallery-error {
                    color: #ff6b6b;
                    background-color: rgba(255, 0, 0, 0.05);
                    border: 1px solid rgba(255, 0, 0, 0.2);
                    padding: 0.75rem;
                    margin-top: 2rem;
                    border-radius: 0.5rem;
                    font-size: 0.9rem;
                  }

                  .tool-gallery-error ul {
                    margin: 0.5rem 0 0;
                    padding-left: 1.25rem;
                  }
              </style>
            )}
          </>
      )}

  if (isImageGallery) {
    return <ImageGallery code={value} dirpath={data.dirpath} />;
  }

  if (lang === 'mermaid') {
    return <MermaidChart code={value} />;
  }

  // Enhanced block types support using switch statement
  const blockType = lang?.toLowerCase();
  
  switch (blockType) {
    case 'emphasis':
    case 'em':
      return (
        <>
          <div class="block-emphasis">
            <div class="emphasis-content">
              {value}
            </div>
          </div>
          <style>
            .block-emphasis {
              margin: 1.5rem 0;
              padding: 1.25rem;
              background: linear-gradient(135deg, 
                rgba(59, 130, 246, 0.08) 0%, 
                rgba(59, 130, 246, 0.04) 100%);
              border-left: 4px solid #3b82f6;
              border-radius: 0 8px 8px 0;
              position: relative;
            }
            
            .emphasis-content {
              font-size: 1.1em;
              line-height: 1.6;
              color: #e2e8f0;
              font-weight: 500;
            }
            
            .block-emphasis::before {
              content: "💡";
              position: absolute;
              left: -0.5rem;
              top: 1rem;
              background: #1e293b;
              padding: 0.25rem;
              border-radius: 50%;
              font-size: 0.875rem;
            }
          </style>
        </>
      );

    case 'alert':
    case 'warning':
      return (
        <>
          <div class="block-alert">
            <div class="alert-header">
              <span class="alert-icon">⚠️</span>
              <span class="alert-title">Warning</span>
            </div>
            <div class="alert-content">
              {value}
            </div>
          </div>
          <style>
            .block-alert {
              margin: 1.5rem 0;
              padding: 1.25rem;
              background: linear-gradient(135deg, 
                rgba(245, 158, 11, 0.1) 0%, 
                rgba(245, 158, 11, 0.05) 100%);
              border: 1px solid rgba(245, 158, 11, 0.3);
              border-radius: 8px;
              position: relative;
            }
            
            .alert-header {
              display: flex;
              align-items: center;
              gap: 0.5rem;
              margin-bottom: 0.75rem;
              font-weight: 600;
              color: #fbbf24;
            }
            
            .alert-icon {
              font-size: 1.25rem;
            }
            
            .alert-title {
              font-size: 1rem;
              text-transform: uppercase;
              letter-spacing: 0.05em;
            }
            
            .alert-content {
              color: #f1f5f9;
              line-height: 1.6;
            }
          </style>
        </>
      );

    case 'quote':
    case 'blockquote':
      return (
        <>
          <div class="block-quote">
            <div class="quote-content">
              {value}
            </div>
            <div class="quote-decoration"></div>
          </div>
          <style>
            .block-quote {
              margin: 1.5rem 0;
              padding: 1.5rem 1.25rem;
              background: linear-gradient(135deg, 
                rgba(255, 255, 255, 0.05) 0%, 
                rgba(255, 255, 255, 0.02) 100%);
              border-left: 4px solid #64748b;
              border-radius: 0 8px 8px 0;
              position: relative;
              font-style: italic;
            }
            
            .quote-content {
              font-size: 1.1em;
              line-height: 1.7;
              color: #cbd5e1;
              position: relative;
              z-index: 1;
            }
            
            .quote-decoration {
              position: absolute;
              top: 1rem;
              right: 1rem;
              font-size: 3rem;
              color: rgba(100, 116, 139, 0.2);
              font-family: serif;
              line-height: 1;
            }
            
            .quote-decoration::before {
              content: """;
            }
          </style>
        </>
      );

    case 'info':
    case 'information':
      return (
        <>
          <div class="block-info">
            <div class="info-header">
              <span class="info-icon">ℹ️</span>
              <span class="info-title">Information</span>
            </div>
            <div class="info-content">
              {value}
            </div>
          </div>
          <style>
            .block-info {
              margin: 1.5rem 0;
              padding: 1.25rem;
              background: linear-gradient(135deg, 
                rgba(59, 130, 246, 0.08) 0%, 
                rgba(59, 130, 246, 0.04) 100%);
              border: 1px solid rgba(59, 130, 246, 0.3);
              border-radius: 8px;
            }
            
            .info-header {
              display: flex;
              align-items: center;
              gap: 0.5rem;
              margin-bottom: 0.75rem;
              font-weight: 600;
              color: #60a5fa;
            }
            
            .info-icon {
              font-size: 1.25rem;
            }
            
            .info-title {
              font-size: 1rem;
              text-transform: uppercase;
              letter-spacing: 0.05em;
            }
            
            .info-content {
              color: #e2e8f0;
              line-height: 1.6;
            }
          </style>
        </>
      );

    case 'success':
    case 'check':
      return (
        <>
          <div class="block-success">
            <div class="success-header">
              <span class="success-icon">✅</span>
              <span class="success-title">Success</span>
            </div>
            <div class="success-content">
              {value}
            </div>
          </div>
          <style>
            .block-success {
              margin: 1.5rem 0;
              padding: 1.25rem;
              background: linear-gradient(135deg, 
                rgba(34, 197, 94, 0.08) 0%, 
                rgba(34, 197, 94, 0.04) 100%);
              border: 1px solid rgba(34, 197, 94, 0.3);
              border-radius: 8px;
            }
            
            .success-header {
              display: flex;
              align-items: center;
              gap: 0.5rem;
              margin-bottom: 0.75rem;
              font-weight: 600;
              color: #4ade80;
            }
            
            .success-icon {
              font-size: 1.25rem;
            }
            
            .success-title {
              font-size: 1rem;
              text-transform: uppercase;
              letter-spacing: 0.05em;
            }
            
            .success-content {
              color: #e2e8f0;
              line-height: 1.6;
            }
          </style>
        </>
      );

    case 'error':
    case 'danger':
      return (
        <>
          <div class="block-error">
            <div class="error-header">
              <span class="error-icon">❌</span>
              <span class="error-title">Error</span>
            </div>
            <div class="error-content">
              {value}
            </div>
          </div>
          <style>
            .block-error {
              margin: 1.5rem 0;
              padding: 1.25rem;
              background: linear-gradient(135deg, 
                rgba(239, 68, 68, 0.1) 0%, 
                rgba(239, 68, 68, 0.05) 100%);
              border: 1px solid rgba(239, 68, 68, 0.3);
              border-radius: 8px;
            }
            
            .error-header {
              display: flex;
              align-items: center;
              gap: 0.5rem;
              margin-bottom: 0.75rem;
              font-weight: 600;
              color: #f87171;
            }
            
            .error-icon {
              font-size: 1.25rem;
            }
            
            .error-title {
              font-size: 1rem;
              text-transform: uppercase;
              letter-spacing: 0.05em;
            }
            
            .error-content {
              color: #e2e8f0;
              line-height: 1.6;
            }
          </style>
        </>
      );

    case 'tip':
    case 'hint':
      return (
        <>
          <div class="block-tip">
            <div class="tip-header">
              <span class="tip-icon">💡</span>
              <span class="tip-title">Tip</span>
            </div>
            <div class="tip-content">
              {value}
            </div>
          </div>
          <style>
            .block-tip {
              margin: 1.5rem 0;
              padding: 1.25rem;
              background: linear-gradient(135deg, 
                rgba(168, 85, 247, 0.08) 0%, 
                rgba(168, 85, 247, 0.04) 100%);
              border: 1px solid rgba(168, 85, 247, 0.3);
              border-radius: 8px;
            }
            
            .tip-header {
              display: flex;
              align-items: center;
              gap: 0.5rem;
              margin-bottom: 0.75rem;
              font-weight: 600;
              color: #c084fc;
            }
            
            .tip-icon {
              font-size: 1.25rem;
            }
            
            .tip-title {
              font-size: 1rem;
              text-transform: uppercase;
              letter-spacing: 0.05em;
            }
            
            .tip-content {
              color: #e2e8f0;
              line-height: 1.6;
            }
          </style>
        </>
      );

    case 'note':
      return (
        <>
          <div class="block-note">
            <div class="note-header">
              <span class="note-icon">📝</span>
              <span class="note-title">Note</span>
            </div>
            <div class="note-content">
              {value}
            </div>
          </div>
          <style>
            .block-note {
              margin: 1.5rem 0;
              padding: 1.25rem;
              background: linear-gradient(135deg, 
                rgba(107, 114, 128, 0.08) 0%, 
                rgba(107, 114, 128, 0.04) 100%);
              border: 1px solid rgba(107, 114, 128, 0.3);
              border-radius: 8px;
            }
            
            .note-header {
              display: flex;
              align-items: center;
              gap: 0.5rem;
              margin-bottom: 0.75rem;
              font-weight: 600;
              color: #9ca3af;
            }
            
            .note-icon {
              font-size: 1.25rem;
            }
            
            .note-title {
              font-size: 1rem;
              text-transform: uppercase;
              letter-spacing: 0.05em;
            }
            
            .note-content {
              color: #e2e8f0;
              line-height: 1.6;
            }
          </style>
        </>
      );

    default:
      // Default code block handling
      return <BaseCodeblock code={value} lang={lang ?? 'text'} />;
  }
})()}



{(node.type === "html") &&
  <div class="raw-html" set:html={node.value} />
}


{(node.type === "blockquote") &&
    <ArticleCallout node={node} />
}

{(node.type === "inlineCode") &&
  <>
    <code class="inline-code">{node.value}</code>
    <style>
      .inline-code {
        /* Typography */
        font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', 'Source Code Pro', 'Fira Code', 'Cascadia Code', 'JetBrains Mono', 'Ubuntu Mono', monospace;
        font-size: 0.875em;
        font-weight: 500;
        line-height: 1.4;
        letter-spacing: -0.01em;
        
        /* Background & Border */
        background: linear-gradient(135deg, 
          rgba(255, 255, 255, 0.08) 0%, 
          rgba(255, 255, 255, 0.04) 100%);
        border: 1px solid rgba(255, 255, 255, 0.12);
        border-radius: 6px;
        
        /* Spacing & Layout */
        padding: 0.2em 0.4em;
        margin: 0 0.1em;
        display: inline-block;
        vertical-align: baseline;
        
        /* Colors */
        color: #e2e8f0;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        
        /* Effects */
        box-shadow: 
          0 1px 3px rgba(0, 0, 0, 0.1),
          0 1px 2px rgba(0, 0, 0, 0.06),
          inset 0 1px 0 rgba(255, 255, 255, 0.1);
        
        /* Transitions */
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        
        /* Prevent line breaks */
        white-space: nowrap;
        
        /* Ensure proper rendering */
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
      
      /* Hover effects for interactive feel */
      .inline-code:hover {
        background: linear-gradient(135deg, 
          rgba(255, 255, 255, 0.12) 0%, 
          rgba(255, 255, 255, 0.08) 100%);
        border-color: rgba(255, 255, 255, 0.18);
        box-shadow: 
          0 2px 8px rgba(0, 0, 0, 0.15),
          0 1px 3px rgba(0, 0, 0, 0.1),
          inset 0 1px 0 rgba(255, 255, 255, 0.15);
        transform: translateY(-1px);
      }
      
      /* Focus state for accessibility */
      .inline-code:focus {
        outline: 2px solid rgba(59, 130, 246, 0.5);
        outline-offset: 2px;
      }
      
      /* Dark theme adjustments */
      @media (prefers-color-scheme: dark) {
        .inline-code {
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.06) 0%, 
            rgba(255, 255, 255, 0.03) 100%);
          border-color: rgba(255, 255, 255, 0.08);
          color: #f1f5f9;
        }
        
        .inline-code:hover {
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.1) 0%, 
            rgba(255, 255, 255, 0.06) 100%);
          border-color: rgba(255, 255, 255, 0.15);
        }
      }
      
      /* High contrast mode support */
      @media (prefers-contrast: high) {
        .inline-code {
          background: rgba(255, 255, 255, 0.15);
          border: 2px solid currentColor;
          color: inherit;
        }
      }
      
      /* Print styles */
      @media print {
        .inline-code {
          background: transparent;
          border: 1px solid #000;
          color: #000;
          box-shadow: none;
        }
      }
    </style>
  </>
}

<!-- Anything citation-* is custom made -->
<!-- === citationReference === -->
{node.type === 'citationReference' && (
  <sup class="cite-ref">
    <a
      href={node.data?.hProperties?.href ?? ''}
      id={node.data?.hProperties?.id ?? ''}
      class="citation-link"
    >
      [{node.children?.map(child => <Astro.self node={child} data={data} />)}]
    </a>
  </sup>
)}

<!-- === single citation node === -->
{node.type === 'citation' && (
  <ArticleCitation node={node} />
)}

<!-- === citations block === -->
{node.type === 'citations' && (
  <ArticleCitationsBlock node={node} />
)}

<!-- footnoteReference and footnoteDefinition are from standard Markdown library -->
{node.type === 'footnoteReference' && (
  <sup class="footnote-ref">
    <a href={`#${node.label}`} id={`ref-${node.label}`}>
      [{node.label}]
    </a>
  </sup>
  <style>
  .footnote-ref {
    font-size: 0.6em;
    vertical-align: super;
    top: 0px;
  }

  .footnote-definition {
    font-size: 0.9em;
    margin-top: 1em;
    border-top: 1px solid #666;
    padding-top: 0.5em;
  }

</style>

)}

{node.type === 'footnoteDefinition' && (
  <div id={node.label} class="footnote-definition">
    {node.children.length === 1 && node.children[0].type === 'paragraph' ? (
      <p>
        <strong><a href={`#ref-${node.label}`}>[{node.label}]</a></strong>{' '}
        {node.children[0].children.map(child => (
          <Astro.self node={child} data={data} />
        ))}{' '}
      </p>
    ) : (
      <>
        <strong>[{node.label}]</strong>
        {node.children.map(child => (
          <Astro.self node={child} data={data} />
        ))}
      </>
    )}
  </div>
)}


{(node.type === "paragraph") &&
    <div class="paragraph">
        {node.children.map((child: any) => (
            <Astro.self node={child} data={data} />
        ))}
    </div>
}

{(node.type === "thematicBreak") && 
    <hr />
}

{(node.type === "text") && 
    <span>{node.value}</span>
}

{other_type && 
    <div class={`unhandled-${node.type}`}>
        {JSON.stringify(node)}
    </div>
}


