---
import {dirname} from 'path'
import ArticleCallout from './callouts/ArticleCallout.astro';
import ArticleCitationsBlock from './citations/ArticleCitations.astro';
import ArticleCitation from './citations/ArticleCitation.astro';
import BaseCodeblock from '../codeblocks/BaseCodeblock.astro';
import MermaidChart from '../codeblocks/MermaidChart.astro';
import TableOfContents from './TableOfContents.astro';
import ImageGallery from './ImageGallery.astro';
import ToolingGallery from './ToolingGallery.astro';
import { getCollection } from "astro:content";
import { transformContentPathToRoute } from '@utils/routing/routeManager';
import { DEBUG_AST } from '@utils/envUtils';
import { slugify } from '@utils/slugify';
import shareIcon from '@assets/Icons/share.svg';
import IconSVGWrapper from '../basics/render-images/IconSVGWrapper.astro';
    /*
      Compose a unique id for markdown headings using ONLY the main heading text.
      - This function takes a heading MDAST node and returns a slugified version of the primary text content.
      - It does NOT include the file name, any prefix, or subtitle/lead-in text.
      - Example: 'A Parable of Directionality' → 'a-parable-of-directionality'
      - This logic matches ToC anchor links for in-page navigation.
      - Aggressively commented: update here and at all call sites if logic changes.
    */
    // Extract only the first text node (primary heading text)


interface Props {
    /**
     * Markdown AST node interface for AstroMarkdown.astro
     * - 'lang' is present on 'code' nodes and specifies the code language (e.g., 'js', 'python').
     * - See remark/rehype AST docs for more details.
     */
    node: {
        type: string;
        value?: string;
        lang?: string; // <-- Added for code blocks
        children?: any[];
        url?: string;
        depth?: number;
        data?: {
            hProperties?: Record<string, any>;
            map?: any[];
        };
        label?: string;
    };
    data: {
        path: string;
        id?: string;  // File ID (e.g., 'Agile.md')
        [key: string]: any;
    };
}

const { node, data } = Astro.props;

// Helper to recursively extract all text content from a node and its children
function extractAllText(children) {
  let text = '';
  if (Array.isArray(children)) {
    for (const child of children) {
      if (child.type === 'text') {
        text += child.value;
      } else if (child.children && Array.isArray(child.children)) {
        // Check if child.children is indeed an array before recursing
        text += extractAllText(child.children);
      }
    }
  }
  return text;
}

// List of node types we handle with specific components
// Order matters! Container types (like blockquote) should be handled before their children (like paragraph)
const handled_types = [
    "root",
    "link",        // Handle standard MDAST link nodes
    "blockquote",  // Handle blockquotes before paragraphs since they contain paragraphs
    "paragraph",
    "text",
    "heading",
    "image",
    "list",
    "listItem",
    "code",
    "inlineCode",
    "table",
    "tableRow",
    "tableCell",
    "strong",
    "emphasis",
    "break",
    "html",
    "citation",
    "citations",
    "citationReference",
    "footnoteReference",
    "footnoteDefinition",    
    "tableOfContents",
    "imageGallery",
    "toolingGallery",
    "thematicBreak" // Add support for horizontal rules
]

const other_type = !handled_types.includes(node.type)
data.dirpath = dirname(data.path)


//This logic has to be done up here because it's async work
// Only apply if it's a toolGallery code block
let toolGalleryTools = null;
let toolGalleryErrors: string[] = [];


async function resolveToolId(input: string, allTools: any[]): Promise<string | null> {
  // 1. Try exact match
  const directMatch = allTools.find(tool => tool.id === input);
  if (directMatch) return directMatch.id;

  // 2. Try normalized match
  const normalized = slugify(input);
  const normMatch = allTools.find(tool => slugify(tool.id) === normalized);
  if (normMatch) return normMatch.id;

  // 3. Try recursive routeManager resolution
  const route = transformContentPathToRoute(input);
  const finalSlug = route.split('/').pop();
  const finalMatch = allTools.find(tool => slugify(tool.id).endsWith(finalSlug || ''));
  return finalMatch?.id || null;
}

if (node.type === 'code' && node.lang === 'toolingGallery') {
  const rawIds = node.value
    .split('\n')
    .map(line => line.replace(/^- /, '').trim())
    .filter(Boolean);

  const allTools = await getCollection('tooling');
  const toolMap = new Map(allTools.map(entry => [entry.id, {
    ...entry.data,
    id: entry.id,
    filePath: entry.id,
  }]));

  const tools: any[] = [];
  const toolGalleryErrors: string[] = [];

  for (const input of rawIds) {
    let id = input;

    // Handle wiki-style links [[...]]
    const backlinkMatch = input.match(/^\[\[(?!.*?visuals)(.*?)(?:\|.*?)?\]\]$/);
    if (backlinkMatch) {
      id = backlinkMatch[1].trim();
    }

    const resolvedId = await resolveToolId(id, allTools);
    if (resolvedId && toolMap.has(resolvedId)) {
      tools.push(toolMap.get(resolvedId));
    } else {
      toolGalleryErrors.push(input);
    }
  }

  if (toolGalleryErrors.length > 0) {
    console.warn('[toolingGallery] Missing tools for IDs:', toolGalleryErrors);
  }

  toolGalleryTools = tools;


}
// Debug output to see AST structure
if (DEBUG_AST) {
  console.log(`=== AstroMarkdown Debug ===`)
  console.log(`Node type: ${node.type}`)
  console.log('Node structure:', JSON.stringify(node, null, 2))
}
---

{node.type === "root" && 
  <>
    {data?.renderingToC !== true && <h1>{data.title}</h1>}
    {node.children.map((child) => (
        <Astro.self node={child} data={data} />
    ))}
  </>
}

{node.type === "heading" && (() => {
  const articleTitle = data.title || 'Untitled Article';
  const currentHeaderText = extractAllText(node.children).trim() || 'Untitled Section';

  function generateHeadingId(nodeForId) {
    const fullText = extractAllText(nodeForId.children); // Uses top-level extractAllText
    return slugify(fullText.trim() || 'untitled-heading');
  }
  const id = generateHeadingId(node);

  const anchorProps = {
    role: "button",
    tabIndex: 0,
    className: "header-anchor",
    title: `${articleTitle}... ${currentHeaderText}`,
    "aria-label": `Copy link to section: ${currentHeaderText}`,
    "data-heading-id": id,
    "data-article-title": articleTitle,
    "data-header-text": currentHeaderText,
    onclick: "copyHeaderLink(this)" // Will call a global JS function
  } as any;

  const iconProps = {
    src: "/src/assets/Icons/share.svg",
    alt: "", // Decorative icon, as the <a> provides the label
    "aria-hidden": "true",
    class: "header-anchor-symbol",
    width: "16",
    height: "16"
  };

  switch (node.depth) {
    case 1: return <h1 id={id}>{node.children.map(child => <Astro.self node={child} data={data} />)}<a {...anchorProps}><IconSVGWrapper {...iconProps} /></a></h1>;
    case 2: return <h2 id={id}>{node.children.map(child => <Astro.self node={child} data={data} />)}<a {...anchorProps}><IconSVGWrapper {...iconProps} /></a></h2>;
    case 3: return <h3 id={id}>{node.children.map(child => <Astro.self node={child} data={data} />)}<a {...anchorProps}><IconSVGWrapper {...iconProps} /></a></h3>;
    case 4: return <h4 id={id}>{node.children.map(child => <Astro.self node={child} data={data} />)}<a {...anchorProps}><IconSVGWrapper {...iconProps} /></a></h4>;
    case 5: return <h5 id={id}>{node.children.map(child => <Astro.self node={child} data={data} />)}<a {...anchorProps}><IconSVGWrapper {...iconProps} /></a></h5>;
    case 6: return <h6 id={id}>{node.children.map(child => <Astro.self node={child} data={data} />)}<a {...anchorProps}><IconSVGWrapper {...iconProps} /></a></h6>;
    default:
      // Fallback for unexpected heading depths
      return <div>{node.children.map(child => <Astro.self node={child} data={data} />)}</div>;
  }
})()}

{(node.type === "strong") &&
  <strong>
    {node.children.map(child => (
      <Astro.self node={child} data={data} />
    ))}
  </strong>
}

{(node.type === "emphasis") &&
  <em>
    {node.children.map(child => (
      <Astro.self node={child} data={data} />
    ))}
  </em>
}


{(node.type === "image") &&
    <img src={node.url} />
}

{(node.type === "list") &&
  <>
    {node['ordered']
      ? <ol>
          {node.children.map((item) => (
            <Astro.self node={item} data={data} />
          ))}
        </ol>
      : <ul>
          {node.children.map((item) => (
            <Astro.self node={item} data={data} />
          ))}
        </ul>
    }
  </>
}

{(node.type === "listItem" && data?.renderingToC) && (() => {
  // Determine ToC depth for styling classes
  let depth = 1;
  let parent = data?.parent;
  while (parent) {
    if (parent.type === 'list') depth++;
    parent = parent.parent;
  }
  const depthClass = `toc-depth-${depth}`;
  return (
    <li class={depthClass}>
      {node.children.map(child => (
        <Astro.self node={child} data={{...data, parent: node}} />
      ))}
    </li>
  );
})()}

{(node.type === "listItem" && !data?.renderingToC) &&
  <li class="custom-li">
    <span class="li-content">
      {node.children.map(child => (
        <Astro.self node={child} data={data} />
      ))}
    </span>
  </li>
}

{(node.type === "table") &&
  <div class="md-table-wrapper">
    <table class="md-table">
      <tbody>
        {node.children.map(row => (
          <Astro.self node={row} data={data} />
        ))}
      </tbody>
    </table>
  </div>
  <style>
     .md-table-wrapper {
        overflow-x: auto;
        margin-bottom: 1.5rem;
    }

    .md-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.95rem;
        background-color: transparent;
    }

    .md-tr:nth-child(even) {
        background-color: rgba(255, 255, 255, 0.03);
    }

    .md-td {
        border: 1px solid rgb(255, 255, 255);
        padding: 0.5rem 0.75rem;
        text-align: left;
        colrgb(255, 255, 255);
    }


  </style>
}

{(node.type === "tableRow") &&
  <tr class="md-tr">
    {node.children.map(cell => (
      <Astro.self node={cell} data={data} />
    ))}
  </tr>
}

{(node.type === "tableCell") &&
  <td class="md-td">
    {node.children.map(child => (
      <Astro.self node={child} data={data} />
    ))}
  </td>
}


{(node.type === "link") && 
    <a href={node.url} {...(node.data?.hProperties ?? {})}>
        {node.children[0].value}
    </a>
}

{node.type === "code" && (() => {
  const { lang, value } = node;

  if (lang === "toolingGallery") {
    return
  }

  if (lang === "mermaid") {
    return <MermaidChart code={value} />;
  }

  if (lang === "imageGallery") {
    return <ImageGallery code={value} dirpath={data.dirpath} />;
  }

  return <BaseCodeblock code={value} lang={lang ?? 'text'} />;
})()}

{toolGalleryTools && (
  <>
    <ToolingGallery tools={toolGalleryTools} />
    {toolGalleryErrors.length > 0 && (
      <div class="tool-gallery-error">
        ⚠️ Tool(s) not found:
        <ul>
          {toolGalleryErrors.map(id => <li><code>{id}</code></li>)}
        </ul>
      </div>

      <style>
        .tool-gallery-error {
            color: #ff6b6b;
            background-color: rgba(255, 0, 0, 0.05);
            border: 1px solid rgba(255, 0, 0, 0.2);
            padding: 0.75rem;
            margin-top: 2rem;
            border-radius: 0.5rem;
            font-size: 0.9rem;
          }

          .tool-gallery-error ul {
            margin: 0.5rem 0 0;
            padding-left: 1.25rem;
          }
      </style>
    )}
  </>
)}


{(node.type === "html") &&
  <div class="raw-html" set:html={node.value} />
}


{(node.type === "blockquote") &&
    <ArticleCallout node={node} />
}

{(node.type === "inlineCode") &&
  <code class="inline-code">{node.value}</code>
}

<!-- Anything citation-* is custom made -->
<!-- === citationReference === -->
{node.type === 'citationReference' && (
  <sup class="cite-ref">
    <a
      href={node.data?.hProperties?.href ?? ''}
      id={node.data?.hProperties?.id ?? ''}
      class="citation-link"
    >
      [{node.children?.map(child => <Astro.self node={child} data={data} />)}]
    </a>
  </sup>
)}

<!-- === single citation node === -->
{node.type === 'citation' && (
  <ArticleCitation node={node} />
)}

<!-- === citations block === -->
{node.type === 'citations' && (
  <ArticleCitationsBlock node={node} />
)}

<!-- footnoteReference and footnoteDefinition are from standard Markdown library -->
{node.type === 'footnoteReference' && (
  <sup class="footnote-ref">
    <a href={`#${node.label}`} id={`ref-${node.label}`}>
      [{node.label}]
    </a>
  </sup>
  <style>
  .footnote-ref {
    font-size: 0.6em;
    vertical-align: super;
    top: 0px;
  }

  .footnote-definition {
    font-size: 0.9em;
    margin-top: 1em;
    border-top: 1px solid #666;
    padding-top: 0.5em;
  }

</style>

)}

{node.type === 'footnoteDefinition' && (
  <div id={node.label} class="footnote-definition">
    {node.children.length === 1 && node.children[0].type === 'paragraph' ? (
      <p>
        <strong><a href={`#ref-${node.label}`}>[{node.label}]</a></strong>{' '}
        {node.children[0].children.map(child => (
          <Astro.self node={child} data={data} />
        ))}{' '}
      </p>
    ) : (
      <>
        <strong>[{node.label}]</strong>
        {node.children.map(child => (
          <Astro.self node={child} data={data} />
        ))}
      </>
    )}
  </div>
)}

<!-- Table of Contents Rendering Logic -->
<!-- Now delegated to TableOfContents.astro for modularity and maintainability -->
{node.type === "tableOfContents" && (
  <TableOfContents node={node} data={data} />
)}

{(node.type === "paragraph") &&
    <div class="paragraph">
        {node.children.map((child: any) => (
            <Astro.self node={child} data={data} />
        ))}
    </div>
}

{(node.type === "thematicBreak") && 
    <hr />
}

{(node.type === "text") && 
    <span>{node.value}</span>
}

{other_type && 
    <div class={`unhandled-${node.type}`}>
        {JSON.stringify(node)}
    </div>
}

<script is:inline>
  function copyHeaderLink(buttonElement) {
    const headingId = buttonElement.dataset.headingId;
    // const articleTitle = buttonElement.dataset.articleTitle; // Available if needed for feedback
    // const headerText = buttonElement.dataset.headerText; // Available if needed for feedback

    if (!navigator.clipboard) {
      // Fallback for older browsers or insecure contexts (http)
      console.warn('Clipboard API not available.');
      // You could implement a textarea-based fallback here if needed
      // For now, we'll just inform the user or do nothing.
      alert('Copying to clipboard is not supported in your browser or on this page (HTTP).');
      return;
    }

    const urlToCopy = window.location.origin + window.location.pathname + '#' + headingId;

    navigator.clipboard.writeText(urlToCopy).then(() => {
      // Success! Provide feedback.
      const originalContent = buttonElement.innerHTML;
      const originalTitle = buttonElement.title;
      const originalAriaLabel = buttonElement.getAttribute('aria-label');

      buttonElement.innerHTML = '<span class="header-anchor-symbol" style="font-style: italic; font-size: 0.9em;">Copied!</span>';
      buttonElement.title = 'Link copied to clipboard!';
      buttonElement.setAttribute('aria-label', 'Link copied to clipboard!');
      
      // Prevent multiple rapid clicks from messing up the timeout
      if (buttonElement.dataset.timeoutId) {
        clearTimeout(parseInt(buttonElement.dataset.timeoutId));
      }

      const timeoutId = setTimeout(() => {
        buttonElement.innerHTML = originalContent;
        buttonElement.title = originalTitle;
        buttonElement.setAttribute('aria-label', originalAriaLabel);
        delete buttonElement.dataset.timeoutId;
      }, 2000); // Revert after 2 seconds
      buttonElement.dataset.timeoutId = timeoutId.toString();

    }).catch(err => {
      console.error('Failed to copy link: ', err);
      alert('Failed to copy link. See console for details.');
    });
  }
</script>