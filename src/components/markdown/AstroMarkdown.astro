---
import type {Root, RootContent} from 'mdast'
import type {Root as HastRoot} from 'hast'
import {toHtml} from 'hast-util-to-html'
import {dirname} from 'path'
import remarkBacklinks from '@utils/markdown/remark-backlinks';
import remarkImages from '@utils/markdown/remark-images';
import remarkCallouts from '@utils/markdown/remark-callout-handler';
import ArticleCallout from './callouts/ArticleCallout.astro';
import ArticleCitations from './citations/ArticleCitations.astro';

interface Props {
    node: {
        type: string;
        value?: string;
        children?: any[];
        url?: string;
        data?: {
            hProperties?: Record<string, any>;
            [key: string]: any; // Allow arbitrary plugin data (e.g., citationId)
        };
    };
    data: {
        path: string;
        id?: string;  // File ID (e.g., 'Agile.md')
        [key: string]: any;
    };
}

const {node, data} = Astro.props;

// List of node types we handle with specific components
// Order matters! Container types (like blockquote) should be handled before their children (like paragraph)
const handled_types = [
    "root",
    "link",        // Handle standard MDAST link nodes
    "blockquote",  // Handle blockquotes before paragraphs since they contain paragraphs
    "paragraph",
    "text",
    "heading",
    "citations",
    "citation",
    "citationRef", // Add support for citationRef nodes
    "html",        // Handle raw HTML nodes
    "thematicBreak", // Add support for horizontal rules
    "table",
    "tableRow",
    "tableCell",
    "tableHeader" // (rare, but some ASTs may use it)
]

const other_type = !handled_types.includes(node.type)
data.dirpath = dirname(data.path)

// Extract title from file ID if available and convert to Title Case
const title = data.id ? 
  data.id
    .replace(/\.md$/, '')
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ')
  : '';

// Debug output to see AST structure
console.log(`=== AstroMarkdown Debug ===`)
console.log(`Node type: ${node.type}`)
console.log('Node structure:', JSON.stringify(node, null, 2))

---

{(node.type === "root") && 
    <>
        <h1>{title}</h1>
        {node.children.map((child) => (
            <Astro.self node={child} data={data} />
        ))}
    </>
}

{(node.type === "link") && 
    <a href={node.url} {...node.data?.hProperties}>
        {node.children[0].value}
    </a>
}

{(node.type === "blockquote") &&
    <ArticleCallout node={node} />
}

{(node.type === "citations") && 
    <ArticleCitations node={node} />
}

{(node.type === "citation") && 
    <div class="citation">{node.value}</div>
}

{(node.type === "citationRef") &&
    <sup class="citation-ref" data-citation-id={node.data?.citationId}>
        <a href={`#citation-${node.data?.citationId}`}>{node.value}</a>
    </sup>
}

{(node.type === "paragraph") &&
    <div class="paragraph">
        {node.children.map((child: any) => (
            <Astro.self node={child} data={data} />
        ))}
    </div>
}

{(node.type === "thematicBreak") && 
    <hr />
}

{(node.type === "text") && 
    <span>{node.value}</span>
}

{(node.type === "html") && 
    <Fragment set:html={node.value} />
}

{(node.type === "table") &&
    <table>
        <tbody>
            {(Array.isArray(node.children) ? node.children : []).map((row, i) => (
                <Astro.self node={row} data={data} />
            ))}
        </tbody>
    </table>
}

{(node.type === "tableRow") &&
    <tr>
        {(Array.isArray(node.children) ? node.children : []).map((cell, i) => (
            <Astro.self node={cell} data={data} />
        ))}
    </tr>
}

{(node.type === "tableCell") &&
    <td>
        {(Array.isArray(node.children) ? node.children : []).map((child, i) => (
            <Astro.self node={child} data={data} />
        ))}
    </td>
}

{other_type && 
    <div class={`unhandled-${node.type}`}>
        {JSON.stringify(node)}
    </div>
}

<style>
/* === GFM TABLE STYLES ADDED === */
/* Light theme. */
:root {
  --color-canvas-default: #ffffff;
  --color-canvas-subtle: #f6f8fa;
  --color-border-default: #d0d7de;
  --color-border-muted: hsla(210, 18%, 87%, 1);
}

/* Dark theme. */
@media (prefers-color-scheme: dark) {
  :root {
    --color-canvas-default: #0d1117;
    --color-canvas-subtle: #161b22;
    --color-border-default: #30363d;
    --color-border-muted: #21262d;
  }
}

table {
  border-spacing: 0;
  border-collapse: collapse;
  display: block;
  margin-top: 0;
  margin-bottom: 16px;
  width: max-content;
  max-width: 100%;
  overflow: auto;
}

tr {
  background-color: var(--color-canvas-default);
  border-top: 1px solid var(--color-border-muted);
}

tr:nth-child(2n) {
  background-color: var(--color-canvas-subtle);
}

td,
th {
  padding: 6px 13px;
  border: 1px solid var(--color-border-default);
}

th {
  font-weight: 600;
}

table img {
  background-color: transparent;
}
/* === END GFM TABLE STYLES === */
</style>