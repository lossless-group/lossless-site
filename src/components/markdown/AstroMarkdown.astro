---
import type {Root, RootContent} from 'mdast'
import type {Root as HastRoot} from 'hast'
import {toHtml} from 'hast-util-to-html'
import {dirname} from 'path'
import remarkBacklinks from '@utils/markdown/remark-backlinks';
import remarkCallouts from '@utils/markdown/remark-callout-handler';
import ArticleCallout from './callouts/ArticleCallout.astro';
import ArticleCitations from './citations/ArticleCitations.astro';

interface Props {
    node: {
        type: string;
        value?: string;
        children?: any[];
        url?: string;
        alt?: string;
        data?: {
            hName?: string;
            hProperties?: Record<string, any>;
        };
    };
    data: {
        path: string;
        id?: string;  // File ID (e.g., 'Agile.md')
        [key: string]: any;
    };
}

const {node, data} = Astro.props;

// List of node types we handle with specific components
// Order matters! Container types (like blockquote) should be handled before their children (like paragraph)
const handled_types = [
    "root",
    "link",        // Handle standard MDAST link nodes
    "blockquote",  // Handle blockquotes before paragraphs since they contain paragraphs
    "paragraph",
    "text",
    "heading",
    "citations",
    "citation",
    "html",        // Handle raw HTML nodes
    "thematicBreak", // Add support for horizontal rules
    "image",       // Handle image nodes
    "table",       // GFM table support
    "tableRow",
    "tableCell"
]

const other_type = !handled_types.includes(node.type)
data.dirpath = dirname(data.path)

// Extract title from file ID if available and convert to Title Case
const title = data.id ? 
  data.id
    .replace(/\.md$/, '')
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ')
  : '';

// Debug output to see AST structure
console.log(`=== AstroMarkdown Debug ===`)
console.log(`Node type: ${node.type}`)
console.log('Node structure:', JSON.stringify(node, null, 2))

---

{(node.type === "root") && 
    <>
        <h1>{title}</h1>
        {node.children?.map((child) => (
            <Astro.self node={child} data={data} />
        ))}
    </>
}

{(node.type === "link") && 
    <a href={node.url} {...node.data?.hProperties}>
        {node.children[0].value}
    </a>
}

{(node.type === "blockquote") &&
    <ArticleCallout node={node} />
}

{(node.type === "citations") && 
    <ArticleCitations node={node} />
}

{(node.type === "citation") && 
    <div class="citation">{node.value}</div>
}

{(node.type === "paragraph") &&
    <div class="paragraph">
        {node.children?.map((child: any) => (
            <Astro.self node={child} data={data} />
        ))}
    </div>
}

{(node.type === "thematicBreak") && 
    <hr />
}

{(node.type === "text") && 
    <span>{node.value}</span>
}

{(node.type === "html") && 
    <Fragment set:html={node.value} />
}

{(node.type === "table") && 
    <table>
        {node.children?.map((row: any) => (
            <Astro.self node={row} data={data} />
        ))}
    </table>
}

{(node.type === "tableRow") && 
    <tr>
        {node.children?.map((cell: any) => (
            <Astro.self node={cell} data={data} />
        ))}
    </tr>
}

{(node.type === "tableCell") && 
    node.data?.hName === 'th' ? (
        <th style={node.data?.hProperties?.style}>
            {node.children?.map((child: any) => (
                <Astro.self node={child} data={data} />
            ))}
        </th>
    ) : (
        <td style={node.data?.hProperties?.style}>
            {node.children?.map((child: any) => (
                <Astro.self node={child} data={data} />
            ))}
        </td>
    )
}

{(node.type === "image") && 
    <img 
        src={node.url} 
        alt={node.alt || ''} 
        {...node.data?.hProperties}
        class="embedded-image"
    />
}

{other_type && 
    <div class={`unhandled-${node.type}`}>
        {JSON.stringify(node)}
    </div>
}

<style>
.embedded-image {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 1rem 0;
}

/* GFM table styles */
table {
    border-spacing: 0;
    border-collapse: collapse;
    margin: 1rem 0;
}

table tr {
    background-color: var(--surface-1);
    border-top: 1px solid var(--surface-3);
}

table tr:nth-child(2n) {
    background-color: var(--surface-2);
}

table th,
table td {
    padding: 6px 13px;
    border: 1px solid var(--surface-3);
}

table th {
    font-weight: 600;
}
</style>