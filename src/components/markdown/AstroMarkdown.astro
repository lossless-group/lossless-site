---
import {dirname} from 'path'
import ArticleCallout from './callouts/ArticleCallout.astro';
import ArticleCitationsBlock from './citations/ArticleCitations.astro';
import ArticleCitation from './citations/ArticleCitation.astro';
import BaseCodeblock from '../codeblocks/BaseCodeblock.astro';

interface Props {
    /**
     * Accepts a mapping of mermaidId to SVG strings for inlining Mermaid diagrams.
     */
    mermaidSvgs?: Record<string, string>;
    /**
     * Markdown AST node interface for AstroMarkdown.astro
     * - Supports both Markdown (MDAST) and HTML (HAST) element nodes.
     * - See remark/rehype AST docs for more details.
     */
    node: {
        type: string;
        value?: string;
        lang?: string; // <-- Added for code blocks
        children?: any[];
        url?: string;
        depth?: number;
        label?: string; // Added for footnoteReference nodes
        data?: {
            hProperties?: Record<string, any>;
            isMermaid?: boolean;
            mermaidId?: string;
        };
        // --- HAST element node support ---
        tagName?: string;
        properties?: Record<string, any>;
    };
    data: {
        path: string;
        id?: string;  // File ID (e.g., 'Agile.md')
        [key: string]: any;
    };
}

const {node, data, mermaidSvgs = {}} = Astro.props;

// List of node types we handle with specific components
// Order matters! Container types (like blockquote) should be handled before their children (like paragraph)
const handled_types: string[] = [
    "root",
    "link",        // Handle standard MDAST link nodes
    "blockquote",  // Handle blockquotes before paragraphs since they contain paragraphs
    "paragraph",
    "text",
    "heading",
    "image",
    "list",
    "listItem",
    "code",
    "inlineCode",
    "table",
    "tableRow",
    "tableCell",
    "strong",
    "emphasis",
    "break",
    "citation",
    "citations",
    "citationReference",
    "footnoteReference",
    "footnoteDefinition",
    "thematicBreak", // Add support for horizontal rules
    "element" // Add support for HAST element nodes
]

const other_type = !handled_types.includes(node.type)
data.dirpath = dirname(data.path)

// Extract title from file ID if available and convert to Title Case
const title = data.id ? 
  data.id
    .replace(/\.md$/, '')
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ')
  : '';

// === AST Rendering Logic ===
---

<div>
  {(node.type === "root") && 
    <div>
      <h1>{title}</h1>
      {node.children.map((child) => (
        <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />
      ))}
    </div>
  }

  {(node.type === "heading") &&
    <div>
      {node.depth === 1 && <h1>{node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}</h1>}
      {node.depth === 2 && <h2>{node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}</h2>}
      {node.depth === 3 && <h3>{node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}</h3>}
      {node.depth === 4 && <h4>{node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}</h4>}
      {node.depth === 5 && <h5>{node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}</h5>}
      {node.depth === 6 && <h6>{node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}</h6>}
    </div>
  }

  {(node.type === "strong") &&
    <strong>
      {node.children.map(child => (
        <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />
      ))}
    </strong>
  }

  {(node.type === "emphasis") &&
    <em>
      {node.children.map(child => (
        <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />
      ))}
    </em>
  }

  {(node.type === "paragraph") &&
    <p>
      {node.children.map(child => (
        <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />
      ))}
    </p>
  }

  {(node.type === "image") &&
    <img src={node.url} />
  }

  {(node.type === "list") &&
    <div>
      {node['ordered']
        ? <ol>
          {node.children.map((item) => (
            <Astro.self node={item} data={data} mermaidSvgs={mermaidSvgs} />
          ))}
        </ol>
        : <ul>
          {node.children.map((item) => (
            <Astro.self node={item} data={data} mermaidSvgs={mermaidSvgs} />
          ))}
        </ul>
      }
    </div>
  }

  {(node.type === "listItem") &&
    <li class="custom-li">
      <span class="li-content">
        {node.children.map(child => (
          <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />
        ))}
      </span>
    </li>
  }

  {(node.type === "table") &&
    <div class="md-table-wrapper">
      <table class="md-table">
        <tbody>
          {node.children.map(row => (
            <Astro.self node={row} data={data} mermaidSvgs={mermaidSvgs} />
          ))}
        </tbody>
      </table>
    </div>
    <style>
      .md-table-wrapper {
        overflow-x: auto;
        margin-bottom: 1.5rem;
      }

      .md-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.95rem;
        background-color: transparent;
      }

      .md-tr:nth-child(even) {
        background-color: rgba(255, 255, 255, 0.03);
      }

      .md-td {
        border: 1px solid rgb(255, 255, 255);
        padding: 0.5rem 0.75rem;
        text-align: left;
      }
    </style>
  }

  {(node.type === "tableRow") &&
    <tr class="md-tr">
      {node.children.map(cell => (
        <Astro.self node={cell} data={data} mermaidSvgs={mermaidSvgs} />
      ))}
    </tr>
  }

  {(node.type === "tableCell") &&
    <td class="md-td">
      {node.children.map(child => (
        <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />
      ))}
    </td>
  }

  {(node.type === "link") && 
    <a href={node.url} {...node.data?.hProperties}>
      {node.children[0].value}
    </a>
  }

  {(node.type === "code") && (
    node.data?.isMermaid && node.data?.mermaidId && mermaidSvgs && mermaidSvgs[node.data.mermaidId]
      ? <div class="mermaid-diagram" set:html={mermaidSvgs[node.data.mermaidId]} />
      : <pre><code class={`language-${node.lang ?? "text"}`}>{node.value}</code></pre>
  )}

  {(node.type === "blockquote") &&
    <ArticleCallout node={node} />
  }

  {(node.type === "inlineCode") &&
    <code class="inline-code">{node.value}</code>
  }

  {(node.type === "citationReference") && (
    <sup class="cite-ref">
      <a
        href={node.data?.hProperties?.href}
        id={node.data?.hProperties?.id}
        class="citation-link"
      >
        [{node.children?.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}]
      </a>
    </sup>
  )}

  {(node.type === 'citation') && (
    <ArticleCitation node={node} />
  )}

  {(node.type === 'citations') && (
    <ArticleCitationsBlock node={node} />
  )}

  {(node.type === 'footnoteReference') && (
    <sup class="footnote-ref">
      <a href={`#${node.label}`} id={`ref-${node.label}`}>
        [{node.label}]
      </a>
    </sup>
    <style>
    .footnote-ref {
      font-size: 0.8em;
      vertical-align: super;
    }
    .footnote-definition {
      font-size: 0.9em;
      margin-top: 1em;
      border-top: 1px solid #ccc;
      padding-top: 0.5em;
    }
  </style>
  )}

  {(node.type === 'footnoteDefinition') && (
    <div id={node.label} class="footnote-definition">
      <p>
        <strong>[{node.label}]</strong>{' '}
        {node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
      </p>
    </div>
  )}

  {(node.type === "thematicBreak") && 
    <hr />
  }

  {(node.type === "text") && 
    <span>{node.value}</span>
  }

  {(node.type === "element" && node.tagName === "h1") && (
    <h1 {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </h1>
  )}
  {(node.type === "element" && node.tagName === "h2") && (
    <h2 {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </h2>
  )}
  {(node.type === "element" && node.tagName === "h3") && (
    <h3 {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </h3>
  )}
  {(node.type === "element" && node.tagName === "h4") && (
    <h4 {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </h4>
  )}
  {(node.type === "element" && node.tagName === "h5") && (
    <h5 {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </h5>
  )}
  {(node.type === "element" && node.tagName === "h6") && (
    <h6 {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </h6>
  )}
  {(node.type === "element" && node.tagName === "pre") && (
    node.children && node.children[0] && node.children[0].type === "element" && node.children[0].tagName === "code"
      ? <pre {...node.properties}>
          <code {...node.children[0].properties}>
            {node.children[0].children && node.children[0].children[0] && node.children[0].children[0].value}
          </code>
        </pre>
      : <pre {...node.properties}>
          {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
        </pre>
  )}
  {(node.type === "element" && node.tagName === "p") && (
    <p {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </p>
  )}
  {(node.type === "element" && node.tagName === "span") && (
    <span {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </span>
  )}
  {(node.type === "element" && node.tagName === "div") && (
    <div {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </div>
  )}
  {(node.type === "element" && node.tagName === "ul") && (
    <ul {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </ul>
  )}
  {(node.type === "element" && node.tagName === "ol") && (
    <ol {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </ol>
  )}
  {(node.type === "element" && node.tagName === "li") && (
    <li {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </li>
  )}
  {(node.type === "element" && node.tagName === "table") && (
    <table {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </table>
  )}
  {(node.type === "element" && node.tagName === "thead") && (
    <thead {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </thead>
  )}
  {(node.type === "element" && node.tagName === "tbody") && (
    <tbody {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </tbody>
  )}
  {(node.type === "element" && node.tagName === "tr") && (
    <tr {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </tr>
  )}
  {(node.type === "element" && node.tagName === "td") && (
    <td {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </td>
  )}
  {(node.type === "element" && node.tagName === "th") && (
    <th {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </th>
  )}
  {(node.type === "element" && node.tagName === "svg") && (
    <svg {...node.properties}>
      {node.children && node.children.map(child => <Astro.self node={child} data={data} mermaidSvgs={mermaidSvgs} />)}
    </svg>
  )}

  {other_type && (
    <div class={`unhandled-${node.type}`}>
      ⚠️ Unhandled node type: <code>{node.type}</code>
      <pre>{JSON.stringify(node, null, 2)}</pre>
    </div>
  )}
</div>
