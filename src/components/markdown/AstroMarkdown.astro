---
import {dirname} from 'path'
import ArticleCallout from './callouts/ArticleCallout.astro';
import ArticleCitations from './citations/ArticleCitations.astro';
import BaseCodeblock from '../codeblocks/BaseCodeblock.astro';

interface Props {
    /**
     * Markdown AST node interface for AstroMarkdown.astro
     * - 'lang' is present on 'code' nodes and specifies the code language (e.g., 'js', 'python').
     * - See remark/rehype AST docs for more details.
     */
    node: {
        type: string;
        value?: string;
        lang?: string; // <-- Added for code blocks
        children?: any[];
        url?: string;
        depth?: number;
        data?: {
            hProperties?: Record<string, any>;
        };
    };
    data: {
        path: string;
        id?: string;  // File ID (e.g., 'Agile.md')
        [key: string]: any;
    };
}

const {node, data} = Astro.props;

// List of node types we handle with specific components
// Order matters! Container types (like blockquote) should be handled before their children (like paragraph)
const handled_types = [
    "root",
    "link",        // Handle standard MDAST link nodes
    "blockquote",  // Handle blockquotes before paragraphs since they contain paragraphs
    "paragraph",
    "text",
    "heading",
    "citations",
    "citation",
    "image",
    "list",
    "listItem",
    "code",
    "inlineCode",
    "table",
    "tableRow",
    "tableCell",
    "strong",
    "emphasis",
    "break",
    "citationReference",
    "thematicBreak" // Add support for horizontal rules
]

const other_type = !handled_types.includes(node.type)
data.dirpath = dirname(data.path)

// Extract title from file ID if available and convert to Title Case
const title = data.id ? 
  data.id
    .replace(/\.md$/, '')
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ')
  : '';

// Debug output to see AST structure
// console.log(`=== AstroMarkdown Debug ===`)
// console.log(`Node type: ${node.type}`)
// console.log('Node structure:', JSON.stringify(node, null, 2))

---

{(node.type === "root") && 
    <>
        <h1>{title}</h1>
        {node.children.map((child) => (
            <Astro.self node={child} data={data} />
        ))}
    </>
}

{(node.type === "heading") &&
  <>
    {node.depth === 1 && <h1>{node.children.map(child => <Astro.self node={child} data={data} />)}</h1>}
    {node.depth === 2 && <h2>{node.children.map(child => <Astro.self node={child} data={data} />)}</h2>}
    {node.depth === 3 && <h3>{node.children.map(child => <Astro.self node={child} data={data} />)}</h3>}
    {node.depth === 4 && <h4>{node.children.map(child => <Astro.self node={child} data={data} />)}</h4>}
    {node.depth === 5 && <h5>{node.children.map(child => <Astro.self node={child} data={data} />)}</h5>}
    {node.depth === 6 && <h6>{node.children.map(child => <Astro.self node={child} data={data} />)}</h6>}
  </>
}

{(node.type === "strong") &&
  <strong>
    {node.children.map(child => (
      <Astro.self node={child} data={data} />
    ))}
  </strong>
}

{(node.type === "emphasis") &&
  <em>
    {node.children.map(child => (
      <Astro.self node={child} data={data} />
    ))}
  </em>
}

{(node.type === 'citationReference') &&
  <sup class="cite-ref">
    {node.children.map(child => <Astro.self node={child} data={data} />)}
  </sup>
}

{(node.type === "image") &&
    <img src={node.url} />
}

{(node.type === "list") &&
  <>
    {node['ordered']
      ? <ol>
          {node.children.map((item) => (
            <Astro.self node={item} data={data} />
          ))}
        </ol>
      : <ul>
          {node.children.map((item) => (
            <Astro.self node={item} data={data} />
          ))}
        </ul>
    }
  </>
}

{(node.type === "listItem") &&
  <li class="custom-li">
    <span class="li-content">
      {node.children.map(child => (
        <Astro.self node={child} data={data} />
      ))}
    </span>
  </li>
}

{(node.type === "table") &&
  <div class="md-table-wrapper">
    <table class="md-table">
      <tbody>
        {node.children.map(row => (
          <Astro.self node={row} data={data} />
        ))}
      </tbody>
    </table>
  </div>
  <style>
     .md-table-wrapper {
        overflow-x: auto;
        margin-bottom: 1.5rem;
    }

    .md-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.95rem;
        background-color: transparent;
    }

    .md-tr:nth-child(even) {
        background-color: rgba(255, 255, 255, 0.03);
    }

    .md-td {
        border: 1px solid rgb(255, 255, 255);
        padding: 0.5rem 0.75rem;
        text-align: left;
        colrgb(255, 255, 255);
    }


  </style>
}

{(node.type === "tableRow") &&
  <tr class="md-tr">
    {node.children.map(cell => (
      <Astro.self node={cell} data={data} />
    ))}
  </tr>
}

{(node.type === "tableCell") &&
  <td class="md-td">
    {node.children.map(child => (
      <Astro.self node={child} data={data} />
    ))}
  </td>
}


{(node.type === "link") && 
    <a href={node.url} {...node.data?.hProperties}>
        {node.children[0].value}
    </a>
}

{(node.type === "code") &&
  /*
    Render code blocks using the BaseCodeblock component for unified styling and copy functionality.
    The language header (e.g., 'bash', 'js') is rendered ONLY by BaseCodeblock.astro.
    DO NOT render the language header here to avoid duplication.
    Single Source of Truth: site/src/components/codeblocks/BaseCodeblock.astro
  */
  <BaseCodeblock code={node.value} lang={node.lang ?? 'text'} />
}

{(node.type === "blockquote") &&
    <ArticleCallout node={node} />
}

{(node.type === "inlineCode") &&
  <code class="inline-code">{node.value}</code>
}

{(node.type === "citations") && 
    <ArticleCitations node={node} />
}

{(node.type === "citation") && 
    <div class="citation">{node.value}</div>
}

{(node.type === "paragraph") &&
    <div class="paragraph">
        {node.children.map((child: any) => (
            <Astro.self node={child} data={data} />
        ))}
    </div>
}

{(node.type === "thematicBreak") && 
    <hr />
}

{(node.type === "text") && 
    <span>{node.value}</span>
}

{other_type && 
    <div class={`unhandled-${node.type}`}>
        {JSON.stringify(node)}
    </div>
}
