---
import type {Root, RootContent} from 'mdast'
import type {Root as HastRoot} from 'hast'
import {toHtml} from 'hast-util-to-html'
import {dirname} from 'path'

export interface Props {
    node: Root | RootContent;
    data: {
        path: string;
        [key: string]: any;
    };
}

const {node, data} = Astro.props;

// List of node types we handle with specific components
const handled_types = [
    "root",
    "paragraph",
    "blockquote",  // We'll handle blockquotes for callouts
    "text",
    "heading"
]

const other_type = !handled_types.includes(node.type)
data.dirpath = dirname(data.path)

// Debug output to see AST structure
console.log(`Processing node type: ${node.type}`)
console.log(JSON.stringify(node, null, 2))
---

{(node.type === "root") && 
    <>
        {node.children.map((child) => (
            <Astro.self node={child} data={data} />
        ))}
    </>
}

{(node.type === "paragraph") &&
    <div class="paragraph">
        {node.children.map((child) => (
            <Astro.self node={child} data={data} />
        ))}
    </div>
}

{(node.type === "text") && 
    <span>{node.value}</span>
}

{(node.type === "blockquote") &&
    <div class="blockquote">
        {node.children.map((child) => (
            <Astro.self node={child} data={data} />
        ))}
    </div>
}

{other_type && 
    <div class={`unhandled-${node.type}`}>
        {JSON.stringify(node)}
    </div>
}