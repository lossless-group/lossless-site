---
import { DEBUG_TOC } from '@utils/envUtils';
import { extractAllText, slugify } from '@utils/slugify';

interface Props {
  node: {
    type?: string;
    children?: any[];
  } | undefined;
}

const { node } = Astro.props;

const isValidToc = node?.type === 'list' && Array.isArray(node.children);

function getLinkText(linkNode) {
  if (Array.isArray(linkNode?.children)) {
    return "â€¢   " + extractAllText(linkNode.children)
      .replace(/:\s*$/, ''); // strip trailing colon
  }
  return '';
}
---

<aside class="toc-sidebar">
  <h2 class="toc-title">Table of Contents</h2>
  <div class="toc-scroll-area">
    {isValidToc ? (
      <ul>
        {node.children.map(item => {
          const firstLink = item.children?.[0]?.children?.[0];
          const text = getLinkText(firstLink);
          const slug = slugify(text.trim());
          const href = `#${slug}`;
          const depth = 1;
          
          if (DEBUG_TOC) {
            console.log('[TableOfContents] Rendering item:', { text, href, depth });
          }

          return (
            <li class={`toc-depth-${depth}`}>
              {firstLink ? <a href={href}>{text}</a> : text}

              {item.children?.find(child => child.type === 'list') && (
                <ul>
                  {item.children
                    .filter(child => child.type === 'list')
                    .flatMap(child => child.children)
                    .map(subItem => {
                      const subLink = subItem.children?.[0]?.children?.[0];
                      const subText = getLinkText(subLink);
                      const subSlug = slugify(subText.trim());
                      const subHref = `#${subSlug}`;
                      const subDepth = depth + 1;
                      
                      if (DEBUG_TOC) {
                        console.log('[TableOfContents] Rendering subItem:', { subText, subHref, subDepth });
                      }

                      return (
                        <li class={`toc-depth-${subDepth}`}>
                          {subLink ? <a href={subHref}>{subText}</a> : subText}

                          {subItem.children?.find(child => child.type === 'list') && (
                            <ul>
                              {subItem.children
                                .filter(child => child.type === 'list')
                                .flatMap(child => child.children)
                                .map(subSubItem => {
                                  const subSubLink = subSubItem.children?.[0]?.children?.[0];
                                  const subSubText = getLinkText(subSubLink);
                                  const subSubSlug = slugify(subSubText.trim());
                                  const subSubHref = `#${subSubSlug}`;
                                  const subSubDepth = subDepth + 1;
                                  
                                  if (DEBUG_TOC) {
                                    console.log('[TableOfContents] Rendering subSubItem:', { subSubText, subSubHref, subSubDepth });
                                  }

                                  return (
                                    <li class={`toc-depth-${subSubDepth}`}>
                                      {subSubLink ? <a href={subSubHref}>{subSubText}</a> : subSubText}
                                    </li>
                                  );
                                })}
                            </ul>
                          )}
                        </li>
                      );
                    })}
                </ul>
              )}
            </li>
          );
        })}
      </ul>
    ) : (
      <div class="toc-empty-message">No Table of Contents available.</div>
    )}
  </div>
</aside>

<style>
.toc-sidebar {
  margin-left: 1rem;
  min-width: 35ch;
  position: sticky;
  top: 4rem;
  align-self: flex-start;
  max-height: calc(100vh - 4rem);
  display: flex;
  flex-direction: column;
}

.toc-title {
  font-size: 1rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: var(--clr-lossless-accent--brightest);
}

.toc-scroll-area ul,
.toc-scroll-area ul ul,
.toc-scroll-area ul ul ul,
.toc-scroll-area ul ul ul ul,
.toc-scroll-area ul ul ul ul ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

.toc-scroll-area li::marker {
  content: none;
}

.toc-scroll-area {
  overflow-y: auto;
  list-style-type: none;
  flex-grow: 1;
  padding-right: 0.5rem;
  border-left: 1px solid var(--clr-lossless-accent--brightest);
  padding-left: 1rem;
  background: rgba(255, 255, 255, 0.02);
}

.toc-scroll-area ul {
  list-style-type: none;
  padding-left: 0;
}

.toc-scroll-area li {
  margin: 0.3rem 0;
}

.toc-depth-1 a { font-size: 1.1em; font-weight: 400; margin-left: 0; }
.toc-depth-2 a { font-size: 1em; font-weight: 400; margin-left: 1em; }
.toc-depth-3 a { font-size: 0.95em; font-weight: 350; margin-left: 2em; }
.toc-depth-4 a { font-size: 0.92em; font-weight: 300; margin-left: 3em; }
.toc-depth-5 a { font-size: 0.92em; font-weight: 300; margin-left: 4em; }
.toc-depth-6 a { font-size: 0.92em; font-weight: 300; margin-left: 5em; }

.toc-scroll-area a {
  text-decoration: none;
  color: #ccc;
}

.toc-scroll-area a:hover {
  color: white;
}

.toc-empty-message {
  padding: 1rem;
  font-size: 0.95rem;
  color: var(--clr-lossless-primary-light);
  opacity: 0.8;
  text-align: center;
}

@media (max-width: 1024px) {
  .toc-sidebar {
    display: none;
  }
}
</style>
