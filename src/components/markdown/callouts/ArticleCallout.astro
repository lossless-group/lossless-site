---
interface Props {
  type?: string;
  title?: string;
  node?: any; // AST node
  data?: any; // Data object
  'data-ast'?: string; // AST data attribute
}

import {unified} from 'unified';
import remarkRehype from 'remark-rehype';
import {toHtml} from 'hast-util-to-html';

const { type = 'info', title, node, data, 'data-ast': astData } = Astro.props;

// Debug: Log just the essential parts
console.log('=== ArticleCallout Debug ===');
console.log('Node type:', node?.type);
console.log('Children:', node?.children?.map(child => ({type: child.type})));

// Extract callout metadata from first line
let calloutType = type;
let calloutTitle = title;
let contentNode = node;

// Get the first paragraph's first text node
const firstParagraph = node?.children?.[0];
if (firstParagraph?.type === 'paragraph') {
  const firstTextNode = firstParagraph.children?.[0];
  if (firstTextNode?.type === 'text') {
    const lines = firstTextNode.value.split('\n');
    const firstLine = lines[0];
    
    const match = firstLine.match(/^\[!([^\]]+)\]\s*(.*)$/);
    if (match) {
      calloutType = match[1].trim();
      calloutTitle = match[2].trim() || calloutType;
      
      // Update first paragraph to remove metadata line
      contentNode = {
        ...node,
        children: [
          {
            ...firstParagraph,
            children: [
              {
                ...firstTextNode,
                value: lines.slice(1).join('\n')
              },
              ...firstParagraph.children.slice(1)
            ]
          },
          ...node.children.slice(1)
        ]
      };
    }
  }
}

console.log('Extracted:', { calloutType, calloutTitle });

// Convert remaining content to HTML
const processedContent = await unified()
  .use(remarkRehype)
  .run(contentNode)
  .then(result => toHtml(result));
---

<article class={`callout callout-${calloutType.toLowerCase()}`} data-debug-enabled>
  <header class="callout-header">{calloutTitle}</header>
  <div class="callout-content" set:html={processedContent}>
  </div>
</article>

<script>
  interface CalloutDebugData {
    type: string;
    header: string | undefined;
    content: string | undefined;
    astNode: any | undefined;
  }

  declare global {
    interface Window {
      calloutDebug: CalloutDebugData[];
    }
  }

  // Make callout data available in browser console
  const callouts = document.querySelectorAll('.callout[data-debug-enabled]');
  
  callouts.forEach((callout, index) => {
    const debugData = {
      type: callout.classList.toString().split('callout-')[1],
      header: callout.querySelector('.callout-header')?.textContent,
      content: callout.querySelector('.callout-content')?.innerHTML,
      astNode: callout.getAttribute('data-ast') ? JSON.parse(callout.getAttribute('data-ast') || '') : undefined
    };
    
    // Add to window object for console access
    if (!window.calloutDebug) {
      window.calloutDebug = [];
    }
    window.calloutDebug[index] = debugData;
  });

  console.log('Callout debug data available at window.calloutDebug');
</script>

<style>
  .callout {
    margin: 1rem 0;
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: var(--clr-lossless-primary-dark);
    border: 1px solid var(--clr-lossless-accent--brightest);
  }

  .callout-header {
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: var(--clr-lossless-accent--brightest);
  }

  .callout-content {
    color: var(--clr-lossless-primary-light);
  }
</style>