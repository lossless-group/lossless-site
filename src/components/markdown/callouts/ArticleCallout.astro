---
import type { Root, RootContent, Parent, PhrasingContent, Paragraph, CitationNode, CitationsNode } from 'mdast';
import AstroMarkdown from '../AstroMarkdown.astro';

interface Props {
  node: {
    type: string;
    children?: RootContent[];
    value?: string;
    data?: {
      hProperties?: Record<string, unknown>;
    };
  };
  data?: Record<string, unknown>;
}

const { node, data = {} } = Astro.props;

// Ensure data has required path property for AstroMarkdown
const markdownData = {
  path: '/default-path',
  ...data
};

// Callout type definitions
const calloutTypes = {
  'emphasis': { icon: 'üí°', title: 'Emphasis', color: '#3b82f6', bgColor: 'rgba(59, 130, 246, 0.08)', borderColor: 'rgba(59, 130, 246, 0.04)', hasStyledComponent: true },
  'em': { icon: 'üí°', title: 'Emphasis', color: '#3b82f6', bgColor: 'rgba(59, 130, 246, 0.08)', borderColor: 'rgba(59, 130, 246, 0.04)', hasStyledComponent: true },
  'warning': { icon: '‚ö†Ô∏è', title: 'Warning', color: '#fbbf24', bgColor: 'rgba(245, 158, 11, 0.1)', borderColor: 'rgba(245, 158, 11, 0.3)', hasStyledComponent: true },
  'alert': { icon: '‚ö†Ô∏è', title: 'Alert', color: '#fbbf24', bgColor: 'rgba(245, 158, 11, 0.1)', borderColor: 'rgba(245, 158, 11, 0.3)', hasStyledComponent: true },
  'info': { icon: '‚ÑπÔ∏è', title: 'Information', color: '#60a5fa', bgColor: 'rgba(59, 130, 246, 0.08)', borderColor: 'rgba(59, 130, 246, 0.3)', hasStyledComponent: true },
  'information': { icon: '‚ÑπÔ∏è', title: 'Information', color: '#60a5fa', bgColor: 'rgba(59, 130, 246, 0.08)', borderColor: 'rgba(59, 130, 246, 0.3)', hasStyledComponent: true },
  'success': { icon: '‚úÖ', title: 'Success', color: '#4ade80', bgColor: 'rgba(34, 197, 94, 0.08)', borderColor: 'rgba(34, 197, 94, 0.3)', hasStyledComponent: true },
  'check': { icon: '‚úÖ', title: 'Success', color: '#4ade80', bgColor: 'rgba(34, 197, 94, 0.08)', borderColor: 'rgba(34, 197, 94, 0.3)', hasStyledComponent: true },
  'error': { icon: '‚ùå', title: 'Error', color: '#f87171', bgColor: 'rgba(239, 68, 68, 0.1)', borderColor: 'rgba(239, 68, 68, 0.3)', hasStyledComponent: true },
  'danger': { icon: '‚ùå', title: 'Error', color: '#f87171', bgColor: 'rgba(239, 68, 68, 0.1)', borderColor: 'rgba(239, 68, 68, 0.3)', hasStyledComponent: true },
  'tip': { icon: 'üí°', title: 'Tip', color: '#c084fc', bgColor: 'rgba(168, 85, 247, 0.08)', borderColor: 'rgba(168, 85, 247, 0.3)', hasStyledComponent: true },
  'hint': { icon: 'üí°', title: 'Tip', color: '#c084fc', bgColor: 'rgba(168, 85, 247, 0.08)', borderColor: 'rgba(168, 85, 247, 0.3)', hasStyledComponent: true },
  'note': { icon: 'üìù', title: 'Note', color: '#9ca3af', bgColor: 'rgba(107, 114, 128, 0.08)', borderColor: 'rgba(107, 114, 128, 0.3)', hasStyledComponent: true },
  'quote': { icon: '‚ùù', title: 'Quote', color: '#cbd5e1', bgColor: 'rgba(255, 255, 255, 0.05)', borderColor: '#64748b', isQuote: true, hasStyledComponent: true },
  'blockquote': { icon: '‚ùù', title: 'Quote', color: '#cbd5e1', bgColor: 'rgba(255, 255, 255, 0.05)', borderColor: '#64748b', isQuote: true, hasStyledComponent: true },
  'llm-response': { icon: 'ü§ñ', title: 'LLM Response', color: '#a855f7', bgColor: 'rgba(168, 85, 247, 0.08)', borderColor: 'rgba(168, 85, 247, 0.3)', hasStyledComponent: true }
};

// Default values
let calloutType = 'info';
let calloutTitle = '';
let calloutConfig = calloutTypes[calloutType];

let contentNode: Root = { 
  type: 'root',
  children: node.children || []
};

// ====== CALLOUT TYPE DETECTION ======
// Look for [!Type] or [type] syntax in blockquotes (Obsidian-style)
// Also support legacy [type] syntax for backward compatibility

let isObsidianCallout = false;
let useStyledComponent = false;



if (contentNode.children.length > 0) {
  const firstChild = contentNode.children[0];

  if (firstChild.type === 'paragraph' && Array.isArray(firstChild.children)) {
    // Get all text content from the first paragraph to properly extract the callout syntax
    const paragraphText = firstChild.children
      .filter(child => child.type === 'text')
      .map(child => child.value)
      .join('');
    
    if (paragraphText) {
      // First try to match Obsidian-style [!Type] pattern
      let match = paragraphText.match(/^\[!([^\]]+)\]/);
      
      if (match) {
        isObsidianCallout = true;
        useStyledComponent = true; // Obsidian callouts use styled components
      } else {
        // Fallback to legacy [type] pattern for backward compatibility
        match = paragraphText.match(/^\[([^\]]+)\]/);
      }

      if (match) {
        const detectedType = match[1].trim();

        // Normalize the type for component lookup (handle case variations)
        const normalizedType = detectedType
          .replace(/([a-z])([A-Z])/g, '$1-$2') // Handle camelCase
          .replace(/\s+/g, '-') // Handle spaces
          .toLowerCase() // Lowercase everything
          .replace(/-+/g, '-'); // Clean up double hyphens

        // Check if the detected type is a valid callout type
        if (calloutTypes[normalizedType]) {
          calloutType = normalizedType;
          calloutConfig = calloutTypes[calloutType];
          calloutTitle = calloutConfig.title; // Use the default title from calloutTypes
        } else {
          // If not a valid type, treat as regular blockquote
          calloutType = 'info';
          calloutConfig = calloutTypes[calloutType];
          calloutTitle = calloutConfig.title; // Use the default title
        }

        // Process the content to ensure proper line breaks
        // Split any text nodes that contain multiple lines into separate paragraphs
        const processedChildren = [];
        
        for (const child of contentNode.children) {
          if (child.type === 'paragraph' && child.children) {
            // Check if any text children contain multiple lines
            const newParagraphChildren = [];
            let hasMultiLineText = false;
            
            for (const textChild of child.children) {
              if (textChild.type === 'text' && textChild.value.includes('\n')) {
                hasMultiLineText = true;
                const lines = textChild.value.split('\n');
                
                for (let i = 0; i < lines.length; i++) {
                  const line = lines[i].trim();
                  if (line) {
                    newParagraphChildren.push({
                      ...textChild,
                      value: line
                    });
                  }
                }
              } else {
                newParagraphChildren.push(textChild);
              }
            }
            
            if (hasMultiLineText && newParagraphChildren.length > 1) {
              // Split into multiple paragraphs
              for (const textChild of newParagraphChildren) {
                processedChildren.push({
                  type: 'paragraph',
                  children: [textChild]
                });
              }
            } else {
              processedChildren.push(child);
            }
          } else {
            processedChildren.push(child);
          }
        }
        
        // Replace the content with processed children
        contentNode.children = processedChildren;
        
        // Remove the first paragraph (the title paragraph)
        contentNode.children.shift();
      }
    }
  }
}

// ====== COMPONENT ROUTING LOGIC ======
// Check if a styled component exists for this callout type

let shouldUseStyledComponent = false;

if (useStyledComponent && isObsidianCallout && calloutConfig.hasStyledComponent) {
  shouldUseStyledComponent = true;
}

// ====== CONTENT PROCESSING FOR STYLED COMPONENTS ======
// For styled components, we'll use AstroMarkdown to properly render all content types
// No need for manual HTML conversion since AstroMarkdown handles all markdown elements
---

{shouldUseStyledComponent ? (
  calloutType === 'llm-response' ? (
    <div class="callout callout-llm-response">
      {calloutTitle && (
        <div class="callout-title">
          <span class="callout-icon">ü§ñ</span>
          <span class="callout-title-text">{calloutTitle}</span>
        </div>
      )}
      <div class="callout-content">
        {contentNode.children.map(child => (
          <AstroMarkdown node={child} data={markdownData} />
        ))}
      </div>
    </div>
  ) : (calloutType === 'warning' || calloutType === 'alert') ? (
    <div class="callout callout-warning">
      {calloutTitle && (
        <div class="callout-title">
          <span class="callout-icon">‚ö†Ô∏è</span>
          <span class="callout-title-text">{calloutTitle}</span>
        </div>
      )}
      <div class="callout-content">
        {contentNode.children.map(child => (
          <AstroMarkdown node={child} data={markdownData} />
        ))}
      </div>
    </div>
  ) : (calloutType === 'info' || calloutType === 'information') ? (
    <div class="callout callout-info">
             {calloutTitle && (
         <div class="callout-title">
           <span class="callout-icon">‚ÑπÔ∏è</span>
           <span class="callout-title-text">
             {calloutTitle}
           </span>
         </div>
       )}
      <div class="callout-content">
        {contentNode.children.map(child => (
          <AstroMarkdown node={child} data={markdownData} />
        ))}
      </div>
    </div>
  ) : calloutType === 'note' ? (
    <div class="callout callout-note">
      {calloutTitle && (
        <div class="callout-title">
          <span class="callout-icon">üìù</span>
          <span class="callout-title-text">{calloutTitle}</span>
        </div>
      )}
      <div class="callout-content">
        {contentNode.children.map(child => (
          <AstroMarkdown node={child} data={markdownData} />
        ))}
      </div>
    </div>
  ) : (calloutType === 'success' || calloutType === 'check') ? (
    <div class="callout callout-success">
      {calloutTitle && (
        <div class="callout-title">
          <span class="callout-icon">‚úÖ</span>
          <span class="callout-title-text">{calloutTitle}</span>
        </div>
      )}
      <div class="callout-content">
        {contentNode.children.map(child => (
          <AstroMarkdown node={child} data={markdownData} />
        ))}
      </div>
    </div>
  ) : (calloutType === 'error' || calloutType === 'danger') ? (
    <div class="callout callout-error">
      {calloutTitle && (
        <div class="callout-title">
          <span class="callout-icon">‚ùå</span>
          <span class="callout-title-text">{calloutTitle}</span>
        </div>
      )}
      <div class="callout-content">
        {contentNode.children.map(child => (
          <AstroMarkdown node={child} data={markdownData} />
        ))}
      </div>
    </div>
  ) : (calloutType === 'tip' || calloutType === 'hint') ? (
    <div class="callout callout-tip">
      {calloutTitle && (
        <div class="callout-title">
          <span class="callout-icon">üí°</span>
          <span class="callout-title-text">{calloutTitle}</span>
        </div>
      )}
      <div class="callout-content">
        {contentNode.children.map(child => (
          <AstroMarkdown node={child} data={markdownData} />
        ))}
      </div>
    </div>
  ) : (calloutType === 'emphasis' || calloutType === 'em') ? (
    <div class="callout callout-emphasis">
      <div class="emphasis-content">
        {contentNode.children.map(child => (
          <AstroMarkdown node={child} data={markdownData} />
        ))}
      </div>
      <div class="emphasis-decoration"></div>
    </div>
  ) : (calloutType === 'quote' || calloutType === 'blockquote') ? (
    <div class="callout callout-quote">
      <div class="quote-content">
        {contentNode.children.map(child => (
          <AstroMarkdown node={child} data={markdownData} />
        ))}
      </div>
    </div>
  ) : (
    // Fallback to base rendering for styled components without specific components
    <div class={`directive-callout directive-${calloutType}`} style={`border: 2px solid ${calloutConfig.borderColor}; background: ${calloutConfig.bgColor};`}>
      <div class="callout-header">
        <span class="callout-icon">{calloutConfig.icon}</span>
        <span class="callout-title">{calloutTitle}</span>
      </div>
      <div class="callout-content">
        {contentNode.children.map(child => (
          <AstroMarkdown node={child} data={markdownData} />
        ))}
      </div>
    </div>
  )
) : calloutConfig.isQuote ? (
  <div class="directive-quote">
    <div class="quote-content">
      {contentNode.children.map(child => (
        <AstroMarkdown node={child} data={markdownData} />
      ))}
    </div>
  </div>
) : calloutType === 'emphasis' || calloutType === 'em' ? (
  <div class="directive-emphasis">
    <div class="emphasis-content">
      {contentNode.children.map(child => (
        <AstroMarkdown node={child} data={markdownData} />
      ))}
    </div>
  </div>
) : (
  <div class={`directive-callout directive-${calloutType}`} style={`border: 2px solid ${calloutConfig.borderColor}; background: ${calloutConfig.bgColor};`}>
    <div class="callout-header">
      <span class="callout-icon">{calloutConfig.icon}</span>
      <span class="callout-title">{calloutTitle}</span>
    </div>
    <div class="callout-content">
      {contentNode.children.map(child => (
        <AstroMarkdown node={child} data={markdownData} />
      ))}
    </div>
  </div>
)}

<style>
  /* ====== STYLED COMPONENT STYLES ====== */
  
  /* LLM Response Callout */
  .callout-llm-response {
    border: 1px solid #e2e8f0;
    border-radius: 0.5rem;
    padding: 1rem;
    margin: 1rem 0;
    background-color: #f8fafc;
  }

  .callout-llm-response .callout-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    font-weight: 600;
  }

  .callout-llm-response .callout-icon {
    font-size: 1.25rem;
  }

  .callout-llm-response .callout-content {
    margin-top: 0.5rem;
    line-height: 1.6;
  }

  /* Warning Callout */
  .callout-warning {
    border: 2px solid rgba(245, 158, 11, 0.4);
    border-left: 6px solid #f59e0b;
    border-radius: 0.75rem;
    padding: 1.25rem;
    margin: 1.5rem 0;
    background: linear-gradient(135deg, 
      rgba(245, 158, 11, 0.12) 0%, 
      rgba(245, 158, 11, 0.06) 100%);
    box-shadow: 0 4px 6px -1px rgba(245, 158, 11, 0.1);
  }

  .callout-warning .callout-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    font-weight: 700;
    color: #d97706;
    font-size: 1.1rem;
  }

  .callout-warning .callout-icon {
    font-size: 1.5rem;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
  }

  .callout-warning .callout-title-text {
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .callout-warning .callout-content {
    margin-top: 0.75rem;
    line-height: 1.7;
    color: #92400e;
    font-weight: 500;
  }

  /* Info Callout */
  .callout-info {
    border: 2px solid rgba(59, 130, 246, 0.4);
    border-left: 6px solid #3b82f6;
    border-radius: 0.75rem;
    padding: 1.25rem;
    margin: 1.5rem 0;
    background: linear-gradient(135deg, 
      rgba(59, 130, 246, 0.1) 0%, 
      rgba(59, 130, 246, 0.05) 100%);
    box-shadow: 0 4px 6px -1px rgba(59, 130, 246, 0.1);
  }

  .callout-info .callout-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    font-weight: 700;
    color: #1d4ed8;
    font-size: 1.1rem;
  }

  .callout-info .callout-icon {
    font-size: 1.5rem;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
  }

  .callout-info .callout-title-text {
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .callout-info .callout-content {
    margin-top: 0.75rem;
    line-height: 1.7;
    color: #1e40af;
    font-weight: 500;
  }

  /* Note Callout */
  .callout-note {
    border: 2px solid rgba(107, 114, 128, 0.4);
    border-left: 6px solid #6b7280;
    border-radius: 0.75rem;
    padding: 1.25rem;
    margin: 1.5rem 0;
    background: linear-gradient(135deg, 
      rgba(107, 114, 128, 0.08) 0%, 
      rgba(107, 114, 128, 0.04) 100%);
    box-shadow: 0 4px 6px -1px rgba(107, 114, 128, 0.1);
  }

  .callout-note .callout-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    font-weight: 700;
    color: #4b5563;
    font-size: 1.1rem;
  }

  .callout-note .callout-icon {
    font-size: 1.5rem;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
  }

  .callout-note .callout-title-text {
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .callout-note .callout-content {
    margin-top: 0.75rem;
    line-height: 1.7;
    color: #374151;
    font-weight: 500;
  }

  /* Success Callout */
  .callout-success {
    border: 2px solid rgba(34, 197, 94, 0.4);
    border-left: 6px solid #22c55e;
    border-radius: 0.75rem;
    padding: 1.25rem;
    margin: 1.5rem 0;
    background: linear-gradient(135deg, 
      rgba(34, 197, 94, 0.1) 0%, 
      rgba(34, 197, 94, 0.05) 100%);
    box-shadow: 0 4px 6px -1px rgba(34, 197, 94, 0.1);
  }

  .callout-success .callout-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    font-weight: 700;
    color: #16a34a;
    font-size: 1.1rem;
  }

  .callout-success .callout-icon {
    font-size: 1.5rem;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
  }

  .callout-success .callout-title-text {
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .callout-success .callout-content {
    margin-top: 0.75rem;
    line-height: 1.7;
    color: #15803d;
    font-weight: 500;
  }

  /* Error Callout */
  .callout-error {
    border: 2px solid rgba(239, 68, 68, 0.4);
    border-left: 6px solid #ef4444;
    border-radius: 0.75rem;
    padding: 1.25rem;
    margin: 1.5rem 0;
    background: linear-gradient(135deg, 
      rgba(239, 68, 68, 0.12) 0%, 
      rgba(239, 68, 68, 0.06) 100%);
    box-shadow: 0 4px 6px -1px rgba(239, 68, 68, 0.1);
  }

  .callout-error .callout-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    font-weight: 700;
    color: #dc2626;
    font-size: 1.1rem;
  }

  .callout-error .callout-icon {
    font-size: 1.5rem;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
  }

  .callout-error .callout-title-text {
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .callout-error .callout-content {
    margin-top: 0.75rem;
    line-height: 1.7;
    color: #b91c1c;
    font-weight: 500;
  }

  /* Tip Callout */
  .callout-tip {
    border: 2px solid rgba(168, 85, 247, 0.4);
    border-left: 6px solid #a855f7;
    border-radius: 0.75rem;
    padding: 1.25rem;
    margin: 1.5rem 0;
    background: linear-gradient(135deg, 
      rgba(168, 85, 247, 0.1) 0%, 
      rgba(168, 85, 247, 0.05) 100%);
    box-shadow: 0 4px 6px -1px rgba(168, 85, 247, 0.1);
  }

  .callout-tip .callout-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    font-weight: 700;
    color: #9333ea;
    font-size: 1.1rem;
  }

  .callout-tip .callout-icon {
    font-size: 1.5rem;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
  }

  .callout-tip .callout-title-text {
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .callout-tip .callout-content {
    margin-top: 0.75rem;
    line-height: 1.7;
    color: #7c3aed;
    font-weight: 500;
  }

  /* Emphasis Callout */
  .callout-emphasis {
    position: relative;
    margin: 1.75rem 0;
    padding: 1.5rem 1.25rem;
    background: linear-gradient(135deg, 
      rgba(59, 130, 246, 0.08) 0%, 
      rgba(59, 130, 246, 0.04) 100%);
    border-left: 5px solid #3b82f6;
    border-radius: 0 12px 12px 0;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.08);
    overflow: hidden;
  }

  .callout-emphasis .emphasis-content {
    font-size: 1.15em;
    line-height: 1.65;
    color: #1e40af;
    font-weight: 600;
    position: relative;
    z-index: 2;
  }

  .callout-emphasis .emphasis-decoration {
    position: absolute;
    top: 1rem;
    left: -0.75rem;
    width: 2.5rem;
    height: 2.5rem;
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    z-index: 1;
  }

  .callout-emphasis .emphasis-decoration::before {
    content: "üí°";
    font-size: 1.25rem;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.2));
  }

  /* Quote Callout */
  .callout-quote {
    position: relative;
    margin: 1.75rem 0;
    padding: 1.75rem 1.5rem;
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.06) 0%, 
      rgba(255, 255, 255, 0.02) 100%);
    border-left: 5px solid #64748b;
    border-radius: 0 12px 12px 0;
    font-style: italic;
    box-shadow: 0 4px 12px rgba(100, 116, 139, 0.08);
  }

  .callout-quote .quote-content {
    font-size: 1.125em;
    line-height: 1.75;
    color: #475569;
    position: relative;
    z-index: 2;
    font-weight: 500;
  }

  /* Common callout styles */
  .callout .callout-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    font-weight: 700;
    font-size: 1.1rem;
  }

  .callout .callout-icon {
    font-size: 1.5rem;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
  }

  .callout .callout-title-text {
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .callout .callout-content {
    margin-top: 0.75rem;
    line-height: 1.7;
    font-weight: 500;
  }

  .callout .callout-content p {
    margin: 0.75rem 0;
    line-height: 1.6;
  }

  .callout .callout-content p:first-child {
    margin-top: 0;
  }

  .callout .callout-content p:last-child {
    margin-bottom: 0;
  }

  /* Ensure proper spacing between paragraphs */
  .callout .callout-content > * + * {
    margin-top: 0.75rem;
  }

  /* Ensure list items have proper spacing */
  .callout .callout-content ul,
  .callout .callout-content ol {
    margin: 0.75rem 0;
    padding-left: 1.5rem;
  }

  .callout .callout-content li {
    margin: 0.25rem 0;
  }

  /* Enhanced styling for links within callouts */
  .callout .callout-content a {
    text-decoration: underline;
    text-decoration-color: rgba(255, 255, 255, 0.4);
    transition: all 0.2s ease;
  }

  .callout .callout-content a:hover {
    text-decoration-color: currentColor;
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .callout-warning {
      background: linear-gradient(135deg, 
        rgba(245, 158, 11, 0.15) 0%, 
        rgba(245, 158, 11, 0.08) 100%);
      border-color: rgba(245, 158, 11, 0.5);
    }
    
    .callout-warning .callout-title {
      color: #fbbf24;
    }
    
    .callout-warning .callout-content {
      color: #fcd34d;
    }

    .callout-info {
      background: linear-gradient(135deg, 
        rgba(59, 130, 246, 0.12) 0%, 
        rgba(59, 130, 246, 0.06) 100%);
      border-color: rgba(59, 130, 246, 0.5);
    }
    
    .callout-info .callout-title {
      color: #60a5fa;
    }
    
    .callout-info .callout-content {
      color: #93c5fd;
    }

    .callout-note {
      background: linear-gradient(135deg, 
        rgba(107, 114, 128, 0.12) 0%, 
        rgba(107, 114, 128, 0.06) 100%);
      border-color: rgba(107, 114, 128, 0.5);
    }
    
    .callout-note .callout-title {
      color: #9ca3af;
    }
    
    .callout-note .callout-content {
      color: #d1d5db;
    }

    .callout-success {
      background: linear-gradient(135deg, 
        rgba(34, 197, 94, 0.12) 0%, 
        rgba(34, 197, 94, 0.06) 100%);
      border-color: rgba(34, 197, 94, 0.5);
    }
    
    .callout-success .callout-title {
      color: #4ade80;
    }
    
    .callout-success .callout-content {
      color: #86efac;
    }

    .callout-error {
      background: linear-gradient(135deg, 
        rgba(239, 68, 68, 0.15) 0%, 
        rgba(239, 68, 68, 0.08) 100%);
      border-color: rgba(239, 68, 68, 0.5);
    }
    
    .callout-error .callout-title {
      color: #f87171;
    }
    
    .callout-error .callout-content {
      color: #fca5a5;
    }

    .callout-tip {
      background: linear-gradient(135deg, 
        rgba(168, 85, 247, 0.12) 0%, 
        rgba(168, 85, 247, 0.06) 100%);
      border-color: rgba(168, 85, 247, 0.5);
    }
    
    .callout-tip .callout-title {
      color: #c084fc;
    }
    
    .callout-tip .callout-content {
      color: #d8b4fe;
    }

    .callout-emphasis {
      background: linear-gradient(135deg, 
        rgba(59, 130, 246, 0.15) 0%, 
        rgba(59, 130, 246, 0.08) 100%);
      border-color: #60a5fa;
    }
    
    .callout-emphasis .emphasis-content {
      color: #93c5fd;
    }
    
    .callout-emphasis .emphasis-decoration {
      background: linear-gradient(135deg, #60a5fa, #3b82f6);
    }

    .callout-quote {
      background: linear-gradient(135deg, 
        rgba(255, 255, 255, 0.08) 0%, 
        rgba(255, 255, 255, 0.03) 100%);
      border-color: #94a3b8;
    }
    
    .callout-quote .quote-content {
      color: #cbd5e1;
    }
    

  }

  /* ====== LEGACY DIRECTIVE STYLES ====== */
  
  /* Quote directive styles */
  .directive-quote {
    margin: 1.5rem 0;
    padding: 1.5rem 1.25rem;
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.05) 0%, 
      rgba(255, 255, 255, 0.02) 100%);
    border-left: 4px solid #64748b;
    border-radius: 0 8px 8px 0;
    position: relative;
    font-style: italic;
  }
  
  .directive-quote .quote-content {
    font-size: 1.1em;
    line-height: 1.7;
    color: #cbd5e1;
    position: relative;
    z-index: 1;
  }

  /* Emphasis directive styles */
  .directive-emphasis {
    margin: 1.5rem 0;
    padding: 1.25rem;
    background: linear-gradient(135deg, 
      rgba(59, 130, 246, 0.08) 0%, 
      rgba(59, 130, 246, 0.04) 100%);
    border-left: 4px solid #3b82f6;
    border-radius: 0 8px 8px 0;
    position: relative;
  }
  
  .directive-emphasis .emphasis-content {
    font-size: 1.1em;
    line-height: 1.6;
    color: #e2e8f0;
    font-weight: 500;
  }
  
  .directive-emphasis::before {
    content: "üí°";
    position: absolute;
    left: -0.5rem;
    top: 1rem;
    background: #1e293b;
    padding: 0.25rem;
    border-radius: 50%;
    font-size: 0.875rem;
  }

  /* Standard callout styles */
  .directive-callout {
    margin: 1.5rem 0;
    padding: 1.25rem;
    border-radius: 8px;
    position: relative;
  }
  
  /* Warning/Alert styles */
  .directive-warning, .directive-alert {
    background: linear-gradient(135deg, rgba(245, 158, 11, 0.1) 0%, rgba(245, 158, 11, 0.05) 100%);
    border: 1px solid rgba(245, 158, 11, 0.3);
  }
  .directive-warning .callout-header, .directive-alert .callout-header {
    color: #fbbf24;
  }
  
  /* Info styles */
  .directive-info, .directive-information {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.08) 0%, rgba(59, 130, 246, 0.04) 100%);
    border: 1px solid rgba(59, 130, 246, 0.3);
  }
  .directive-info .callout-header, .directive-information .callout-header {
    color: #60a5fa;
  }
  
  /* Success styles */
  .directive-success, .directive-check {
    background: linear-gradient(135deg, rgba(34, 197, 94, 0.08) 0%, rgba(34, 197, 94, 0.04) 100%);
    border: 1px solid rgba(34, 197, 94, 0.3);
  }
  .directive-success .callout-header, .directive-check .callout-header {
    color: #4ade80;
  }
  
  /* Error styles */
  .directive-error, .directive-danger {
    background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(239, 68, 68, 0.05) 100%);
    border: 1px solid rgba(239, 68, 68, 0.3);
  }
  .directive-error .callout-header, .directive-danger .callout-header {
    color: #f87171;
  }
  
  /* Tip styles */
  .directive-tip, .directive-hint {
    background: linear-gradient(135deg, rgba(168, 85, 247, 0.08) 0%, rgba(168, 85, 247, 0.04) 100%);
    border: 1px solid rgba(168, 85, 247, 0.3);
  }
  .directive-tip .callout-header, .directive-hint .callout-header {
    color: #c084fc;
  }
  
  /* Note styles */
  .directive-note {
    background: linear-gradient(135deg, rgba(107, 114, 128, 0.08) 0%, rgba(107, 114, 128, 0.04) 100%);
    border: 1px solid rgba(107, 114, 128, 0.3);
  }
  .directive-note .callout-header {
    color: #9ca3af;
  }
  
  .directive-callout .callout-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
    font-weight: 600;
  }
  
  .directive-callout .callout-icon {
    font-size: 1.25rem;
  }
  
  .directive-callout .callout-title {
    font-size: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .directive-callout .callout-content, 
  .directive-emphasis .emphasis-content,
  .directive-quote .quote-content {
    color: #e2e8f0;
    line-height: 1.6;
    overflow-x: auto;
    max-width: 100%;
  }
  
  .directive-callout .callout-content > *:first-child,
  .directive-emphasis .emphasis-content > *:first-child,
  .directive-quote .quote-content > *:first-child {
    margin-top: 0;
  }
  
  .directive-callout .callout-content > *:last-child,
  .directive-emphasis .emphasis-content > *:last-child,
  .directive-quote .quote-content > *:last-child {
    margin-bottom: 0;
  }

  /* Content styling inside callouts */
  .callout-content iframe, 
  .emphasis-content iframe, 
  .quote-content iframe {
    max-width: 100%;
    height: auto;
    border: none;
  }

  .callout-content table, 
  .emphasis-content table, 
  .quote-content table {
    width: 100%;
    border-collapse: collapse;
  }

  .callout-content img, 
  .emphasis-content img, 
  .quote-content img {
    max-width: 100%;
    height: auto;
    display: block;
  }
</style>
