---
import type { Root, RootContent, Parent, PhrasingContent, Paragraph, CitationNode, CitationsNode } from 'mdast';
import type { Root as HastRoot } from 'hast';
import { unified } from 'unified';
import remarkRehype from 'remark-rehype';
import { toHtml } from 'hast-util-to-html';
import remarkCitations from '@utils/markdown/remarkCitations';

interface Props {
  node: {
    type: string;
    children?: RootContent[];
    value?: string;
    data?: {
      hProperties?: Record<string, unknown>;
    };
  };
  data?: Record<string, unknown>;
}

const { node } = Astro.props;

// Debug: Log just the essential parts
console.log('=== ArticleCallout Debug ===');
console.log('Node type:', node?.type);
console.log('Children:', node?.children?.map(child => ({type: child.type})));

// Extract callout metadata from first paragraph
let calloutType = 'info';
let calloutTitle = '';
let contentNode: Root = { 
  type: 'root',
  children: node.children || []
};

if (node.children && node.children.length > 0) {
  const firstParagraph = node.children[0] as Paragraph;
  if (firstParagraph.type === 'paragraph' && firstParagraph.children && firstParagraph.children.length > 0) {
    const firstChild = firstParagraph.children[0] as PhrasingContent & { value?: string };
    if (firstChild.value) {
      const match = firstChild.value.match(/^\[!([^\]]+)\]\s*(.*)$/);
      if (match) {
        calloutType = match[1].trim();
        calloutTitle = match[2].trim() || calloutType;
        // Remove the first paragraph from content
        contentNode = {
          type: 'root',
          children: node.children.slice(1)
        };
      }
    }
  }
}

console.log('Extracted:', { calloutType, calloutTitle });

// First process citations
const citationsResult = await unified()
  .use(remarkCitations)
  .run(contentNode);

// Convert unified result to Root type
const citationsRoot = {
  type: 'root',
  children: (citationsResult as unknown as Root).children
};

// Get citations nodes if any were found
const citationsNodes = citationsRoot.children.filter((node): node is CitationNode | CitationsNode => 
  node.type === 'citations' || node.type === 'citation'
);

// Remove citations nodes from content before converting to HTML
const contentWithoutCitations: Root = {
  type: 'root',
  children: citationsRoot.children.filter((node) => 
    node.type !== 'citations' && node.type !== 'citation'
  )
};

// Convert remaining content to HTML
const processedContent = await unified()
  .use(remarkRehype)
  .run(contentWithoutCitations)
  .then((result) => toHtml(result as unknown as HastRoot));

console.log('Extracted citations:', citationsNodes);

// Convert citations nodes to HTML
const citationsHtml = await Promise.all(citationsNodes.map(async (node) => {
  const rootNode: Root = {
    type: 'root',
    children: [node]
  };
  const citationHtml = await unified()
    .use(remarkRehype)
    .run(rootNode)
    .then(result => toHtml(result as unknown as HastRoot));
  return citationHtml;
}));

console.log('Citations HTML:', citationsHtml);

---

<article class={`callout callout-${calloutType.toLowerCase()}`} data-debug-enabled>
  <header class="callout-header">{calloutTitle}</header>
  <div class="callout-content" set:html={processedContent}>
  </div>
  {citationsNodes.map((citationNode) => {
    const nodeForSelf = {
      type: citationNode.type,
      children: 'children' in citationNode ? citationNode.children : undefined,
      value: 'value' in citationNode ? citationNode.value : undefined,
      data: citationNode.data
    } as Props['node'];
    return <Astro.self node={nodeForSelf} data={{}} />;
  })}
</article>

<script>
  interface CalloutDebugData {
    type: string;
    header: string | undefined;
    content: string | undefined;
    astNode: any | undefined;
  }

  declare global {
    interface Window {
      calloutDebug: CalloutDebugData[];
    }
  }

  // Make callout data available in browser console
  const callouts = document.querySelectorAll('.callout[data-debug-enabled]');
  
  callouts.forEach((callout, index) => {
    const debugData = {
      type: callout.classList.toString().split('callout-')[1],
      header: callout.querySelector('.callout-header')?.textContent,
      content: callout.querySelector('.callout-content')?.innerHTML,
      astNode: callout.getAttribute('data-ast') ? JSON.parse(callout.getAttribute('data-ast') || '') : undefined
    };
    
    // Add to window object for console access
    if (!window.calloutDebug) {
      window.calloutDebug = [];
    }
    window.calloutDebug[index] = debugData;
  });

  console.log('Callout debug data available at window.calloutDebug');
</script>

<style>
  .callout {
    margin: 1rem 0;
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: var(--clr-lossless-primary-dark);
    border: 1px solid var(--clr-lossless-accent--brightest);
  }

  .callout-header {
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: var(--clr-lossless-accent--brightest);
  }

  .callout-content {
    color: var(--clr-lossless-primary-light);
  }
</style>