---
import type { Root, RootContent, Parent, PhrasingContent, Paragraph, CitationNode, CitationsNode } from 'mdast';
import AstroMarkdown from '../AstroMarkdown.astro';

interface Props {
  node: {
    type: string;
    children?: RootContent[];
    value?: string;
    data?: {
      hProperties?: Record<string, unknown>;
    };
  };
  data?: Record<string, unknown>;
}

const { node, data = { path: '/default-path' } } = Astro.props;

console.log('=== ArticleCallout Debug ===');
console.log('Node type:', node?.type);
console.log('Children:', node?.children?.map(child => ({type: child.type})));

// Default values
let calloutType = 'info';
let calloutTitle = '';

let contentNode: Root = { 
  type: 'root',
  children: node.children || []
};

// ====== TITLE EXTRACTION LOGIC ======

if (contentNode.children.length > 0) {
  const firstChild = contentNode.children[0];

  if (firstChild.type === 'paragraph' && Array.isArray(firstChild.children)) {
    const textNode = firstChild.children.find(child => child.type === 'text');

    if (textNode && typeof textNode.value === 'string') {
      const match = textNode.value.match(/^\[!(.*?)\]/);
      if (match) {
        calloutTitle = match[1].trim();

        // Remove the [!Title] from the paragraph text
        textNode.value = textNode.value.replace(/^\[!(.*?)\]\s*/, '');

        // If the paragraph is now empty after removing, delete it
        const isParagraphEmpty = firstChild.children.every(child => 
          child.type === 'text' && child.value.trim() === ''
        );
        if (isParagraphEmpty) {
          contentNode.children.shift(); // Remove the first child
        }
      }
    }
  }
}

// ====== End title extraction ======
---

<article class={`callout callout-${calloutType.toLowerCase()}`} data-debug-enabled>
  {calloutTitle && (
    <div class="callout-header">
      {calloutTitle}
    </div>
  )}
  <div class="callout-content">
    {contentNode.children.map(child => (
      <AstroMarkdown node={child} data={data} />
    ))}
  </div>
</article>

<style>
  .callout {
    margin: 1rem 0;
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: var(--clr-lossless-primary-dark);
    border: 1px solid var(--clr-lossless-accent--brightest);
  }

  .callout-header {
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: var(--clr-lossless-accent--brightest);
    font-size: 1.1rem;
  }

 .callout {
  margin: 1rem 0;
  padding: 1rem;
  border-radius: 0.5rem;
  background-color: var(--clr-lossless-primary-dark);
  border: 1px solid var(--clr-lossless-accent--brightest);
  overflow: hidden; /* NEW: basic clipping */
}

.callout-content {
  color: var(--clr-lossless-primary-light);
  overflow-x: auto; /* NEW: allow horizontal scroll if needed */
  max-width: 100%;   /* NEW: prevent growing beyond container */
}

/* OPTIONAL: Style iframes inside callouts */
.callout-content iframe {
  max-width: 100%;
  height: auto;
  border: none;
}

/* OPTIONAL: Wrap tables nicely inside callouts */
.callout-content table {
  width: 100%;
  border-collapse: collapse;
}

/* Ensure images shrink inside callouts */
.callout-content img {
  max-width: 100%;
  height: auto;
  display: block;
}

</style>
