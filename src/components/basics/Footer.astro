---
/**
 * Footer.astro
 *
 * Dynamic, responsive footer component.
 * - Loads link columns from site/src/content/basics/footerLinks.json
 * - Loads social icons from site/src/content/footer/socialIcons.json
 * - Loads org locations from site/src/content/basics/orgLocations.json
 * - Renders left (social) and right (link columns) sections
 * - All mapping and layout logic handled here. No hardcoded links or icons.
 *
 * Data Flow:
 *   Footer.astro (entry)
 *     → Loads footerLinks.json, socialIcons.json, and orgLocations.json
 *       → Maps links, icons, and locations to columns/rows
 *         → Renders left and right columns
 *           → Final HTML output
 */

import { readFileSync } from 'fs';
import path from 'path';
import ThinGradientBleedSeparator from './separators/ThinGradientBleedSeparator.astro';
import { getImageForPath } from '../../utils/imageMapping';

// Helper to resolve JSON file paths
const siteRoot = import.meta.env.SITE ? new URL(import.meta.env.SITE).pathname : '';
const footerLinksPath = path.resolve(siteRoot, 'src/content/basics/footerLinks.json');
const socialIconsPath = path.resolve(siteRoot, 'src/content/basics/socialIcons.json');
const orgLocationsPath = path.resolve(siteRoot, 'src/content/basics/orgLocations.json');

// ===============================
// TypeScript interface for Footer Links JSON
// ===============================
/**
 * FooterLinks interface defines the structure of the footerLinks.json file.
 * - Each property key is a column header (string)
 * - Each value is an array of objects, each with a single key-value pair:
 *   { "Link Label": "/path" }
 *
 * Example:
 * {
 *   "Column Header": [
 *     { "Link Label": "/path" },
 *     ...
 *   ]
 * }
 */
interface FooterLinks {
  [header: string]: Array<{ [label: string]: string }>;
}

// Load and parse JSON data
let footerLinks: FooterLinks = {};
let socialIcons = [];
let orgLocations = { company_name: '', locations: [] };
try {
  footerLinks = JSON.parse(readFileSync(footerLinksPath, 'utf-8'));
  socialIcons = JSON.parse(readFileSync(socialIconsPath, 'utf-8'));
  orgLocations = JSON.parse(readFileSync(orgLocationsPath, 'utf-8'));
} catch (err) {
  console.error('Error loading footer data:', err);
}

// ===============================
// No grouping needed: orgLocations.locations will be rendered flat in grid
// ===============================
// We rely on CSS grid to handle column/row layout, which is the idiomatic Astro/HTML/CSS approach.
// This is different from React or JSX, where we would typically use JavaScript to handle layout logic.

---
<ThinGradientBleedSeparator />
<footer class="footer-container">
  <div class="footer-left">
    <div class="footer-social-row">
      {socialIcons.map(icon => {
        const img = getImageForPath(icon.icon, icon.label);
        return (
          <a href={icon.url} aria-label={icon.label} target="_blank" rel="noopener noreferrer" class="footer-social-icon">
            <img src={img.src} alt={img.alt} />
          </a>
        );
      })}
    </div>
    <div class="footer-bottom-row">
      <div class="org-info">
        <div class="org-company">{orgLocations.company_name}</div>
        <div class="org-locations">
          <!-- Render org locations as a flat list; CSS grid handles column/row layout -->
          <div class="org-locations-grid">
            {Array.isArray(orgLocations.locations) && orgLocations.locations.map(loc => (
              <div class="org-location">
                <div class="org-location-name">{loc.name}</div>
                <div class="org-address">
                  {loc.address.street}<br />
                  {loc.address.city}, {loc.address.state}{loc.address.zip ? ` ${loc.address.zip}` : ''}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="footer-right">
    {Object.entries(footerLinks).reverse().map(([header, links]) => (
      <div class="footer-link-column">
        <div class="footer-link-header">{header}</div>
        <ul>
          {/* Defensive: Only map if links is an array */}
          {Array.isArray(links) && links.map(linkObj => {
            // Each linkObj is an object with a single key-value pair: { label: url }
            const [label, url] = Object.entries(linkObj)[0];
            return <li><a href={url}>{label}</a></li>;
          })}
        </ul>
      </div>
    ))}
  </div>
</footer>

<style>
.footer-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
  padding: 2rem 1.5rem;
  color: var(--footer-fg, #fff);
  max-width: 1400px;
  margin: 0 auto;
}
.footer-left {
  display: flex;
  flex-direction: column;
  gap: 1.25rem;
  min-width: 180px;
}
.footer-social-row {
  display: flex;
  flex-direction: row;
  gap: 1rem;
}
.footer-social-icon {
  color: currentColor; /* Ensure color is set for currentColor to work */
}

.footer-social-icon img {
  width: 28px;
  height: 28px;
  filter: grayscale(0.2) contrast(1.1);
  transition: filter 0.2s;
  color: inherit; /* Inherit color from parent */
  fill: currentColor; /* Ensure SVG fills use currentColor */
}
.footer-social-icon:hover img {
  filter: grayscale(0) contrast(1.4);
}
.footer-bottom-row {
  font-size: 0.95em;
  color: var(--footer-muted, #bbb);
  display: flex;
  flex-direction: column;
  gap: 0.5em;
}
.org-info {
  display: flex;
  flex-direction: column;
  gap: 0.3em;
}
.org-company {
  font-weight: 600;
  font-size: 1em;
}
.org-locations {
  display: block;
}
.org-locations-grid {
  display: grid;
  grid-auto-flow: column;
  grid-template-rows: repeat(2, auto);
  gap: 0.5em 1.5em;
  /* 
    This CSS grid setup will create a true 2-row grid with as many columns as needed.
    The grid-auto-flow: column property tells the grid to automatically create new columns when the grid items exceed the available space in the current row.
    The grid-template-rows: repeat(2, auto) property sets the grid to have 2 rows with automatic height.
  */
}
.org-locations-col {
  display: flex;
  flex-direction: column;
  gap: 0.25em;
}
.org-location-name {
  font-weight: 500;
  font-size: 0.98em;
}
.org-address {
  font-size: 0.93em;
  color: var(--footer-muted, #aaa);
}
.footer-right {
  display: grid;
  grid-template-columns: repeat(2, auto);
  gap: 2.5rem;
  justify-content: end;
  text-align: right;
  justify-self: end; /* Align to the right side of the grid cell */
}
.footer-link-column {
  min-width: 140px;
  /* Ensure the content of each column aligns right */
  text-align: right;
}
.footer-link-header {
  font-weight: 700;
  margin-bottom: 0.5em;
  font-size: 1.07em;
}
.footer-link-column ul {
  list-style: none !important;
  padding: 0;
  margin: 0;
  border-left: none !important;
}
.footer-link-column li {
  margin-bottom: 0.45em;
  list-style: none !important;
  margin-left: 0 !important;
}

/* Override global markdown styles for footer lists */
.footer-container ul {
  list-style: none !important;
  margin-left: 0 !important;
  border-left: none !important;
}

.footer-container li {
  list-style: none !important;
  margin-left: 0 !important;
}
.footer-link-column a {
  color: inherit;
  text-decoration: none;
  transition: color 0.2s;
}
.footer-link-column a:hover {
  color: var(--footer-link-hover, #6cf);
}
/* Mobile breakpoint */
@media (max-width: 768px) {
  .footer-container {
    grid-template-columns: 1fr;
    grid-template-rows: auto auto;
    gap: 2rem;
  }
  
  /* Reverse the order of grid items on mobile */
  .footer-left {
    grid-row: 2;
  }
  
  .footer-right {
    grid-row: 1;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin-right: 0;
    text-align: left;
    justify-self: start;
  }
  
  .footer-link-column {
    text-align: left;
    width: 100%;
  }
  
  .footer-link-header {
    font-size: clamp(1em, 4vw, 1.1em);
  }
  
  .footer-link-column a {
    font-size: clamp(0.85em, 3.5vw, 0.95em);
  }
  
  .org-company {
    font-size: clamp(0.95em, 4vw, 1.1em);
  }
  
  .org-location-name {
    font-size: clamp(0.9em, 3.5vw, 0.98em);
  }
  
  .org-address {
    font-size: clamp(0.85em, 3vw, 0.93em);
  }
}
</style>
