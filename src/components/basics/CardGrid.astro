---
import ToolCard from "@components/tool-components/ToolCard.astro";
import BareToolCard from "@components/tool-components/BareToolCard.astro";

interface Props {
  gap?: string;
  minCardWidth?: string;
  tools: Array<Record<string, any>>;
  filterTag?: string;
}

const { gap = "2rem", tools = [], filterTag } = Astro.props;

// Filter tools by tag if filterTag is provided
const filteredTools = filterTag
  ? tools.filter(tool => 
      tool.tags?.some((tag: string) => tag === filterTag)
    )
  : tools;

const toolsWithImages = filteredTools.filter(tool => tool.image || tool.og_image || tool.og_image_url || tool.og_screenshot_url);
const toolsWithoutImages = filteredTools.filter(tool => !(tool.image || tool.og_image || tool.og_image_url || tool.og_screenshot_url));

toolsWithImages.forEach(tool => {
  if (!tool.id) throw new Error("Missing tool.id in CardGrid");
});

// Pagination settings â€” TagColumn will use this value
const itemsPerPage = 50;
---

<div class="cards-container" data-items-per-page={itemsPerPage}>
  <div class="filter-header" id="filter-header">
    <h2 class="filter-title" id="filter-title">All Tools</h2>
    <p class="filter-count" id="filter-count">{filteredTools.length} tools</p>
  </div>
  <section class="tools-section">
    <div class="card-grid" id="tool-card-grid">
      <!-- Render ALL ToolCards in DOM -->
      {toolsWithImages.map(tool => (
        <ToolCard 
          {...tool} 
          id={tool.id}
          filePath={tool.filePath} 
          class="tool-card" 
          data-tags={JSON.stringify(tool.tags || [])} 
        />
      ))}
      {toolsWithoutImages.map(tool => (
        <BareToolCard 
          {...tool} 
          filePath={tool.filePath} 
          class="tool-card" 
          data-tags={JSON.stringify(tool.tags || [])} 
        />
      ))}
    </div>

    {filteredTools.length > itemsPerPage && (
      <button id="load-more" class="load-more-btn">Load More</button>
    )}
  </section>

  {filteredTools.length === 0 && <p class="no-tools">No tools found</p>}
</div>

<style define:vars={{ gap }}>
  .cards-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .filter-header {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    padding: 1rem 0;
    border-bottom: 1px solid var(--clr-lossless-ui-btn-border);
    margin-bottom: 1rem;
  }

  .filter-title {
    font-size: var(--fs-600);
    font-weight: var(--fw-bold);
    color: var(--clr-heading);
    margin: 0;
    line-height: 1.2;
  }

  .filter-count {
    font-size: var(--fs-300);
    color: var(--clr-body);
    margin: 0;
    opacity: 0.8;
  }

  .card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--gap);
    width: 100%;
    align-items: start;
  }

  .tools-section {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .no-tools {
    text-align: center;
    color: var(--clr-body);
    font-style: italic;
    padding: 2rem;
  }

  .load-more-btn {
    margin-top: 1rem;
    background-color: var(--clr-lossless-primary-glass);
    color: white;
    border: none;
    padding: 0.6rem 1.2rem;
    border-radius: 0.5rem;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.2s ease;
  }

  .load-more-btn:hover {
    background-color: var(--clr-lossless-primary-dark);
  }

  @media (max-width: 600px) {
    .card-grid {
      grid-template-columns: 1fr;
    }
    
    .filter-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
  }
</style>

<script>
  function trainCaseToNormalCase(tag) {
    return tag
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  function updateFilterHeader(selectedTags, visibleCount) {
    const filterTitle = document.getElementById('filter-title');
    const filterCount = document.getElementById('filter-count');
    
    if (!filterTitle || !filterCount) return;
    
    if (selectedTags.length === 0) {
      filterTitle.textContent = 'All Tools';
    } else if (selectedTags.length === 1) {
      filterTitle.textContent = trainCaseToNormalCase(selectedTags[0]);
    } else {
      const firstTag = trainCaseToNormalCase(selectedTags[0]);
      const remainingCount = selectedTags.length - 1;
      filterTitle.textContent = `${firstTag} + ${remainingCount} more`;
    }
    
    const toolText = visibleCount === 1 ? 'tool' : 'tools';
    filterCount.textContent = `${visibleCount} ${toolText}`;
  }

  // Listen for custom events from TagColumn
  document.addEventListener('filtersChanged', (event) => {
    const customEvent = event as CustomEvent;
    const { selectedTags, visibleCount } = customEvent.detail;
    updateFilterHeader(selectedTags, visibleCount);
  });

  // Initialize header on page load
  document.addEventListener('DOMContentLoaded', () => {
    // Check for URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const tagsParam = urlParams.get('tags');
    
    if (tagsParam) {
      const selectedTags = tagsParam.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
      const allCards = Array.from(document.querySelectorAll('.tool-card'));
      const visibleCards = allCards.filter(card => {
        const htmlCard = card as HTMLElement;
        const tags = JSON.parse(htmlCard.dataset.tags || '[]');
        return selectedTags.every(tag => tags.includes(tag));
      });
      updateFilterHeader(selectedTags, visibleCards.length);
    }
  });
</script>
