---
/**
 * AlternatingSideImage.astro
 * 
 * A component that automatically renders multiple FeatureSideImage components
 * with alternating image positions based on JSON data.
 * 
 * @component
 * @example
 * ```astro
 * <AlternatingSideImage jsonPath="messages/featureSideImage.json" />
 * ```
 */

import FeatureSideImage from "@components/basics/FeatureSideImage.astro";
import ButtonLoud from "@components/basics/cta/ButtonLoud.astro";
import TextCTA from "@components/basics/cta/TextCTA.astro";
import path from "node:path";
import fs from "node:fs";
import { getImageForPath } from "@utils/imageMapping";

// Define the interface for feature data
interface FeatureData {
  label: string;
  title: string;
  details: string;
  imageSide: "left" | "right";
  ctaText: string;
  ctaUrl: string;
  imageUrl: string;
  imageClasses?: string; // Optional CSS classes for the image container
  maskHeight?: string;   // Optional height for the image mask (e.g., "300px", "50%")
  maskWidth?: string;    // Optional width for the image mask (e.g., "100%", "400px")
}

interface Props {
  /**
   * Path to the JSON file containing feature data, relative to src/content/
   * @example "messages/featureSideImage.json"
   */
  jsonPath: string;
  
  /**
   * Additional CSS classes to apply to the container
   */
  classes?: string;
}

const { jsonPath, classes = "" } = Astro.props;

// Load the feature data from the JSON file
// Use path.join with process.cwd() to ensure correct path resolution
const fullPath = path.join(process.cwd(), "src/content", jsonPath);
let features: FeatureData[] = [];

try {
  // Read and parse the JSON file
  const fileContent = fs.readFileSync(fullPath, "utf-8");
  features = JSON.parse(fileContent);
  
  // Log success for debugging
  console.log(`Successfully loaded ${features.length} features from ${jsonPath}`);
} catch (error) {
  // Log error for debugging
  console.error(`Error loading feature data from ${fullPath}:`, error);
}

// Process features to create image objects using the utility function
const processedFeatures = features.map(feature => ({
  ...feature,
  // Use the getImageForPath utility to handle both remote and local images
  processedImage: getImageForPath(feature.imageUrl, feature.title)
}));

---

<div class:list={["alternating-side-image-container", classes]}>
  {processedFeatures.map((feature) => (
    <FeatureSideImage
      label={feature.label}
      title={feature.title}
      details={feature.details}
      image={feature.processedImage}
      imageSide={feature.imageSide}
      classes={feature.imageClasses}
      maskHeight={feature.maskHeight}
      maskWidth={feature.maskWidth}
    >
      <div slot="content-footer" class="cta-container">
        <TextCTA href={feature.ctaUrl} text={feature.ctaText} />
      </div>
    </FeatureSideImage>
  ))}
</div>

<style>
  .alternating-side-image-container {
    display: flex;
    flex-direction: column;
    gap: 4rem;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  /* Maintain spacing for the CTA container */
  :global(.cta-container) {
    margin-top: 1rem;
  }
  /* Mobile: Reduce vertical gap for proportional spacing */
  @media (max-width: 768px) {
    .alternating-side-image-container {
      gap: 2rem;
    }
  }
</style>