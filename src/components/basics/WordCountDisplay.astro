---
/**
 * WordCountDisplay.astro
 * 
 * A reusable component for displaying word counts with consistent styling.
 * 
 * @component
 * @param {number} count - The word count to display
 * @param {string} [prefix=''] - Optional prefix text (e.g., 'Total:')
 * @param {string} [suffix='words'] - Optional suffix text (defaults to 'words')
 * @param {string} [className=''] - Additional CSS classes
 * @param {boolean} [showIcon=true] - Whether to show a word count icon
 */

interface Props {
  count: number;
  prefix?: string;
  suffix?: string;
  className?: string;
  showIcon?: boolean;
}

const { 
  count = 0, 
  prefix = '', 
  suffix = 'words',
  className = '',
  showIcon = true
} = Astro.props;

// Format large numbers (e.g., 1.5k, 2.3M)
const formatCount = (num: number): string => {
  if (num >= 1000000) {
    return `${(num / 1000000).toFixed(1)}M`;
  } else if (num >= 1000) {
    return `${(num / 1000).toFixed(1)}k`;
  }
  return num.toString();
};
---

<div class={`flex items-center text-sm text-gray-400 ${className}`}>
  {showIcon && (
    <svg 
      class="w-4 h-4 mr-1" 
      fill="none" 
      stroke="currentColor" 
      viewBox="0 0 24 24" 
      xmlns="http://www.w3.org/2000/svg"
    >
      <path 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        stroke-width="2" 
        d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
      ></path>
    </svg>
  )}
  {prefix && <span class="mr-1">{prefix}</span>}
  <span class="font-medium">{formatCount(count)}</span>
  {suffix && <span class="ml-1">{suffix}</span>}
</div>
