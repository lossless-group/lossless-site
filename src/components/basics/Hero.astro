---
/**
 * Hero.astro
 * 
 * A clean, subtle hero component with smooth animations and minimal visual styling.
 * This component provides a more understated design while maintaining animation capabilities.
 * 
 * @component
 * @example
 * ```astro
 * <Hero
 *   title="Build Better Experiences"
 *   subtitle="With Lossless Components"
 *   description="Our component library helps you create beautiful, accessible interfaces with minimal effort."
 *   ctaText="Get Started"
 *   ctaUrl="/docs"
 *   image={{
 *     src: "/visuals/Heroes/dashboard-example.png",
 *     alt: "Dashboard interface example"
 *   }}
 *   alignment="left"
 *   fullBleed={true}
 *   animate={true}
 * />
 * ```
 */

import "@styles/global.css";

/**
 * Props interface for the Hero component
 * 
 * @interface Props
 */
interface Props {
  /**
   * Main title of the hero section
   */
  title: string;
  
  /**
   * Optional subtitle displayed above the title
   */
  subtitle?: string;
  
  /**
   * Optional description text displayed below the title
   */
  description?: string;
  
  /**
   * Optional call-to-action button text
   */
  ctaText?: string;
  
  /**
   * Optional call-to-action button URL
   */
  ctaUrl?: string;
  
  /**
   * Optional image to display in the hero
   * @example { src: "/path/to/image.jpg", alt: "Description" }
   */
  image?: { src: string; alt: string };
  
  /**
   * Content alignment
   * @default "left"
   */
  alignment?: 'left' | 'center';
  
  /**
   * Whether the hero should extend to the full width of the viewport
   * @default false
   */
  fullBleed?: boolean;
  
  /**
   * Additional CSS classes to apply to the hero
   */
  classes?: string;

  /**
   * Whether to enable animations
   * @default true
   */
  animate?: boolean;
}

// Destructure props with defaults
const { 
  title, 
  subtitle, 
  description, 
  ctaText, 
  ctaUrl, 
  image, 
  alignment = 'left', 
  fullBleed = false,
  classes = "",
  animate = true
} = Astro.props;

// Determine container classes based on props
const containerClasses = [
  "hero-container",
  `hero-align--${alignment}`,
  fullBleed ? "hero-full-bleed" : "",
  classes
];

// Determine if we have a CTA button
const hasCta = ctaText && ctaUrl;

// Determine if we have an image
const hasImage = image && image.src;

// Animation attributes based on animate prop
const animationAttributes = animate ? {
  'data-animate': 'fade-in',
  'data-animate-delay': '0'
} : {};

// Animation attributes for child elements
const titleAnimationAttributes = animate ? {
  'data-animate': 'fade-up',
  'data-animate-delay': '0.1'
} : {};

const subtitleAnimationAttributes = animate ? {
  'data-animate': 'fade-up',
  'data-animate-delay': '0.2'
} : {};

const descriptionAnimationAttributes = animate ? {
  'data-animate': 'fade-up',
  'data-animate-delay': '0.3'
} : {};

const ctaAnimationAttributes = animate ? {
  'data-animate': 'fade-up',
  'data-animate-delay': '0.4'
} : {};

const imageAnimationAttributes = animate ? {
  'data-animate': 'fade-in',
  'data-animate-delay': '0.5'
} : {};
---

<section class={`hero ${containerClasses.join(' ')}`} {...animationAttributes}>
  <div class="hero-content">
    <div class="hero-text">
      {subtitle && <p class="hero-subtitle" {...subtitleAnimationAttributes}>{subtitle}</p>}
      <h1 class="hero-title" {...titleAnimationAttributes}>{title}</h1>
      {description && <p class="hero-description" {...descriptionAnimationAttributes}>{description}</p>}
      {hasCta && (
        <div class="hero-cta" {...ctaAnimationAttributes}>
          <a href={ctaUrl} class="hero-cta-button">{ctaText}</a>
        </div>
      )}
    </div>
    
    {hasImage && (
      <div class="hero-image-container">
        <div class="hero-image-wrapper">
          <img 
            class="hero-image"
            src={image.src}
            alt={image.alt || title}
            loading="eager"
            {...imageAnimationAttributes}
          />
        </div>
      </div>
    )}
  </div>
</section>

<style>
  /* Container */
  .hero-container {
    position: relative;
    width: 100%;
    padding: 3rem 1.5rem;
    margin: 0 auto 2rem auto;
    border-radius: 1rem;
    overflow: hidden;
    background-color: var(--clr-primary-bg);
    border: 1px solid rgba(255, 255, 255, 0.05);
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.1);
  }
  
  /* Full-bleed styling */
  .hero-full-bleed {
    width: 100vw;
    position: relative;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
    border-radius: 0;
    padding: 4rem 2rem;
  }

  /* Content layout */
  .hero-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    position: relative;
    z-index: 1;
  }

  /* Text alignment */
  .hero-align--left .hero-text {
    text-align: left;
  }
  
  .hero-align--center .hero-text {
    text-align: center;
  }

  /* Typography */
  .hero-subtitle {
    font-family: var(--ff-legible);
    font-weight: var(--fw-semi-bold);
    font-size: var(--fs-400);
    color: var(--clr-lossless-accent--brightest);
    margin-bottom: 0.5rem;
    letter-spacing: 0.5px;
  }
  
  .hero-title {
    font-family: var(--ff-base);
    font-weight: var(--fw-bold);
    font-size: var(--fs-900);
    line-height: 1.2;
    margin-bottom: 1rem;
    background: linear-gradient(90deg, var(--clr-lossless-primary-light) 0%, var(--clr-lossless-accent--brightest) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-fill-color: transparent;
  }
  
  .hero-description {
    font-family: var(--ff-legible);
    font-weight: var(--fw-regular);
    font-size: var(--fs-450);
    line-height: 1.6;
    opacity: 0.9;
    max-width: 40ch;
    margin-bottom: 1.5rem;
  }

  /* CTA Button */
  .hero-cta {
    margin-top: 1.5rem;
  }
  
  .hero-cta-button {
    display: inline-block;
    background: transparent;
    color: var(--clr-lossless-accent--brightest);
    font-family: var(--ff-legible);
    font-weight: var(--fw-semi-bold);
    font-size: var(--fs-400);
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    text-decoration: none;
    transition: all 0.2s ease;
    border: 1px solid var(--clr-lossless-accent--brightest);
    position: relative;
    overflow: hidden;
  }
  
  .hero-cta-button:hover {
    background: var(--clr-lossless-accent--brightest);
    color: var(--clr-lossless-primary-dark);
  }

  /* Image */
  .hero-image-container {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .hero-image-wrapper {
    position: relative;
    width: 100%;
    max-width: 500px;
    border-radius: 1rem;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
  }
  
  .hero-image {
    width: 100%;
    height: auto;
    object-fit: contain;
    border-radius: 0.5rem;
  }

  /* Responsive styles */
  @media (min-width: 768px) {
    .hero-content {
      flex-direction: row;
      align-items: center;
    }
    
    .hero-text {
      flex: 1;
    }
    
    .hero-image-container {
      flex: 1;
    }
    
    .hero-align--center .hero-content {
      flex-direction: column;
    }
    
    .hero-align--center .hero-description {
      margin-left: auto;
      margin-right: auto;
    }
  }
  
  @media (min-width: 1024px) {
    .hero-container {
      padding: 4rem 2rem;
    }
    
    .hero-full-bleed {
      padding: 5rem 2rem;
    }
    
    .hero-title {
      font-size: var(--fs-900);
    }
    
    .hero-description {
      font-size: var(--fs-500);
    }
  }
  
  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    .hero-cta-button {
      transition: none;
    }
  }
</style>
