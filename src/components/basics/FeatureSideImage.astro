---
/**
 * FeatureSideImage.astro
 * 
 * Creates a responsive side-by-side layout with content on one side and an image on the other.
 * Supports alternating layouts with the image on either the left or right side.
 * 
 * @component
 * @example
 * ```astro
 * <FeatureSideImage
 *   label="Important Feature"
 *   title="Real-time Collaboration"
 *   details="Work together with your team in real-time with our advanced collaboration tools."
 *   image={importedImage}
 *   imageSide="right"
 * />
 * ```
 */

interface Props {
  label: string;            // Colored text label (appears above title)
  title: string;            // Main heading
  details: string;          // Descriptive paragraph text
  image: {                  // Simple image object with src and optional alt
    src: string;
    alt?: string;
  };
  imageSide: "left" | "right"; // Which side the image appears on
  classes?: string;         // Additional CSS classes
  maskHeight?: string;      // Optional height for the image mask (e.g., "300px", "50%")
  maskWidth?: string;       // Optional width for the image mask (e.g., "100%", "400px")
}

const { 
  image, 
  label, 
  title, 
  details, 
  imageSide = "right", 
  classes = "",
  maskHeight = "300px",
  maskWidth = "100%"
} = Astro.props;

// Determine if we need to reorder content for left-side images
const contentOrderClass = imageSide === "left" ? "feature-content--order-last" : "";
const imageAnimationDirection = imageSide === "left" ? "right" : "left";

// Check if this is a placeholder image
const isPlaceholder = image.src.includes('placeholder.com');

// Generate a unique ID for this component instance
const uniqueId = Math.random().toString(36).substring(2, 9);

// Determine if we're using the mask effect
const isMasked = classes.includes('image-mask');

// Create inline styles for the mask
// For percentage heights, we need a fixed container height as a reference
const maskStyle = isMasked ? 
  `height: ${maskHeight.includes('%') ? '300px' : maskHeight}; width: ${maskWidth};` : 
  '';

---

<div class:list={["feature-side-image", classes]} id={`feature-${uniqueId}`}>
  <!-- Text Content -->
  <div class:list={["feature-content", contentOrderClass]}>
    <div class="feature-label-container">
      <p class="feature-label">{label}</p>
    </div>
    <h2 class="feature-title">{title}</h2>
    <p class="feature-details">{details}</p>
    <slot name="content-footer" />
  </div>

  <!-- Image -->
  <div class="feature-image-container" style={maskStyle}>
    <div class:list={["feature-image-wrapper", { "feature-image-wrapper--placeholder": isPlaceholder }]}>
      <img 
        class="feature-image"
        src={image.src}
        alt={image.alt || title}
        loading="lazy"
      />
    </div>
  </div>
</div>

{isMasked && (
  <script define:vars={{ uniqueId, useTextHeight: maskHeight === 'auto', maskHeight, maskWidth }}>
    // Simple function to match the image container height to the text content
    function adjustImageHeight() {
      const container = document.getElementById(`feature-${uniqueId}`);
      if (!container) return;
      
      const textContent = container.querySelector('.feature-content');
      const imageContainer = container.querySelector('.feature-image-container');
      
      if (!textContent || !imageContainer) return;
      
      if (window.innerWidth >= 768) {
        // Handle percentage-based heights
        if (maskHeight.includes('%')) {
          const textHeight = textContent.offsetHeight;
          const percentValue = parseFloat(maskHeight);
          if (!isNaN(percentValue)) {
            const calculatedHeight = (textHeight * percentValue) / 100;
            imageContainer.style.height = `${calculatedHeight}px`;
          }
        } 
        // Handle auto height (match text content)
        else if (maskHeight === 'auto') {
          const textHeight = textContent.offsetHeight;
          imageContainer.style.height = `${textHeight}px`;
        }
        // For fixed heights, the CSS inline style is already applied
      } else if (window.innerWidth < 768) {
        // On mobile, use a fixed height
        imageContainer.style.height = '250px';
      }
      
      // Handle percentage-based widths
      if (maskWidth.includes('%') && parseInt(maskWidth) > 100) {
        const containerWidth = container.offsetWidth / 2; // Assuming 2-column layout
        const percentValue = parseFloat(maskWidth);
        if (!isNaN(percentValue)) {
          const calculatedWidth = (containerWidth * percentValue) / 100;
          imageContainer.style.width = `${calculatedWidth}px`;
          // Center the wider container
          imageContainer.style.transform = 'translateX(-50%)';
          imageContainer.style.position = 'relative';
          imageContainer.style.left = '50%';
        }
      }
    }
    
    // Run on load
    if (document.readyState === 'complete') {
      adjustImageHeight();
    } else {
      window.addEventListener('load', adjustImageHeight);
    }
    
    // Run on resize
    window.addEventListener('resize', adjustImageHeight);
    
    // Run after images load (which might change layout)
    window.addEventListener('load', () => {
      // Small delay to ensure everything is rendered
      setTimeout(adjustImageHeight, 100);
    });
  </script>
)}

<style>
  /* Container */
  .feature-side-image {
    display: grid;
    gap: 2rem;
    border-radius: 1rem;
    margin: 3rem auto;
    width: 100%;
  }

  /* Text Content */
  .feature-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .feature-label-container {
    display: flex;
  }

  .feature-label {
    color: var(--clr-lossless-accent--brightest);
    font-family: var(--ff-legible);
    font-weight: var(--fw-semi-bold);
    font-size: var(--fs-400);
  }

  .feature-title {
    color: var(--clr-heading);
    font-family: var(--ff-heading);
    font-size: var(--fs-700);
    font-weight: var(--fw-bold);
    line-height: 1.2;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .feature-details {
    color: var(--clr-body);
    font-family: var(--ff-legible);
    font-weight: var(--fw-regular);
    font-size: var(--fs-400);
    line-height: 1.6;
    opacity: 0.9;
  }

  /* Image */
  .feature-image-container {
    width: 100%;
    max-width: 100%;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .feature-image-wrapper {
    position: relative;
    height: 100%;
    width: 100%;
    border-radius: 1rem;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Image sizing and positioning utility classes */
  .image-centered {
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .image-contain {
    height: 100%;
    width: 100%;
  }

  .image-contain .feature-image {
    object-fit: contain;
    max-height: 100%;
    max-width: 100%;
  }

  .image-cover {
    height: 100%;
    width: 100%;
  }

  .image-cover .feature-image {
    object-fit: cover;
    height: 100%;
    width: 100%;
  }

  .image-fixed-height {
    height: 400px;
  }

  .image-fixed-height .feature-image {
    max-height: 100%;
  }

  /* Mask/window effect - shows a portion of the image through a fixed viewport */
  .feature-side-image.image-mask .feature-image-container {
    overflow: hidden;
    border-radius: 1rem;
  }

  .feature-side-image.image-mask .feature-image-wrapper {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .feature-side-image.image-mask .feature-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  /* Responsive */
  @media (min-width: 768px) {
    .feature-side-image {
      grid-template-columns: 1fr 1fr;
      gap: 3rem;
    }

    .feature-content--order-last {
      order: 2;
    }
  }

  @media (min-width: 1024px) {
    .feature-side-image {
      gap: 5rem;
    }
  }

  /* Only apply gradient background and overlay to placeholder images */
  .feature-image-wrapper--placeholder {
    background: linear-gradient(
      135deg,
      var(--clr-lossless-primary-light) 0%,
      var(--clr-lossless-primary-glass) 50%,
      var(--clr-lossless-primary-dark) 100%
    );
    padding: 1px;
  }

  .feature-image-wrapper--placeholder::after {
    content: "";
    position: absolute;
    inset: 1px;
    border-radius: calc(1rem - 1px);
    background: color-mix(in oklab, var(--clr-lossless-primary-glass), transparent 70%);
    z-index: 1;
  }

  .feature-image {
    position: relative;
    z-index: 10;
    max-width: 100%;
    max-height: 100%;
    border-radius: 1rem;
    object-fit: contain;
    border: 1px solid transparent;
  }
  /* Mobile: Reduce vertical margin for proportional spacing */
  @media (max-width: 768px) {
    .feature-side-image {
      margin: 1.5rem auto;
    }
  }
</style>
