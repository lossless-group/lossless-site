---
import type { ProjectConfig } from '../../utils/projectGalleryUtils';
import projectGallery from '../../config/project-gallery.json';

interface Props {
  label: string;
}

const { label } = Astro.props;

// Type assertion for the project gallery data
interface GalleryData {
  projects: Record<string, {
    id: string;
    title: string;
    subtitle: string;
    href?: string;
    hasSidebar?: boolean;
    canvas?: string;
    useCases?: Array<{ title: string; description: string }>;
    demoSteps?: Array<{ title: string; href: string; type: string; description?: string; contentPath?: string; step?: number }>;
  }>;
}

// Get projects from the gallery config and ensure they match ProjectConfig type
const projects = Object.entries((projectGallery as unknown as GalleryData).projects).map(([id, project]) => ({
  id: project.id || id,
  title: project.title,
  subtitle: project.subtitle,
  href: project.href || `/projects/gallery/${project.id || id}`,
  hasSidebar: project.hasSidebar || false,
  ...(project.canvas && { canvas: project.canvas }),
  useCases: project.useCases || [],
  demoSteps: project.demoSteps || []
} as ProjectConfig));

// Sort projects by title for consistent ordering
const sortedProjects = [...projects].sort((a, b) => 
  a.title.localeCompare(b.title)
);
---

<div class="dropdown-wrapper">
  <button class="dropdown-trigger">{label}</button>
  <div class="projects-dropdown">
    <div class="dropdown-header">Our Projects</div>
    <div class="dropdown-grid">
      {sortedProjects.map((project, index) => (
        <a 
          href={project.href || `/projects/gallery/${project.id}`} 
          class="dropdown-item"
          data-project={project.id}
        >
          <div class="item-title">{project.title}</div>
          <div class="item-description">{project.subtitle}</div>
          {project.useCases && project.useCases.length > 0 && (
            <div class="use-cases">
              {project.useCases.map(useCase => (
                <div class="use-case">
                  <span class="use-case-title">{useCase.title}:</span>
                  <span class="use-case-desc">{useCase.description}</span>
                </div>
              ))}
            </div>
          )}
        </a>
      ))}
    </div>
  </div>
</div>

<style>
  .dropdown-wrapper {
    position: relative;
    font-family: "Poppins", sans-serif;
    display: inline-block;
  }

  .dropdown-trigger {
    all: unset;
    display: inline-block;
    color: var(--clr-lossless-primary-light);
    font-family: "Poppins", sans-serif;
    font-size: clamp(0.9em, 1.1vw, 1.25em);
    line-height: 1.2;
    white-space: nowrap;
    transition: color 0.2s ease;
    text-decoration: none;
    font-weight: normal;
    cursor: pointer;
    padding: 0.5rem 0;
  }

  .dropdown-trigger:hover {
    color: var(--clr-link);
  }

  .projects-dropdown {
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    background-color: var(--clr-primary-bg);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 0.5rem;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    padding: 1.5rem;
    min-width: 800px;
    z-index: 1000;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease, transform 0.2s ease;
    transform: translate(-50%, 10px);
  }

  .dropdown-wrapper:hover .projects-dropdown {
    opacity: 1;
    pointer-events: auto;
    transform: translate(-50%, 0);
  }

  .dropdown-header {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--clr-lossless-accent--brightest);
    margin-bottom: 1.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .dropdown-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
  }

  .dropdown-item {
    background: rgba(255, 255, 255, 0.03);
    border-radius: 0.5rem;
    padding: 1.25rem;
    text-decoration: none;
    color: var(--clr-lossless-primary-light);
    transition: all 0.2s ease;
    border: 1px solid transparent;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .dropdown-item:hover {
    background: rgba(255, 255, 255, 0.08);
    border-color: var(--clr-lossless-accent--brightest);
    transform: translateY(-2px);
  }

  .item-title {
    font-weight: 600;
    font-size: 1.1rem;
    margin-bottom: 0.5rem;
    color: var(--clr-lossless-accent--brightest);
  }

  .item-description {
    font-size: 0.9rem;
    color: var(--clr-lossless-primary-light-alt, #ccc);
    line-height: 1.5;
    margin-bottom: 0.75rem;
  }

  .use-cases {
    margin-top: auto;
    padding-top: 0.75rem;
    border-top: 1px solid rgba(255, 255, 255, 0.05);
  }

  .use-case {
    font-size: 0.8rem;
    margin-bottom: 0.5rem;
    line-height: 1.4;
  }

  .use-case:last-child {
    margin-bottom: 0;
  }

  .use-case-title {
    font-weight: 600;
    color: var(--clr-lossless-accent--bright);
    margin-right: 0.5rem;
  }

  .use-case-desc {
    color: var(--clr-lossless-primary-light-alt);
  }

  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .projects-dropdown {
      min-width: 90vw;
      max-width: 90vw;
    }
  }

  @media (max-width: 768px) {
    .dropdown-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
