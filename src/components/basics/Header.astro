---
import "@styles/global.css";
import ThinGradientBleedSeparator from "@basics/separators/ThinGradientBleedSeparator.astro";
import JumboDropdown from "./JumboDropdown.astro";
import GetLostDropdown from "./GetLostDropdown.astro";
import ProjectsDropdown from "./ProjectsDropdown.astro";
import type { ProjectConfig } from '../../utils/projectGalleryUtils';
import { resolveProjectUrl } from '../../utils/projectGalleryUtils';
import projectGallery from '../../config/project-gallery.json';

// Define navigation links (nested items become dropdowns)
const navLinks = [
  { href: "/read/through", label: "Reader" },
  { href: "/toolkit", label: "Toolkit" },
  { href: "/more-about", label: "Reference" },
  {
    label: "Get Lost",
    isCustomDropdown: true,
    items: {
      vibe: {
        href: "/vibe-with/us",
        title: "Vibe with Us",
        description: "Dive into our vibe coding context engineering playbook"
      },
      upAndRunning: {
        href: "/learn-with/up-and-running",
        title: "Up and Running",
        description: "Step by step instructions to get up and running with Lossless toolkit libraries."
      },
      issueResolution: {
        href: "/learn-with/issue-resolution",
        title: "Issue Resolution",
        description: "Find solutions to common problems and issues."
      },
      explorations: {
        href: "/learn-with/explorations",
        title: "Explorations",
        description: "Explore our collection of explorations."
      },
      toHero: {
        href: "/learn-with/to-hero",
        title: "Zero to...",
        description: "See us fumble with things we supposely know."
      },
      talks: {
        href: "/learn-with/our-talks",
        title: "Talks",
        description: "Watch and learn from our collection of talks and presentations."
      },
      marketMaps: {
        href: "/market-map/it",
        title: "Market Maps",
        description: "Explore the landscape with our comprehensive market maps."
      }
    }
  },
  {
    label: "Projects",
    isProjectsDropdown: true
  },
  {
    label: "Changelog",
    items: [
      {
        href: "/workflow/changelog",
        title: "Internal Changelog",
        description: "See whatâ€™s changed in the Lossless platform.",
      },
      {
        href: "/workflow/laerdal",
        title: "Laerdal Changelog",
        description: "Track updates specific to the Laerdal integration.",
      }
    ]
  }
];

// Social icon links
const socialIcons = [
  { label: "Youtube", icon: "https://ik.imagekit.io/xvpgfijuw/lossless-content-embeds/appIcon__Youtube--Lightest.svg", url: "https://www.youtube.com/@losslessgroup/" },
  { label: "X", icon: "/visuals/appIcon__X-Twitter--Lightest.svg", url: "https://x.com/losslessgroup" },
  { label: "GitHub", icon: "/visuals/appIcon__GitHub--Lighter.svg", url: "https://github.com/lossless-group" },
  { label: "LinkedIn", icon: "/visuals/appIcon__LinkedIn.svg", url: "https://www.linkedin.com/company/thelosslessgroup" }
];
---

<header class="header">
  <div class="header-container-row">
    <!-- Logo -->
    <a href="/" class="logo-link" aria-label="Return to homepage">
      <img
        class="logo-box"
        src="/visuals/trademark__Lossless.svg"
        alt="The Lossless Group"
      />
    </a>

    <!-- Desktop Nav -->
    <nav class="site-navigation desktop-only">
      {navLinks.map(link => {
        if (link.isProjectsDropdown) {
          return <ProjectsDropdown label={link.label} />;
        } else if (link.isCustomDropdown) {
          // Ensure we're passing an object to GetLostDropdown
          const dropdownItems = link.items && !Array.isArray(link.items) 
            ? link.items 
            : {};
          return <GetLostDropdown label={link.label} items={dropdownItems} />;
        } else if (link.items) {
          // Convert items to array for JumboDropdown if needed
          const itemsArray = Array.isArray(link.items) 
            ? link.items 
            : Object.values(link.items);
          return <JumboDropdown label={link.label} items={itemsArray} />;
        } else {
          return <a href={link.href}>{link.label}</a>;
        }
      })}
    </nav>

    <!-- Desktop Social -->
    <div class="social-icons desktop-only">
      {socialIcons.map(icon => (
        <a href={icon.url} target="_blank" rel="noopener noreferrer" aria-label={`Visit our ${icon.label} page`}>
          <img src={icon.icon} alt={icon.label} />
        </a>
      ))}
    </div>

    <!-- Mobile Toggle -->
    <button class="mobile-menu-toggle" aria-label="Toggle navigation menu">
      <span class="hamburger-icon"></span>
    </button>
  </div>

  <!-- Mobile Nav -->
  <div class="mobile-menu" id="mobile-menu">
    <nav class="mobile-navigation">
      {navLinks.map((link, index) => {
        if (link.isProjectsDropdown) {
          // For mobile, we'll show a simple dropdown with project names
          const projects = (Object.values(projectGallery.projects) as ProjectConfig[]).sort((a, b) => 
            a.title.localeCompare(b.title)
          );
          
          return (
            <div class="mobile-nav-section">
              <div class="mobile-nav-header">{link.label}</div>
              {projects.map((project, projectIndex) => {
                const projectHref = resolveProjectUrl(project);
                return (
                  <a 
                    href={projectHref}
                    class="mobile-nav-item"
                    data-key={`project-${projectIndex}`}
                  >
                    <div class="mobile-nav-item-title">{project.title}</div>
                    <div class="mobile-nav-item-description">{project.subtitle}</div>
                  </a>
                );
              })}
            </div>
          );
        } else if (link.items) {
          // Convert items to array for mobile menu
          const itemsArray = Array.isArray(link.items) 
            ? link.items 
            : Object.entries(link.items).map(([key, item]) => ({
                ...item,
                id: key // Ensure each item has an id
              } as const));
            
          return (
            <div class="mobile-nav-section">
              <div class="mobile-nav-header">{link.label}</div>
              {itemsArray.map((item, itemIndex) => {
                const itemKey = `item-${index}-${itemIndex}`;
                const title = 'title' in item ? item.title : item.label;
                
                return (
                  <a 
                    href={item.href} 
                    class="mobile-nav-item"
                    data-key={itemKey}
                  >
                    <div class="mobile-nav-item-title">{title}</div>
                    {'description' in item && item.description && (
                      <div class="mobile-nav-item-description">{item.description}</div>
                    )}
                  </a>
                );
              })}
            </div>
          );
        } else {
          return (
            <a 
              href={link.href} 
              class="mobile-nav-item"
              data-key={`link-${index}`}
            >
              {link.label}
            </a>
          );
        }
      })}
    </nav>
    <div class="mobile-social-icons">
      {socialIcons.map(icon => (
        <a href={icon.url} target="_blank" rel="noopener noreferrer" aria-label={`Visit our ${icon.label} page`}>
          <img src={icon.icon} alt={icon.label} />
        </a>
      ))}
    </div>
  </div>

  <div class="header-separator">
    <ThinGradientBleedSeparator height="2px" color="var(--grd__primary-bg)" />
  </div>
</header>

<!-- Inline styles omitted here for brevity, reuse from your original file -->
<!-- Add the hamburger menu <style> and <script> block at the bottom as in your original -->


<style>
  /* Base header styles */
  .header {
    position: fixed;
    background-color: var(--clr-primary-bg);
    width: 100%;
    z-index: 1000;
    top: 0;
    left: 0;
    right: 0;
  }
  
  /* Responsive logo sizing */
  .logo-box {
    width: auto;
    height: clamp(34px, 4vw, 50px); /* Slightly adjusted for better mobile display */
    transition: height 0.3s ease; /* Smooth transition when resizing */
  }

  /* Style for the logo link */
  .logo-link {
    display: flex;
    text-decoration: none;
    padding: 0;
    margin: 0;
  }

  /* Main header row container */
  .header-container-row {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    padding: clamp(0.75em, 2vw, 1.25em) clamp(1em, 5vw, 3em);
    transition: padding 0.3s ease; /* Smooth transition when resizing */
  }

  /* Separator styling */
  .header-separator {
    margin-top: 0;
    margin-bottom: 0;
  }

  /* Desktop navigation styles */
  .site-navigation {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: clamp(1vw, 2vw, 2.5vw); /* Responsive spacing */
    margin-right: 2vw;

    & a {
      text-decoration: none;
      color: var(--clr-lossless-primary-light);
      font-size: clamp(0.9em, 1.1vw, 1.25em); /* Increased max font size */
      transition: font-size 0.3s ease, color 0.2s ease; /* Smooth transitions */
      white-space: nowrap; /* Prevent text wrapping */

      &:hover,
      &:focus-visible {
        color: var(--clr-link);
      }
    }
  }

  /* Social icons styles */
  .social-icons {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-end;
    gap: clamp(0.5vw, 1vw, 1.5vw); /* Responsive spacing */

    & a {
      display: flex;
      align-items: center;
      justify-content: center;
      text-decoration: none;
      transition: transform 0.2s ease;

      &:hover {
        transform: scale(1.1);
      }
    }

    & img {
      width: clamp(14px, 2.5vw, 28px); /* Responsive icon sizing */
      height: clamp(14px, 2.5vw, 28px);
      object-fit: contain;
      aspect-ratio: 1 / 1;
      transition: width 0.3s ease, height 0.3s ease; /* Smooth transitions */
    }
  }
  
  /* Hamburger menu button (hidden on desktop) */
  .mobile-menu-toggle {
    display: none; /* Hidden by default on desktop */
    background: none;
    border: none;
    cursor: pointer;
    padding: 10px;
    z-index: 1001;
  }
  
  /* Hamburger icon styling */
  .hamburger-icon {
    display: block;
    position: relative;
    width: 24px;
    height: 2px;
    background-color: var(--clr-lossless-primary-light);
    transition: background-color 0.3s ease;
    
    &::before,
    &::after {
      content: '';
      position: absolute;
      width: 24px;
      height: 2px;
      background-color: var(--clr-lossless-primary-light);
      transition: transform 0.3s ease;
    }
    
    &::before {
      top: -8px;
    }
    
    &::after {
      bottom: -8px;
    }
  }
  
  /* Active state for hamburger icon (when menu is open) */
  .mobile-menu-toggle.active .hamburger-icon {
    background-color: transparent;
    
    &::before {
      transform: translateY(8px) rotate(45deg);
    }
    
    &::after {
      transform: translateY(-8px) rotate(-45deg);
    }
  }
  
  /* Mobile menu container (hidden by default) */
  .mobile-menu {
    display: none !important;
    position: fixed !important;
    top: 80px !important; /* Adjust based on header height */
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    background-color: var(--clr-primary-bg) !important;
    padding: 1rem 1.5rem !important;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06) !important;
    overflow-y: auto !important;
    z-index: 9999 !important;
  }
  
  /* Force mobile menu to show when active */
  .mobile-menu.active {
    display: block !important;
  }
  
  /* Mobile menu active state */
  .mobile-menu.active {
    display: block;
  }
  
  /* Mobile navigation styling */
  .mobile-navigation {
    display: flex !important;
    flex-direction: column !important;
    gap: 0.5rem !important;
    padding-bottom: 2rem !important;
    width: 100% !important;
    margin: 0 !important;
    font-family: 'Poppins', system-ui, -apple-system, sans-serif !important;
  }
  
  .mobile-nav-section {
    margin-bottom: 1.25rem !important;
    width: 100% !important;
  }
  
  .mobile-nav-header {
    margin: 1.5rem 0 0.5rem 0 !important;
    padding: 0.5rem 0 !important;
    color: var(--cyan-aqua--brightest) !important;
    font-size: 1.1rem !important;
    font-weight: 600 !important;
    font-family: 'Poppins', system-ui, -apple-system, sans-serif !important;
    text-transform: uppercase !important;
    letter-spacing: 0.05em !important;
    display: block !important;
    width: 100% !important;
    border-bottom: 1px solid var(--cyan-aqua--brightest) !important;
    border-radius: 0 !important;
    background: none !important;
    box-shadow: none !important;
    text-align: center !important;
  }

  .mobile-nav-item {
    display: flex !important;
    flex-direction: column !important;
    padding: 0.6rem 1rem !important;
    color: var(--white-catskill) !important;
    text-decoration: none !important;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1) !important;
    border-radius: 6px !important;
    margin: 0.3rem 0 !important;
    font-family: 'Poppins', system-ui, -apple-system, sans-serif !important;
    font-size: 0.95rem !important;
    text-transform: none !important;
    letter-spacing: 0.1px !important;
    background: rgba(25, 20, 29, 0.9) !important;
    border: 1px solid var(--cyan-aqua--brightest) !important;
    text-align: left !important;
    width: 100% !important;
    backdrop-filter: blur(8px) !important;
  }

  .mobile-nav-item:hover {
    background: rgba(4, 229, 229, 0.1) !important;
    border-color: var(--cyan-aqua--brightest) !important;
    transform: translateY(-2px) !important;
    box-shadow: 0 0 15px rgba(4, 229, 229, 0.3) !important;
  }

  .mobile-nav-item-title {
    font-weight: 500 !important;
    color: var(--white-catskill) !important;
    margin-bottom: 0.2rem !important;
    font-size: 0.95rem !important;
    line-height: 1.2 !important;
    letter-spacing: 0.01em !important;
  }
  
  .mobile-nav-item-description {
    font-size: 0.8rem !important;
    color: var(--clr-lossless-primary-glass--lighter) !important;
    line-height: 1.3 !important;
    font-family: 'Poppins', system-ui, sans-serif !important;
    font-weight: 300 !important;
    display: block !important;
    margin: 0 !important;
    max-width: 100%;
  }
  
  /* Mobile social icons styling */
  .mobile-social-icons {
    display: flex;
    flex-direction: row;
    gap: 1.5rem;
    justify-content: center;
    padding: 1rem 0;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    
    & img {
      width: 24px;
      height: 24px;
    }
  }
  
  /* Media query for tablet and mobile devices */
  @media (max-width: 768px) {
    /* Hide desktop navigation and social icons */
    .desktop-only {
      display: none;
    }
    
    /* Show mobile menu toggle button */
    .mobile-menu-toggle {
      display: block;
    }
    
    /* Adjust header padding for mobile */
    .header-container-row {
      padding: 0.75em 1.5em;
    }
  }
</style>

<script is:inline>
  // Wait for document to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Get references to elements
    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileNavItems = document.querySelectorAll('.mobile-nav-item');
    
    // Toggle mobile menu when hamburger is clicked
    mobileMenuToggle?.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      mobileMenuToggle.classList.toggle('active');
      mobileMenu?.classList.toggle('active');
      
      // Toggle body scroll when menu is open
      if (mobileMenu?.classList.contains('active')) {
        document.body.style.overflow = 'hidden';
      } else {
        document.body.style.overflow = '';
      }
    });
    
    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
      const isClickInside = mobileMenu?.contains(e.target) || mobileMenuToggle?.contains(e.target);
      if (!isClickInside && mobileMenu?.classList.contains('active')) {
        mobileMenuToggle?.classList.remove('active');
        mobileMenu?.classList.remove('active');
        document.body.style.overflow = '';
      }
    });
    
    // Close mobile menu when a nav item is clicked
    mobileNavItems.forEach(item => {
      item.addEventListener('click', () => {
        mobileMenuToggle?.classList.remove('active');
        mobileMenu?.classList.remove('active');
        document.body.style.overflow = '';
      });
    });
  });
</script>
