---
// Core imports
import { getCollection } from "astro:content";
import path from 'node:path';
import fs from 'node:fs/promises';
import { toProperCase } from '@utils/slugify';
import type { ReferenceItem } from '../../types/client-data.d';
import ReferenceGrid from '@components/reference/ReferenceGrid.astro';

interface Props {
  client: string;
  contentBasePath: string;
}

const { client, contentBasePath } = Astro.props;

// Load reference-terms.json
const referenceTermsPath = path.resolve(contentBasePath, `client-content/${toProperCase(client)}/reference-terms.json`);
let referenceTerms = { vocabulary: [], concepts: [] };

try {
  const raw = await fs.readFile(referenceTermsPath, 'utf-8');
  referenceTerms = JSON.parse(raw);
} catch (err) {
  console.warn(`No reference terms found for client: ${client}`);
}

// Helper functions
function normalizeTerm(term: string): string {
  return term.toLowerCase().replace(/-/g, '');
}

function toReferenceItems(entries: any[], collection: 'vocabulary' | 'concepts'): ReferenceItem[] {
  return entries.map(entry => ({
    id: entry.id,
    slug: entry.slug,
    collection,
    data: {
      title: entry.data?.title || toProperCase(entry.slug.replace(/[-_]/g, ' ')),
      aliases: Array.isArray(entry.data?.aliases) ? entry.data.aliases : [],
      description: entry.data?.lede || entry.data?.description || '',
      tags: Array.isArray(entry.data?.tags) ? entry.data.tags : []
    },
    originalFilename: entry.id
  }));
}

function createLookupMap(items: ReferenceItem[]): Map<string, ReferenceItem> {
  const map = new Map<string, ReferenceItem>();
  for (const item of items) {
    map.set(normalizeTerm(item.data.title), item);
  }
  return map;
}

// Get and process collections
const vocabEntries = await getCollection('vocabulary');
const conceptEntries = await getCollection('concepts');

const allVocabItems = toReferenceItems(vocabEntries, 'vocabulary');
const allConceptItems = toReferenceItems(conceptEntries, 'concepts');

const vocabMap = createLookupMap(allVocabItems);
const conceptMap = createLookupMap(allConceptItems);

function findMatchingItems(titles: string[], map: Map<string, ReferenceItem>): ReferenceItem[] {
  return titles
    .map(title => map.get(normalizeTerm(title)))
    .filter((item): item is ReferenceItem => item !== undefined);
}

const clientVocab = findMatchingItems(referenceTerms.vocabulary, vocabMap);
const clientConcepts = findMatchingItems(referenceTerms.concepts, conceptMap);
---

<!-- Reference Section HTML -->
<section class="reference-section">
  <!-- Vocabulary Section -->
  {clientVocab.length > 0 && (
    <div class="reference-category">
      <h2>Vocabulary</h2>
      <ReferenceGrid items={clientVocab} />
    </div>
  )}

  <!-- Concepts Section -->
  {clientConcepts.length > 0 && (
    <div class="reference-category">
      <h2>Concepts</h2>
      <ReferenceGrid items={clientConcepts} />
    </div>
  )}
</section>

<style>
  .reference-section {
    padding: 2rem 0;
  }

  .reference-category {
    margin-bottom: 3rem;
  }

  .reference-category h2 {
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    color: var(--color-text);
  }
</style>