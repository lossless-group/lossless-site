/**
 * rehype-mermaid-inline.ts
 *
 * Custom rehype plugin to replace tagged Mermaid codeblocks (with unique IDs) with their corresponding SVGs after rehypeMermaid runs.
 * This ensures SVGs are rendered inline at the original codeblock position.
 *
 * Usage: .use(rehypeMermaidInline)
 *
 * This plugin expects that codeblocks have a `data-mermaid-id` property, and that the SVGs generated by rehypeMermaid are present in the HAST.
 */

import type { Root, Element } from 'hast';
import { visit } from 'unist-util-visit';

/**
 * Finds SVG nodes in the HAST and maps them by their associated Mermaid ID.
 */
function buildSvgMap(tree: Root): Record<string, Element> {
  const svgMap: Record<string, Element> = {};
  visit(tree, 'element', (node: Element) => {
    if (node.tagName === 'svg' && node.properties && node.properties['data-mermaid-id']) {
      svgMap[node.properties['data-mermaid-id'] as string] = node;
    }
  });
  return svgMap;
}

/**
 * Main rehype plugin function.
 */
export default function rehypeMermaidInline() {
  return (tree: Root) => {
    // Build a map of SVGs by mermaidId
    const svgMap = buildSvgMap(tree);
    // Replace codeblock placeholders with SVGs
    visit(tree, 'element', (node: Element, index, parent) => {
      if (
        node.tagName === 'pre' &&
        node.children &&
        node.children[0] &&
        (node.children[0] as Element).tagName === 'code' &&
        (node.children[0] as Element).properties &&
        (node.children[0] as Element).properties['data-mermaid-id']
      ) {
        const mermaidId = (node.children[0] as Element).properties['data-mermaid-id'] as string;
        const svg = svgMap[mermaidId];
        if (svg && parent && typeof index === 'number') {
          parent.children[index] = svg;
        }
      }
    });
  };
}
