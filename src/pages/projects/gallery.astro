---
import Layout from '@layouts/Layout.astro';
import Hero from '@components/basics/Hero.astro';
import AnimationWrapper from '@components/basics/AnimationWrapper.astro';
import ProjectGallery from '@components/projects/ProjectGallery.svelte';
import ContentSection_SidebarTreeVariantB from '@layouts/content-sections/ContentSection_SidebarTreeVariantB.astro';
import OneArticleOnPage from '@components/articles/OneArticleOnPage.astro';
import Tooltip from '@components/basics/tooltips/Tooltip.astro';
import ExpandIcon from '@assets/Icons/arrows-maximize.svg';
import CollapseIcon from '@assets/Icons/arrows-minimize.svg';

import { unified } from 'unified';
import remarkParse from 'remark-parse';
import remarkGfm from 'remark-gfm';
import remarkDirective from 'remark-directive';
import remarkImages from '@utils/markdown/remark-images'; 
import remarkBacklinks from '@utils/markdown/remark-backlinks';
import remarkCitations from '@utils/markdown/remark-citations';
import remarkTableOfContents from '@utils/markdown/remark-toc';
import { remarkDirectiveToComponent } from '@utils/markdown/remark-directives';
import type { Root } from 'mdast';

// Import markdown content for different projects
import mdWorkflow from '@generated/projects/Augment-It/Specs/Data Augmentation Workflow with Microfrontends.md?raw';
import mdOurApproach from '@generated/projects/ACE-It/Philosophy/Our-Approach.md?raw';

// Remove YAML frontmatter when using ?raw imports so it doesn't render in the page
function stripFrontmatter(input: string): string {
  if (!input) return input;
  return input.replace(/^\uFEFF?\s*---[\s\S]*?\n---\s*/u, '');
}

// Process markdown content with unified processor
async function processMarkdown(mdContent: string, id: string, title: string) {
  if (!mdContent) return { mdastNode: null, contentData: null };
  
  const cleanedContent = stripFrontmatter(mdContent);
  
  const processor = unified()
    .use(remarkParse)
    .use(remarkGfm)
    .use(remarkDirective)
    .use(remarkDirectiveToComponent)
    .use(remarkImages) 
    .use(remarkBacklinks)
    .use(remarkCitations)
    .use(remarkTableOfContents);

  const mdast = processor.parse(cleanedContent);
  const mdastNode = await processor.run(mdast);

  const contentData = {
    path: Astro.url.pathname,
    id: id,
    title: title
  };

  return { mdastNode, contentData };
}

// Demo steps for Augment-It project
const augmentItDemoSteps = [
  { 
    title: 'Data Augmentation Workflow with Microfrontends', 
    href: '/projects/augment-it',
    type: 'orientation',
    description: 'Overview and introduction to the complete workflow'
  },
  { 
    title: 'Load Data', 
    href: '/projects/augment-it/record-collector',
    type: 'sequential',
    step: 1
  },
  { 
    title: 'Review & Enrich Records', 
    href: '/projects/augment-it/review-enrich-records',
    type: 'sequential',
    step: 2
  },
  { 
    title: 'Author Prompt Templates', 
    href: '/projects/augment-it/prompt-template-manager',
    type: 'sequential',
    step: 3
  },
  { 
    title: 'Choose AI Augmentation Option', 
    href: '/projects/augment-it/api-connector-service',
    type: 'sequential',
    step: 4
  },
  { 
    title: 'Review Request & Response', 
    href: '/projects/augment-it/request-reviewer',
    type: 'sequential',
    step: 5
  },
  { 
    title: 'Generate Insights', 
    href: '/projects/augment-it/highlight-collector',
    type: 'sequential',
    step: 6
  },
  { 
    title: 'Sync Back to Source', 
    href: '/projects/augment-it/sync',
    type: 'sequential',
    step: 7
  },
];

// Process content for each project
const augmentItContent = await processMarkdown(
  mdWorkflow, 
  'Augment-It/Specs/Data Augmentation Workflow with Microfrontends.md',
  'Data Augmentation Workflow with Microfrontends'
);

const aceItContent = await processMarkdown(
  mdOurApproach,
  'ACE-It/Philosophy/Our-Approach.md',
  'Our Approach: AI-Human Collaboration Principles'
);

// Define project covers for the gallery with their content configurations
const projectCovers = [
  {
    id: 'augment-it',
    title: 'Augment-It',
    subtitle: 'Augment any data by importing records or connecting to data sources.',
    href: '/projects/augment-it',
    hasSidebar: true,
    demoSteps: augmentItDemoSteps,
    content: augmentItContent,
    useCases: [
      {
        title: 'Product Insights for R&D',
        description: 'Generate insights about customers to inform product development decisions.'
      },
      {
        title: 'Sales Intel, Just-in-Time',
        description: 'Equip outside sales teams with richer customer context before meetings.'
      }
    ]
  },
  {
    id: 'ace-it',
    title: 'ACE-It',
    subtitle: 'AI-Augmented Product Development Workflow playbook and toolkit.',
    href: '/projects/ace-it',
    hasSidebar: false,
    demoSteps: null,
    content: aceItContent,
    useCases: [
      {
        title: 'AI Co-Development',
        description: 'Practical playbook for building real products with AI as a co-developer.'
      },
      {
        title: 'Battle-Tested Process',
        description: 'Accelerated Context Engineering (ACE) for seamless AI integration.'
      }
    ]
  },
  {
    id: 'astro-turf',
    title: 'Astro-Turf',
    subtitle: 'Advanced Astro framework components and patterns.',
    href: '/projects/astro-turf',
    hasSidebar: false,
    demoSteps: null,
    content: null,
    useCases: [
      {
        title: 'Component Library',
        description: 'Reusable Astro components for modern web development.'
      },
      {
        title: 'Framework Patterns',
        description: 'Best practices and architectural patterns for Astro projects.'
      }
    ]
  },
  {
    id: 'content-farm',
    title: 'Content-Farm',
    subtitle: 'Automated content generation and management system.',
    href: '/projects/content-farm',
    hasSidebar: false,
    demoSteps: null,
    content: null,
    useCases: [
      {
        title: 'Content Automation',
        description: 'Streamlined workflows for content creation and publishing.'
      },
      {
        title: 'Publishing Pipeline',
        description: 'Automated content distribution and management tools.'
      }
    ]
  },
  {
    id: 'emergent-innovation',
    title: 'Emergent-Innovation',
    subtitle: 'Open source innovation projects and collaborative initiatives.',
    href: '/projects/emergent-innovation',
    hasSidebar: false,
    demoSteps: null,
    content: null,
    useCases: [
      {
        title: 'Open Source Projects',
        description: 'Community-driven innovation in healthcare and technology.'
      },
      {
        title: 'Standards Development',
        description: 'Contributing to industry standards and best practices.'
      }
    ]
  },
  {
    id: 'water-template-ce',
    title: 'Water-Template-CE',
    subtitle: 'Community Edition water management and template system.',
    href: '/projects/water-template-ce',
    hasSidebar: false,
    demoSteps: null,
    content: null,
    useCases: [
      {
        title: 'Template Engine',
        description: 'Flexible templating system for water management applications.'
      },
      {
        title: 'Community Tools',
        description: 'Open source tools for water resource management.'
      }
    ]
  }
];
---

<Layout 
  title="Project Gallery" 
  description="Explore our innovative projects and interactive visualizations"
>
  <div class="projects-page-container">
    <AnimationWrapper>
      <Hero
        title="Project Gallery"
        subtitle="Innovation in Action"
        description="Discover our cutting-edge projects and interactive visualizations that showcase the power of modern web technologies and thoughtful design."
        alignment="center"
        fullBleed={false}
        animate={true}
        style="margin-top: 6rem;"
      />
    </AnimationWrapper>

    <!-- Project Gallery with Svelte -->
    <ProjectGallery projects={projectCovers} client:load />
    
    <!-- Hidden Project Content for Injection -->
    {projectCovers.filter(p => p.content).map(project => (
      <div id={`${project.id}-full-content`} class="collection-reader-pane" style="display: none;">
        {project.hasSidebar && project.demoSteps ? (
          <ContentSection_SidebarTreeVariantB 
            steps={project.demoSteps} 
            currentHref="/projects/gallery" 
            seriesTitle={project.title}
          >
            {project.content?.mdastNode && project.content?.contentData ? (
              <OneArticleOnPage 
                content={project.content.mdastNode} 
                data={project.content.contentData} 
              />
            ) : (
              <p>Content not available</p>
            )}
          </ContentSection_SidebarTreeVariantB>
        ) : (
          <div class="project-content-simple">
            {project.content?.mdastNode && project.content?.contentData ? (
              <OneArticleOnPage 
                content={project.content.mdastNode} 
                data={project.content.contentData} 
              />
            ) : (
              <p>Content not available</p>
            )}
          </div>
        )}
      </div>
    ))}
  </div>
</Layout>

<style>
  .projects-page-container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-6, 1.5rem);
    margin: 2rem auto;
    padding: 0 var(--spacing-4, 1rem);
    width: 100%;
  }
  
  .covers-grid { 
    display: grid; 
    gap: 2rem; 
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    max-width: 1200px;
    margin: 0 auto;
  }
  
  @media (max-width: 768px) {
    .covers-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
  }

  /* Styles for project content containers to work with TableOfContents */
  .collection-reader-pane {
    flex: 1 1 auto;
    display: block;
    padding: 3rem 2rem;
    min-width: 0;
    overflow-y: auto;
    overflow-x: hidden;
    max-width: 100%;
    height: 100%;
    scroll-behavior: smooth;
  }

  /* When the content is displayed (not hidden), ensure proper scrolling */
  .collection-reader-pane:not([style*="display: none"]) {
    height: calc(100vh - 4rem);
    overflow-y: auto;
  }

  .project-content-simple {
    padding: 2rem;
    max-width: 800px;
    margin: 0 auto;
  }
</style>

<script>
  // Global type declaration for Mermaid functions
  declare global {
    interface Window {
      renderMermaidCharts?: () => void;
      initializeMermaid?: () => Promise<void>;
      mermaid?: any;
      __MERMAID_LOADED__?: boolean;
    }
  }
  
  // Initialize Mermaid library globally
  window.initializeMermaid = async function() {
    if (!window.__MERMAID_LOADED__) {
      try {
        const mermaid = await import('https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs');
        
        // Configure Mermaid
        const mermaidConfig = {
          startOnLoad: false,
          theme: 'base',
          themeVariables: {
            darkMode: true,
            background: 'transparent',
            primaryColor: '#181818',
            primaryBorderColor: '#6fffd6',
            primaryTextColor: '#e0e0e0',
            secondaryColor: '#BF23F7',
            secondaryTextColor: '#50a3b3',
            clusterBkg: '#283139',
            lineColor: '#69e2e3',
            fontFamily: 'Open Sans, sans-serif',
          }
        };
        
        mermaid.default.initialize(mermaidConfig);
        window.mermaid = mermaid.default;
        window.__MERMAID_LOADED__ = true;
        
        // Initialize renderMermaidCharts function
        window.renderMermaidCharts = function() {
          if (window.mermaid) {
            window.mermaid.run();
          }
        };
        
        // Render any existing mermaid charts
        setTimeout(() => {
          window.renderMermaidCharts();
        }, 100);
      } catch (error) {
        console.error('[Gallery] Failed to load Mermaid library:', error);
      }
    }
  };

  // Initialize Mermaid after page load
  document.addEventListener('DOMContentLoaded', () => {
    window.initializeMermaid();
  });
</script>
