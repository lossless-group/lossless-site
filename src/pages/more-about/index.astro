---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import SearchInput from '@components/reference/SearchInput.astro';
import ReferenceNavRow from '@components/reference/ReferenceNavRow.astro';
import ReferenceGrid from '@components/reference/ReferenceGrid.astro';
import { processEntries, toProperCase, getReferenceSlug } from '@utils/slugify';
import { getWordCounts } from '@utils/collectionWordCount';

// Define the expected shape of our entries
interface VocabularyEntry extends CollectionEntry<'vocabulary'> {
  data: {
    title?: string;
    aliases?: string[];
    [key: string]: unknown;
  };
}

interface ConceptEntry extends CollectionEntry<'concepts'> {
  data: {
    title?: string;
    aliases?: string[];
    [key: string]: unknown;
  };
}

// Helper function to convert filename to title case
function filenameToTitle(filename: string): string {
  return filename
    .replace(/[-_]/g, ' ')
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(' ');
}

// Get collections and transform to match expected structure
const vocabularyEntries = (await getCollection('vocabulary') as unknown as VocabularyEntry[]).map(entry => {
  const filename = entry.id.replace(/\.(mdx?|astro)$/, '');
  const baseFilename = filename.split('/').pop() || '';
  const title = (entry.data.title as string | undefined) || filenameToTitle(baseFilename);
  
  return {
    ...entry,
    filePath: entry.id,
    originalFilename: baseFilename,
    collection: 'vocabulary' as const,
    data: {
      ...entry.data,
      title
    }
  };
});

const conceptsEntries = (await getCollection('concepts') as unknown as ConceptEntry[]).map(entry => {
  const filename = entry.id.replace(/\.(mdx?|astro)$/, '');
  const baseFilename = filename.split('/').pop() || '';
  const title = (entry.data.title as string | undefined) || filenameToTitle(baseFilename);
  
  return {
    ...entry,
    filePath: entry.id,
    originalFilename: baseFilename,
    collection: 'concepts' as const,
    data: {
      ...entry.data,
      title
    }
  };
});

// Process entries and ensure they match ReferenceItem type
const processedVocab = processEntries(vocabularyEntries).map(entry => {
  const filename = entry.id.replace(/\.(mdx?|astro)$/, '');
  const baseFilename = filename.split('/').pop() || '';
  
  return {
    ...entry,
    slug: entry.slug || getReferenceSlug(entry.id),
    collection: 'vocabulary' as const,
    originalFilename: baseFilename,
    data: {
      ...entry.data,
      title: entry.data.title || filenameToTitle(baseFilename)
    }
  };
});

const processedConcepts = processEntries(conceptsEntries).map(entry => {
  const filename = entry.id.replace(/\.(mdx?|astro)$/, '');
  const baseFilename = filename.split('/').pop() || '';
  
  return {
    ...entry,
    slug: entry.slug || getReferenceSlug(entry.id),
    collection: 'concepts' as const,
    originalFilename: baseFilename,
    data: {
      ...entry.data,
      title: entry.data.title || filenameToTitle(baseFilename)
    }
  };
});

// Get word counts for each collection
const wordCounts = await getWordCounts(['vocabulary', 'concepts'] as const);

// Format word counts for display
const formatWordCount = (count: number): string => {
  if (count >= 1000000) return `${(count / 1000000).toFixed(1)}M+`;
  if (count >= 1000) return `${(count / 1000).toFixed(1)}K+`;
  return count.toString();
};
---

<Layout title="Reference - Vocabulary & Concepts">
  <div class="container mx-auto py-8 px-4">
    <h1 class="text-3xl font-bold mb-6">Reference Library</h1>
    <p class="text-lg mb-8">Browse our collection of vocabulary terms and conceptual frameworks.</p>

    <ReferenceNavRow 
      vocabularyCount={processedVocab.length}
      conceptsCount={processedConcepts.length}
      vocabularyWordCount={wordCounts.vocabulary}
      conceptsWordCount={wordCounts.concepts}
      currentPage="all"
    />

    <SearchInput />

    <section class="mb-12">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-2xl font-bold">Vocabulary</h2>
        <span class="text-sm text-gray-500 dark:text-gray-400">
          {processedVocab.length} terms • {formatWordCount(wordCounts.vocabulary)} words
        </span>
      </div>
      <p class="mb-6">Terms and definitions used throughout our work.</p>

      <div data-searchable="true">
        <ReferenceGrid items={processedVocab} />
      </div>
    </section>

    <div class="border-t border-gray-200 dark:border-gray-700 my-8"></div>

    <section>
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-2xl font-bold">Concepts</h2>
        <span class="text-sm text-gray-500 dark:text-gray-400">
          {processedConcepts.length} concepts • {formatWordCount(wordCounts.concepts)} words
        </span>
      </div>
      <p class="mb-6">Important ideas and frameworks we use in our work.</p>

      <div data-searchable="true">
        <ReferenceGrid items={processedConcepts} />
      </div>
    </section>

  </div>
</Layout>
