---
import ReferenceLayout from '@layouts/ReferenceLayout.astro';
import { getCollection } from 'astro:content';
import { processEntries } from '@utils/slugify';
import { getWordCounts } from '@utils/collectionWordCount';
import VocabularyPreviewCard from '@components/reference/VocabularyPreviewCard.astro';
import ConceptPreviewCard from '@components/reference/ConceptPreviewCard.astro';
// Import the type directly from the source file
import type { ReferenceItem } from '../../types/reference';

// Get collections and process them using the centralized function
const vocabularyEntries = await getCollection('vocabulary');
const conceptsEntries = await getCollection('concepts');

// Process entries using the centralized processEntries function
const processedVocab = processEntries(vocabularyEntries).map(entry => ({
  ...entry,
  collection: 'vocabulary' as const,
  body: entry.body || '',
  data: {
    ...entry.data,
    aliases: Array.isArray(entry.data.aliases) ? entry.data.aliases : [],
    description: typeof entry.data.description === 'string' ? entry.data.description : '',
    at_semantic_version: typeof entry.data.at_semantic_version === 'string' ? entry.data.at_semantic_version : undefined
  }
}));

const processedConcepts = processEntries(conceptsEntries).map(entry => ({
  ...entry,
  collection: 'concepts' as const,
  body: entry.body || '',
  data: {
    ...entry.data,
    aliases: Array.isArray(entry.data.aliases) ? entry.data.aliases : [],
    description: typeof entry.data.description === 'string' ? entry.data.description : '',
    at_semantic_version: typeof entry.data.at_semantic_version === 'string' ? entry.data.at_semantic_version : undefined
  }
}));

// Get word counts for each collection
const wordCounts = await getWordCounts(['vocabulary', 'concepts'] as const);

// Format word counts for display
const formatWordCount = (count: number): string => {
  if (count >= 1000000) return `${(count / 1000000).toFixed(1)}M+`;
  if (count >= 1000) return `${(count / 1000).toFixed(1)}K+`;
  return count.toString();
};
---

<ReferenceLayout 
  title="Reference Library"
  description="Browse our collection of vocabulary terms and conceptual frameworks."
  currentPage="all"
  showSearch={true}
  showGrid={false}
>
  <section class="mb-12">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-2xl font-bold">Vocabulary</h2>
      <span class="text-sm text-gray-500 dark:text-gray-400">
        {processedVocab.length} terms • {formatWordCount(wordCounts.vocabulary)} words
      </span>
    </div>
    <p class="mb-6">Terms and definitions used throughout our work.</p>

    <div data-searchable="true">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {processedVocab.map(entry => (
          <div data-searchable="true">
            <VocabularyPreviewCard entry={{
              id: entry.id,
              slug: entry.slug,
              collection: entry.collection,
              body: entry.body,
              originalFilename: entry.originalFilename,
              data: {
                ...entry.data,
                slug: entry.slug,
                at_semantic_version: entry.data.at_semantic_version
              }
            }} />
          </div>
        ))}
      </div>
    </div>
  </section>

  <div class="border-t border-gray-200 dark:border-gray-700 my-8"></div>

  <section>
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-2xl font-bold">Concepts</h2>
      <span class="text-sm text-gray-500 dark:text-gray-400">
        {processedConcepts.length} concepts • {formatWordCount(wordCounts.concepts)} words
      </span>
    </div>
    <p class="mb-6">Important ideas and frameworks we use in our work.</p>

    <div data-searchable="true">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {processedConcepts.map(entry => (
          <div data-searchable="true">
            <ConceptPreviewCard entry={{
              id: entry.id,
              slug: entry.slug,
              collection: entry.collection,
              body: entry.body,
              originalFilename: entry.originalFilename,
              data: {
                ...entry.data,
                slug: entry.slug
              }
            }} />
          </div>
        ))}
      </div>
    </div>
  </section>
</ReferenceLayout>

<style>
  /* Vocabulary card styles */
  .vocabulary-card {
    background-color: var(--clr-lossless-primary-dark, #19141D);
    padding: 1rem;
    border-radius: 0.5rem;
    border: 1px solid transparent;
    transition: background-color 0.2s ease-in-out, 
                border-color 0.2s ease-in-out,
                color 0.2s ease-in-out,
                transform 0.2s ease-in-out;
  }

  .vocabulary-card__title {
    font-size: 1rem;
    font-weight: 400;
    margin-bottom: 0.5rem;
  }

  .vocabulary-card__link {
    color: var(--clr-lossless-accent--brightest, rgb(4, 229, 229));
  }

  .vocabulary-card:hover {
    background-color: #3a3a45;
    border-color: var(--clr-lossless-accent--brightest);
    color: var(--clr-lossless-primary-glass--lighter);
    transform: translateY(-2px) scale(1.05);
  }

  .vocabulary-card__aliases {
    font-size: 0.75rem;
    font-weight: 300;
    color: var(--white--pure--40p, hsla(0, 0%, 100%, .4));
    margin-bottom: 0.5rem;
  }

  /* Concept card styles */
  .concept-card {
    background-color: var(--clr-lossless-primary-dark, #19141D);
    padding: 1rem;
    border-radius: 0.5rem;
    border: 1px solid transparent;
    transition: background-color 0.2s ease-in-out, 
                border-color 0.2s ease-in-out,
                color 0.2s ease-in-out,
                transform 0.2s ease-in-out;
  }

  .concept-card__title {
    font-size: 1rem;
    font-weight: 400;
    margin-bottom: 0.5rem;
  }

  .concept-card__link {
    color: var(--clr-lossless-accent--brightest, rgb(4, 229, 229));
  }

  .concept-card:hover {
    background-color: #2d2730;
    border-color: var(--clr-lossless-accent--brightest);
    color: var(--clr-lossless-primary-glass--lighter);
    transform: translateY(-2px) scale(1.05);
  }
</style>
