---
import { getCollection } from 'astro:content';
import { processEntries, getReferenceSlug, toProperCase } from '@utils/slugify';
import Layout from '@layouts/Layout.astro';
import ConceptPreviewCard from '@components/reference/ConceptPreviewCard.astro';
import SearchInput from '@components/reference/SearchInput.astro';
import ReferenceNavRow from '@components/reference/ReferenceNavRow.astro';
import { getWordCounts } from '@utils/collectionWordCount';

// Type for the raw collection entry from getCollection
interface RawConceptEntry {
  id: string;
  data: {
    title?: string;
    aliases?: string[];
    [key: string]: unknown;
  };
  body?: string;
  collection: string;
}

// Type for our processed concept entries
interface ProcessedConceptEntry {
  id: string;
  slug: string;
  data: {
    title: string;
    aliases?: string[];
    [key: string]: unknown;
  };
  collection: 'concepts';
  originalFilename: string;
  filePath: string;
  body?: string;
}

// Helper function to convert filename to title case
function filenameToTitle(filename: string): string {
  return filename
    .replace(/[-_]/g, ' ')
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(' ');
}

// Get entries from concepts collection and transform them
const rawEntries = await getCollection('concepts') as RawConceptEntry[];

// Process entries to ensure they have proper titles and slugs
const processedEntries: ProcessedConceptEntry[] = rawEntries.map(entry => {
  // Extract the base filename without extension
  const filename = entry.id.replace(/\.(mdx?|astro)$/, '');
  const baseFilename = filename.split('/').pop() || '';
  
  // Get the title from frontmatter or generate from filename
  const title = entry.data.title || filenameToTitle(baseFilename);
  
  // Ensure aliases is always an array
  const aliases = Array.isArray(entry.data.aliases) ? entry.data.aliases : [];
  
  return {
    id: entry.id,
    filePath: entry.id,
    originalFilename: baseFilename,
    slug: getReferenceSlug(entry.id),
    collection: 'concepts',
    data: {
      ...entry.data,
      title,
      aliases
    },
    body: entry.body
  };
});

// Sort entries alphabetically by title
const sortedEntries = [...processedEntries].sort((a, b) => 
  a.data.title.localeCompare(b.data.title)
);

// Filter out any entries without a title
const validEntries = sortedEntries.filter(entry => entry.data.title);

// Get word count for vocabulary and concepts
const wordCounts = await getWordCounts(['vocabulary', 'concepts'] as const);
const vocabularyWordCount = wordCounts.vocabulary;
const conceptsWordCount = wordCounts.concepts;
const totalWords = vocabularyWordCount + conceptsWordCount;

// Use the valid entries for rendering
const entriesToRender = validEntries;
---

<Layout title="Concepts">
  <div class="container mx-auto py-8 px-4">
    <div class="mb-8">
      <h1 class="text-3xl font-bold mb-2">Concepts</h1>
      <p class="text-gray-300 mb-6">Important ideas and frameworks we use in our work.</p>
      
      <ReferenceNavRow 
        vocabularyCount={0} 
        conceptsCount={entriesToRender.length}
        vocabularyWordCount={0}
        conceptsWordCount={conceptsWordCount}
        currentPage="concepts"
      />
    </div>

    <SearchInput />
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {entriesToRender.map(entry => (
        <div data-searchable="true">
          <ConceptPreviewCard entry={entry} />
        </div>
      ))}
    </div>
  </div>
</Layout>
