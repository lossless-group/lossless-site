---
import { getCollection } from 'astro:content';
import { processEntries } from '@utils/slugify';
import Layout from '@layouts/Layout.astro';
import VocabularyPreviewCard from '@components/reference/VocabularyPreviewCard.astro';
import SearchInput from '@components/reference/SearchInput.astro';
import { getWordCounts } from '@utils/collectionWordCount';

// Type definition for vocabulary entry with required properties
interface VocabularyEntry {
  id: string;
  slug: string;
  data: {
    title?: string;
    aliases?: string[];
    [key: string]: unknown;
  };
  body?: string;
  collection: string;
  filePath?: string;
  rendered?: any;
}

// Get entries from vocabulary collection
const vocabularyEntries = await getCollection('vocabulary') as unknown as VocabularyEntry[];

// Process entries with proper typing
const processedEntries = vocabularyEntries.map(entry => {
  const processed = {
    ...entry,
    data: {
      ...entry.data,
      title: entry.data?.title || entry.id,
    },
    originalFilename: entry.id,
    slug: entry.slug || entry.id,
  };
  
  return processed;
});

// Get word count for vocabulary
const wordCounts = await getWordCounts(['vocabulary'] as const);
const vocabularyWordCount = wordCounts.vocabulary;

// Format word count for display
const formatWordCount = (count: number): string => {
  if (count >= 1000000) {
    return `${(count / 1000000).toFixed(1)}M+`;
  } else if (count >= 1000) {
    return `${(count / 1000).toFixed(1)}K+`;
  }
  return count.toString();
};
---

<Layout title="Vocabulary">
  <div class="container mx-auto py-8 px-4">
    <div class="flex justify-between items-center mb-6">
      <div>
        <h1 class="text-3xl font-bold">Vocabulary</h1>
        <p class="text-gray-300">Terms and definitions used throughout our work.</p>
      </div>
      <span class="text-sm text-gray-500 dark:text-gray-400">
        {vocabularyEntries.length} terms â€¢ {formatWordCount(vocabularyWordCount)} words
      </span>
    </div>
    
    <!-- Navigation tabs -->
    <div class="flex gap-4 mb-8">
      <a href="/more-about" class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-md">All Reference</a>
      <a href="/more-about/vocabulary" class="px-4 py-2 bg-blue-600 text-white rounded-md">Vocabulary</a>
      <a href="/more-about/concepts" class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-md">Concepts</a>
    </div>

    <SearchInput />
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {processedEntries.map(entry => (
        <div data-searchable="true">
          <VocabularyPreviewCard entry={entry} />
        </div>
      ))}
    </div>
  </div>
</Layout>
