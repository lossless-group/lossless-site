---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import OneArticle from '@layouts/OneArticle.astro';
import OneArticleOnPage from '@components/articles/OneArticleOnPage.astro';
import { processEntries } from '@utils/slugify';

// Ensure page is prerendered as static HTML
export const prerender = true;

export async function getStaticPaths() {
  // Import the single-source-of-truth slug/filename mapping utility

  const vocabularyEntries = await getCollection('vocabulary');
  const processedVocabularyEntires = processEntries(vocabularyEntries)

  const conceptsEntries = await getCollection('concepts');
  const processedConceptsEntries = processEntries(conceptsEntries)

  const vocabularyPaths = processedVocabularyEntires.map(entry => {
    return {
      params: { slug: entry.slug },
      props: {
        entry,
        contentType: 'vocabulary'
      }
    };
  });

  // Only declare conceptsPaths ONCE to avoid block-scoped redeclaration errors.
  // Use ONLY the shared getReferenceSlug logic for conceptsPaths. No local slug logic allowed.
  const conceptsPaths = processedConceptsEntries.map(entry => {
      return {
        params: { slug: entry.slug },
        props: {
          entry,
          contentType: 'concepts'
        }
      };
  });
  // Combine both path arrays
  return [...vocabularyPaths, ...conceptsPaths];
}

// Use a more flexible type definition to avoid TypeScript errors
interface Props {
  entry: any;
  contentType: 'vocabulary' | 'concepts';
}

const { entry, contentType } = Astro.props;

// Add content type to the data object for potential use in components
const contentData = {
  path: Astro.url.pathname,
  id: entry.id,
  title: entry.data.title,
  contentType: contentType
};
---

<Layout 
  title={entry.data.title}
  frontmatter={entry.data}
>
  <OneArticle
    Component={OneArticleOnPage}
    content={entry.body}
    markdownFile={entry.id}
    data={contentData}
  />
</Layout>
