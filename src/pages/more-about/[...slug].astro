---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import OneArticle from '@layouts/OneArticle.astro';
import OneArticleOnPage from '@components/articles/OneArticleOnPage.astro';
import { toProperCase, unslugify, getReferenceSlug } from "@utils/slugify"

// Ensure page is prerendered as static HTML
export const prerender = true;

export async function getStaticPaths() {
  // Import the single-source-of-truth slug/filename mapping utility

  const vocabularyEntries = await getCollection('vocabulary');
  const conceptsEntries = await getCollection('concepts');

  // Use shared utility for slug generation
  const vocabularyPaths = vocabularyEntries.map(entry => {
    const filename = entry.id.replace(/.*\//, '').replace(/\.md$/, '');
    const slug = getReferenceSlug(filename, entry.data.slug);
    const filenameParts = entry.id.replace(/\.md$/, '').split('/');
    const baseFilename = filenameParts[filenameParts.length - 1];

    if (!entry.data.title) {
      entry.data.title = toProperCase(baseFilename);
    }

    return {
      params: { slug },
      props: {
        entry,
        contentType: 'vocabulary'
      }
    };
  });

  // Only declare conceptsPaths ONCE to avoid block-scoped redeclaration errors.
  // Use ONLY the shared getReferenceSlug logic for conceptsPaths. No local slug logic allowed.
  const conceptsPaths = conceptsEntries.map(entry => {
      const filename = entry.id.replace(/\.md$/, '');
      const filenameParts = entry.id.replace(/\.md$/, '').split('/');
    
      const slug = getReferenceSlug(filename, entry.data.slug);
      const baseFilename = filenameParts[filenameParts.length - 1];

      if (!entry.data.title) {
        entry.data.title = toProperCase(baseFilename);
      }
      
      return {
        params: { slug },
        props: {
          entry,
          contentType: 'concepts'
        }
      };
  });
  // Combine both path arrays
  return [...vocabularyPaths, ...conceptsPaths];
}

// Use a more flexible type definition to avoid TypeScript errors
interface Props {
  entry: any;
  contentType: 'vocabulary' | 'concepts';
}

const { entry, contentType } = Astro.props;

// Add content type to the data object for potential use in components
const contentData = {
  path: Astro.url.pathname,
  id: entry.id,
  title: entry.data.title,
  contentType: contentType
};
---

<Layout title={entry.data.title}>
  <OneArticle
    Component={OneArticleOnPage}
    content={entry.body}
    markdownFile={entry.id}
    data={contentData}
  />
</Layout>
