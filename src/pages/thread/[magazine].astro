---
// [magazine].astro
// Dynamic page for rendering a magazine-style layout with prompt/content cards.
// Loads prompt or specs data from Astro collections and passes it as a passthrough array to the layout.
// Follows project rules: NO type safety, NO explicit interfaces, passthrough pattern only.

import Layout from '@layouts/Layout.astro';
import PostCardContentLayout from '../../layouts/PostCardContentLayout.astro';
import { getCollection } from 'astro:content';
import { Astro } from 'astro';

// ***
// Open: Dynamic Collection Loader for Magazine-Style Layout
// Type: Route Logic
// Includes: [getCollection, param-driven collection selection, passthrough transformation]
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Get the [magazine] param from the route (e.g., 'prompts' or 'specs')
const { magazine } = Astro.params;

// Map route param to Astro collection name and URL prefix
const collectionMap = {
  prompts: { collection: 'prompts', urlPrefix: '/prompts/' },
  specs: { collection: 'specs', urlPrefix: '/specs/' }
};

// Default to prompts if unknown param
const { collection, urlPrefix } = collectionMap[magazine] || collectionMap['prompts'];

// Load all entries from the selected collection
const entries = await getCollection(collection);

// Transform the entries to include a URL property and flatten the structure for the card components
const contentThreads = entries.map(entry => {
  // Extract the filename without extension to create a slug
  const pathParts = entry.id.split('/');
  const filename = pathParts[pathParts.length - 1].replace(/\.md$/, '');
  const slug = filename.toLowerCase().replace(/\s+/g, '-');

  return {
    ...entry.data,
    id: entry.id,
    url: `${urlPrefix}${slug}` // Generate URL from filename and collection
    // Include any other properties needed by the card components
  };
});

console.log("DEBUG: Transformed contentThreads:", contentThreads);
// ========================================
// Affects: [contentThreads, PostCardContentLayout]
// Close: Dynamic Collection Loader for Magazine-Style Layout
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
---
<Layout title="Magazine Content">
  <PostCardContentLayout contentThreads={contentThreads} />
</Layout>

<!--
  [magazine].astro loads prompt or specs data from the Astro content collection and transforms it
  to match the expected structure for the card components.

  The transformation adds a URL property and creates a slug from the filename.
  All props are passed through and deconstructed as needed by child components.
  No type enforcement is used; this is required by .windsurfrules.
  Any transformation logic occurs here, not in the card/layout components.
  The route param [magazine] determines which collection to load.
-->
