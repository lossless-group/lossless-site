---
/**
 * /toolkit/[...slug].astro â€” Dynamic Route for Tooling Collection Content
 *
 * Modeled after /more-about/[...slug].astro and /vibe-with/[collection]/[...slug].astro
 * 
 * - Fetches content from the 'tooling' collection (from the 'tooling' directory)
 * - Uses the relative path from the tooling directory as the slug
 * - Generates static paths for all entries
 * - Renders content using Layout, OneArticle, and OneArticleOnPage components
 * - All logic is thoroughly commented and follows project conventions
 */
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import OneArticle from '@layouts/OneArticle.astro';
import OneArticleOnPage from '@components/articles/OneArticleOnPage.astro';
import path from 'path';

// Ensure page is prerendered as static HTML
export const prerender = true;

/**
 * Define a type for the expected entry data structure
 * This helps TypeScript understand what properties are available
 */
interface ToolingEntryData {
  title?: string;
  slug?: string;
  tags: string[];
  [key: string]: any;
}

export async function getStaticPaths() {
  /**
   * Helper function to convert filenames to titles while preserving acronym casing
   * 
   * @param str - The string to convert to proper case
   * @returns The string in proper case with first letter of each word capitalized
   */
  function toProperCase(str: string): string {
    return str
      .replace(/[-_]/g, ' ')
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  // Get all entries from the tooling collection
  const toolingEntries = await getCollection('tooling');
  
  // Debug: Log the number of entries found
  console.log(`Found ${toolingEntries.length} entries in the tooling collection`);
  
  // Process tooling entries to create static paths
  return toolingEntries.map(entry => {
    // Generate slug from the entry ID (relative path from tooling directory)
    const filename = entry.id.replace(/\.md$/, '');
    // Use the full path as the slug, preserving directory structure for nested routes
    const generatedSlug = filename.toLowerCase().replace(/\s+/g, '-');

    // Debug: Log the generated path
    console.log(`Generated path: /toolkit/${generatedSlug}`);

    // Return plain entry and contentType; downstream logic now handles id/title
    return {
      params: { slug: generatedSlug },
      props: {
        entry,
        contentType: 'tooling'
      }
    };
  });
}

// Define the props interface for type safety
interface Props {
  entry: {
    id: string;
    body: string;
    data: {
      title: string;
      slug: string;
      tags: string[];
      [key: string]: any;
    }
  };
  contentType: 'tooling';
}

// Destructure only what is sent in props
const { entry, contentType } = Astro.props;

// Add content metadata for downstream components
// Always use entry.data.title as the single source of truth for the display title
const contentData = {
  path: Astro.url.pathname,
  // Only use the filename (no directory, no extension), preserving exact casing
  id: entry.id.replace(/\\/g, '/').split('/').pop()?.replace(/\.md$/, ''),
  contentType: contentType,
  title: entry.data.title,
};
---

<Layout title={entry.data.title || entry.id.replace(/\.md$/, '')}>
  <OneArticle
    Component={OneArticleOnPage}
    content={entry.body}
    markdownFile={entry.id}
    data={contentData}
  />
</Layout>