---
/**
 * /toolkit/[...slug].astro â€” Dynamic Route for Tooling Collection Content
 *
 * Modeled after /more-about/[...slug].astro and /vibe-with/[collection]/[...slug].astro
 * 
 * - Fetches content from the 'tooling' collection (from the 'tooling' directory)
 * - Uses the relative path from the tooling directory as the slug
 * - Generates static paths for all entries
 * - Renders content using Layout, OneArticle, and OneArticleOnPage components
 * - All logic is thoroughly commented and follows project conventions
 */
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import OneArticle from '@layouts/OneArticle.astro';
import OneArticleOnPage from '@components/articles/OneArticleOnPage.astro';
import { getReferenceSlug } from '@utils/slugify';
import { DEBUG_TOOLING } from '@utils/envUtils';
import { AppConfig } from '@utils/appConfig';

// Ensure page is prerendered as static HTML
export const prerender = true;


export async function getStaticPaths() {

  // Get all entries from the tooling collection
  const toolingEntries = await getCollection('tooling');
  
  // Debug: Log the number of entries found
  console.log(`Found ${toolingEntries.length} entries in the tooling collection`);
  
  // Process tooling entries to create static paths
  return toolingEntries.map(entry => {
    const generatedSlug = getReferenceSlug(entry.id)
    if (DEBUG_TOOLING) {
      console.log(`Generated path: /toolkit/${generatedSlug}`);
    }

    return {
      params: { slug: generatedSlug },
      props: {
        entry,
        contentType: 'tooling'
      }
    };
  }).filter(path => {
    // Exclude any paths that would conflict with /toolkit/vertical/*
    // This ensures /toolkit/vertical/* routes go to the vertical-specific page
    return !path.params.slug.startsWith('vertical/');
  });
}

// Define the props interface for type safety
interface Props {
  entry: {
    id: string;
    body: string;
    data: {
      title: string;
      slug: string;
      tags: string[];
      [key: string]: any;
    }
  };
  contentType: 'tooling';
}

// Destructure only what is sent in props
const { entry, contentType } = Astro.props;

// Add content metadata for downstream components
// Always use entry.data.title as the single source of truth for the display title
const contentData = {
  path: Astro.url.pathname,
  // Only use the filename (no directory, no extension), preserving exact casing
  id: entry.id.replace(/\\/g, '/').split('/').pop()?.replace(/\.md$/, ''),
  contentType: contentType,
  title: entry.data.title,
};

// Generate the custom OG image URL for this toolkit entry
const generatedSlug = getReferenceSlug(entry.id);
// Remove the 'tooling/' prefix from the slug since we're already in the /toolkit/ route
const cleanSlug = generatedSlug.replace(/^tooling\//, '');
const customOgImage = `${AppConfig.site}/toolkit/${cleanSlug}/og.png`;

// Debug logging for OG image generation
if (DEBUG_TOOLING) {
  console.log(`ðŸ”— Generated OG image URL for ${entry.id}: ${customOgImage}`);
}
---

<Layout 
  title={entry.data.title || entry.id.replace(/\.md$/, '')}
  frontmatter={{
    ...entry.data,
    og_image: customOgImage // Override with our custom generated image
  }}
>
  <OneArticle
    Component={OneArticleOnPage}
    title={entry.data.title || entry.id.replace(/\.md$/, '')}
    content={entry.body}
    markdownFile={entry.id}
    data={contentData}
  />
</Layout>