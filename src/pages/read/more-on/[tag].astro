---
/**
 * /read/more-on/[tag].astro â€” Essays Tag Filter Page (Dynamic Route)
 *
 * Mirrors /vibe-with/[tag].astro, but filters only the 'essays' collection.
 *
 * Implements tag-based filtering for essays, following unified routing and commenting conventions.
 *
 * - Loads all entries from the 'essays' collection
 * - Filters for items where tags include the selected tag (case-insensitive)
 * - Renders a list with links to /read/essays/[...slug]
 * - Handles empty state with a friendly message
 * - All logic is thoroughly commented and DRY
 */
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import TagChip from '@components/tool-components/TagChip.astro';
import ArticleListNewsPreview from '@components/articles/ArticleListNewsPreview.astro';
import ArticleListColumn from '@components/articles/ArticleListColumn.astro';
export const prerender = false;

// ================================================================================
// Inline Type Definitions for [tag].astro (Essays version)
// ----------------------------------------------------------------
/**
 * Interface for an essay item, matching the data structure output by essaysCollection
 * (see src/content.config.ts for schema and transforms)
 *
 * NOTE: The 'published' property is not part of the global schema, but we extend the type locally here
 * to allow TypeScript-safe access. This keeps content.config.ts simple for the content team.
 */
interface EssayFrontmatter {
  title: string;
  slug?: string;
  lede?: string;
  summary?: string;
  authors?: string[];
  tags?: string[];
  date_authored_initial_draft?: string;
  banner_image?: string;
  published?: boolean;
  // ...any other frontmatter fields
}

interface EssayItem {
  id: string;
  slug: string;
  title?: string;
  lede?: string;
  banner_image?: string;
  tags?: string[];
  summary?: string;
  data: EssayFrontmatter;
  url: string;
  tagRoute: string;
}

// ================================================================================
// PARAMS & DATA
// Get the tag from the dynamic route param
const { tag } = Astro.params;

// Fetch all essays from the essays collection
const essayEntries = await getCollection('essays');

// Filter by tag (case-insensitive)
const filteredEssays = essayEntries.filter(entry => {
  const tags = (entry.data as EssayFrontmatter).tags || [];
  return Array.isArray(tags) && tags.some(t => t.toLowerCase() === tag.toLowerCase());
});

// Filter out essays where published === false (default is published unless explicitly false)
const publishedEssays = filteredEssays.filter(entry => {
  const data = entry.data as EssayFrontmatter;
  return data.published !== false;
});

// Sort essays by title (or another property if desired)
publishedEssays.sort((a, b) => (a.data.title || '').localeCompare(b.data.title || ''));

// Map entries to EssayItem objects for use with ArticleListColumn
const essayItems: EssayItem[] = publishedEssays.map(entry => {
  // Always generate slug using the same logic as content.config.ts (filename, lowercased, spaces to dash)
  const filename = String(entry.id).split("/").pop()?.replace(/\.md$/, "") || "";
  const generatedSlug = filename.toLowerCase().replace(/\s+/g, '-');
  // Use title and lede directly from frontmatter, fallback to Title Case filename if title is missing or blank
  let { title, lede = '', banner_image = '', tags = [], summary = '' } = entry.data as EssayFrontmatter;
  if (!title || title.trim() === '') {
    title = filename
      .split(/[-_\s]+/)
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }
  return {
    id: entry.id,
    slug: generatedSlug,
    title,
    lede,
    banner_image,
    tags,
    summary,
    data: entry.data as EssayFrontmatter,
    url: `/read/essays/${generatedSlug}`,
    tagRoute: `read/more-on`
  };
});
// Debug output for inspection
console.log(essayItems);
---
<Layout title={`Essays tagged '${tag}'`}>
  <header class="display-by-tag-row">
    <h1>Essays tagged:</h1>
    <TagChip tagString={tag} route="read/more-on" fontSize="var(--fs-400)" includeCount={true} count={essayItems.length}/>
  </header>
  <div class="news-preview-list-direct">
    <!--
      Render ArticleListColumn for all results, passing ArticleListNewsPreview as EntryComponent.
      This matches the toolkit tag page convention and ensures columnar, DRY rendering.
    -->
    <ArticleListColumn entries={essayItems} EntryComponent={ArticleListNewsPreview} EntryComponentProps={{ tagRoute: "read/more-on" }} />
  </div>
</Layout>

<style>
  header {
    padding: 2rem 1rem 1rem 1rem;
  }
  .display-by-tag-row {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.75em;
    margin-bottom: 1.5em;
  }
  h1 {
    font-size: var(--fs-400);
    margin: 0;
    padding: -4px;
    line-height: 1.2;
  }
  .empty-message {
    margin-top: 2em;
    font-size: var(--fs-300);
    color: var(--clr-lossless-primary-darkest);
    background: var(--clr-lossless-primary-glass);
    border-radius: 0.3em;
    padding: 1.2em 1.5em;
    box-shadow: 0 2px 8px rgba(0,0,0,0.03);
    max-width: 32em;
  }
  .news-preview-list-direct {
    max-width: 88vw;
    /* Center the news preview list horizontally in the page */
    margin-left: auto;
    margin-right: auto;
    display: block;
  }
</style>