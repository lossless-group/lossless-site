---
// site/src/reader/index.astro
// This page renders a grid of essays from the essaysCollection, styled and structured to match
// the approach of site/src/pages/more-about/index.astro, per project rules.
// Aggressive, detailed commenting is used throughout.

import path from 'node:path';
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import ThinGradientBleedSeparator from '@components/basics/separators/ThinGradientBleedSeparator.astro';
// Importing the CollectionEntryRow component for rendering each essay entry in the grid below
import CollectionEntryRow from '@components/basics/CollectionEntryRow.astro';
import ArticleListColumn from '@components/articles/ArticleListColumn.astro';
import ArticleListNewsPreview from '@components/articles/ArticleListNewsPreview.astro';
/**
 * Interface for an essay item, matching the data structure output by essaysCollection
 * (see src/content.config.ts for schema and transforms)
 *
 * NOTE: The 'published' property is not part of the global schema, but we extend the type locally here
 * to allow TypeScript-safe access. This keeps content.config.ts simple for the content team.
 */
interface EssayFrontmatter {
  title: string;
  slug?: string;
  lede?: string;
  summary?: string;
  authors?: string[];
  tags?: string[];
  date_authored_initial_draft?: string;
  banner_image?: string;
  published?: boolean;
  // ...any other frontmatter fields
}

interface EssayItem {
  id: string;
  slug: string;
  title?: string;
  lede?: string;
  banner_image?: string;
  tags?: string[];
  summary?: string;
  data: EssayFrontmatter;
  url: string;
}

// Fetch all essays from the essays collection
const essayEntries = await getCollection('essays');

// Filter out essays where published === false (default is published unless explicitly false)
// We assert the type to include 'published' for TypeScript safety, as this property is not globally defined.
const publishedEssays = essayEntries.filter(entry => {
  const data = entry.data as EssayFrontmatter; // Type assertion for local safety
  return data.published !== false;
});

// Sort essays by title (or another property if desired)
publishedEssays.sort((a, b) => (a.data.title || '').localeCompare(b.data.title || ''));

// Map entries to EssayItem objects for use with CollectionEntryRow
const essayItems: EssayItem[] = publishedEssays.map(entry => {
  // Use Node.js path module to robustly extract the filename (preserving case)
  // - entry.id is always the relative path from the collection root, with original casing
  // - path.basename is safer and clearer than split/pop
  const filename = path.basename(entry.id, '.md'); // Preserves original case
  const slug = filename.toLowerCase().replace(/\s+/g, '-');
  // Use title and lede directly from frontmatter, fallback to filename (preserving case, dashes/underscores to space)
  let { title, lede = '', banner_image = '', tags = [], summary = '' } = entry.data as EssayFrontmatter;
  if (!title || title.trim() === '') {
    // Use the filename as the fallback title, preserving original casing
    // - Replace dashes/underscores with spaces
    // - Collapse multiple spaces
    // - DO NOT change the case of any letters (e.g., 'API' stays 'API')
    title = filename
      .replace(/[-_]/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
  }
  return {
    id: entry.id,
    slug,
    title,
    lede,
    banner_image,
    tags,
    summary,
    data: entry.data as EssayFrontmatter,
    // url property for downstream components (e.g., ArticleListNewsPreview)
    url: `/read/essays/${slug}`,
    tagRoute: `read/more-on`
  };
});

console.log(essayItems);

// Render the page with the filtered and sorted essays
---

<Layout title="The Losslesss Reader">
  <div class="container mx-auto py-8 px-4">
    <h1 class="text-3xl font-bold mb-6">Reader: Essays</h1>
    <p class="text-lg mb-8">Browse essays and longform writing from our library.</p>

    <div class="flex gap-4 mb-8">
      <a href="/read/through" class="px-4 py-2 bg-blue-600 text-white rounded-md">All Essays</a>
      <!-- Add more navigation as needed -->
    </div>

    <section class="mb-12">
      <h2 class="text-2xl font-bold mb-4">Essays</h2>
      <p class="mb-6">Longform writing, research, and commentary.</p>
      {/*
        Render ArticleListColumn for all essays, passing ArticleListNewsPreview as EntryComponent.
        This mirrors the columnar, DRY rendering pattern from the [tag].astro page for consistency.
        - entries: essayItems (array of essay data)
        - EntryComponent: ArticleListNewsPreview (renders each essay row)
      */}
      <ArticleListColumn entries={essayItems} EntryComponent={ArticleListNewsPreview} />
    </section>

    <ThinGradientBleedSeparator height="2px" marginTop="2rem" marginBottom="2rem" />

    <!-- You can add additional sections or features here if desired -->
  </div>
</Layout>
