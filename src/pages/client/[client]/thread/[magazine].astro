---
// thread/[magazine].astro (converted to static generation)
import Layout from '@layouts/Layout.astro';
import PostCardContentLayout from '@layouts/PostCardContentLayout.astro';
import { getCollection } from 'astro:content';
import { processEntries } from '@utils/slugify';

export const prerender = true;

export async function getStaticPaths() {
  const collectionMap = {
    'recommendations': { collection: 'client-recommendations', urlPrefix: '/client/' },
    'portfolio': { collection: 'client-portfolios', urlPrefix: '/client/' },
  };

  const paths = [];

  // Dynamically get all entries from all collections to discover clients
  const allRecommendations = await getCollection('client-recommendations');
  const allPortfolios = await getCollection('client-portfolios');
  const allEntries = [...allRecommendations, ...allPortfolios];
  
  // Extract unique client names from the entry paths, preserving original case
  const clientsMap = new Map();
  allEntries.forEach(entry => {
    const entryPath = String(entry.id);
    const pathParts = entryPath.split('/');
    const originalClientName = pathParts[0];
    const lowercaseClientName = originalClientName.toLowerCase();
    if (!clientsMap.has(lowercaseClientName)) {
      clientsMap.set(lowercaseClientName, originalClientName);
    }
  });

  for (const [magazineKey, { collection, urlPrefix }] of Object.entries(collectionMap)) {
    const entries = await getCollection(collection);
    const processedEntries = processEntries(entries);
    console.log("===PROCESSED ENTRIES===", processedEntries.map(entry => entry.id));

    // For each dynamically discovered client, filter and generate paths
    for (const [lowercaseClient, originalClient] of clientsMap.entries()) {
      // Filter entries for this specific client
      const clientEntries = processedEntries.filter(entry => {
        // Check if the entry path contains the client name
        const entryPath = String(entry.id);
        return entryPath.toLowerCase().includes(lowercaseClient);
      });

      const sortedEntries = clientEntries.slice().sort((a, b) => {
        const aDate = a.data.date_authored_current_draft;
        const bDate = b.data.date_authored_current_draft;

        if (aDate && bDate) {
          const aStr = String(aDate);
          const bStr = String(bDate);
          return bStr.localeCompare(aStr);
        }
        if (aDate) return -1;
        if (bDate) return 1;
        return 0;
      });

      const contentThreads = sortedEntries.map(entry => {
        let tags = entry.data.tags;
        if (typeof tags === 'string') {
          tags = tags.split(',').map(t => t.trim()).filter(Boolean);
        }
        if (!Array.isArray(tags)) tags = [];

        return {
          ...entry.data,
          title: entry.data.title,
          tags,
          id: entry.id,
          url: `${urlPrefix}${entry.slug}`
        };
      });
      
      paths.push({
        params: { 
          client: lowercaseClient,
          magazine: magazineKey 
        },
        props: { contentThreads, actualClientName: originalClient },
      });
    }
  }

  return paths;
}

const { contentThreads } = Astro.props;

// Define frontmatter data for the client magazine page
const frontmatter = {
  title: "Magazine Content",
  description: "A collection of curated content from our magazine",
  lede: "A collection of curated content from our magazine"
};
---
<Layout frontmatter={frontmatter}>
  <PostCardContentLayout contentThreads={contentThreads} />
</Layout>
