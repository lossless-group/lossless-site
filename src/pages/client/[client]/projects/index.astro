---
/**
 * /client/[client]/projects/index.astro ‚Äî Dynamic Client Projects Index
 * 
 * Uses the Map of Contents (MOC) system to dynamically list projects for each client
 * based on the :::projects directive in their MOC file (content/moc/<Client>.md).
 * 
 * Example MOC structure:
 * :::projects
 * - "augment-it"
 * - "ace-it"
 * :::
 */

import fs from 'node:fs/promises';
import path from 'node:path';
import { getCollection } from 'astro:content';
import { toProperCase } from '@utils/slugify';
import { contentBasePath } from '@utils/envUtils';
import { loadGalleryConfig } from '@utils/projectGalleryUtils';
import { getReferenceSlug } from '@utils/slugify';

// Layout and component imports
import Layout from '@layouts/Layout.astro';
import Hero from '@components/basics/Hero.astro';
import AnimationWrapper from '@components/basics/AnimationWrapper.astro';

export const prerender = true;

export async function getStaticPaths() {
  // Get all available clients from the moc directory
  const mocDir = path.resolve(contentBasePath, 'moc');
  
  try {
    const mocFiles = await fs.readdir(mocDir);
    const clientFiles = mocFiles.filter(file => file.endsWith('.md'));
    
    const paths = clientFiles.map(file => {
      const client = file.replace('.md', '').toLowerCase();
      return {
        params: { client },
        props: { client }
      };
    });
    
    return paths;
  } catch (error) {
    return [];
  }
}

const { client } = Astro.props;
const properClient = toProperCase(client);

// Load project gallery configuration
const galleryConfig = loadGalleryConfig();

// Load projects from the client's MOC file and transform to gallery format
let projectCovers: any[] = [];
let debugInfo = {
  mocPath: '',
  mocExists: false,
  mocContent: '',
  projectsBlockFound: false,
  projectsBlock: '',
  parsedProjects: [],
  allProjects: [],
  matchingProjects: [],
  matchingAttempts: [],
  error: null
};

try {
  const clientMocPath = path.resolve(contentBasePath, 'moc', `${properClient}.md`);
  debugInfo.mocPath = clientMocPath;
  
  const rawClientMoc = await fs.readFile(clientMocPath, 'utf-8');
  debugInfo.mocExists = true;
  debugInfo.mocContent = rawClientMoc;
  
  // Extract the :::projects ... ::: block
  const projectsBlockMatch = rawClientMoc.match(/:::projects([\s\S]*?):::/i);
  debugInfo.projectsBlockFound = !!projectsBlockMatch;
  
  if (projectsBlockMatch) {
    const block = projectsBlockMatch[1] || '';
    debugInfo.projectsBlock = block;
    const projectLines = block
      .split('\n')
      .map(line => line.trim())
      .filter(line => line.startsWith('-') || line.startsWith('*'));
    
    const mocProjectEntries = projectLines
      .map(line => {
        // Handle quoted project IDs: - "project-id"
        const quotedMatch = line.match(/^[-*]\s*"([^"]+)"$/);
        if (quotedMatch) {
          return {
            id: quotedMatch[1].trim(),
            name: null,
            path: null,
            canvasPath: null
          };
        }
        
        // Handle new directive format: { path: [[path]], title: "Title" }
        const directiveMatch = line.match(/^[-*]\s*\{\s*path:\s*\[\[([^\]]+)\]\]\s*,\s*title:\s*"([^"]+)"\s*\}/);
        if (directiveMatch) {
          return {
            id: null,
            name: directiveMatch[2].trim(),
            path: directiveMatch[1].trim(),
            canvasPath: null
          };
        }
        
        // Handle legacy [[canvas/path.canvas|Project Name]] syntax
        const linkMatch = line.match(/^[-*]\s*\[\[([^|\]]+)(?:\|([^\]]+))?\]\]/);
        if (linkMatch) {
          return {
            id: null,
            name: linkMatch[2] ? linkMatch[2].trim() : linkMatch[1].trim(),
            path: linkMatch[1].trim(),
            canvasPath: linkMatch[2] ? linkMatch[1].trim() : null
          };
        }
        
        // Handle plain list items
        const plainText = line.replace(/^[-*]\s*/, '').trim();
        return plainText ? { id: null, name: plainText, path: null, canvasPath: null } : null;
      })
      .filter(Boolean);
    
    debugInfo.parsedProjects = mocProjectEntries;
    
    if (mocProjectEntries.length > 0) {
      // Match MOC project entries to gallery configuration
      for (const entry of mocProjectEntries) {
        const matchingAttempt = {
          entryId: entry.id,
          entryName: entry.name,
          attempts: []
        };
        
        let matchingProject = null;
        
        // Try to find project by ID first (for quoted project IDs)
        if (entry.id) {
          matchingProject = galleryConfig.projects[entry.id];
          matchingAttempt.attempts.push({
            method: 'id_match',
            projectId: entry.id,
            match: !!matchingProject
          });
        }
        
        // If no match by ID, try by name
        if (!matchingProject && entry.name) {
          const projectByName = Object.values(galleryConfig.projects).find(project => 
            project.title.toLowerCase() === entry.name.toLowerCase()
          );
          
          matchingAttempt.attempts.push({
            method: 'name_match',
            projectName: entry.name,
            foundProject: projectByName?.title,
            match: !!projectByName
          });
          
          if (projectByName) {
            matchingProject = projectByName;
          }
        }
        
        debugInfo.matchingAttempts.push(matchingAttempt);
        
        if (matchingProject) {
          // Transform to gallery format
          const projectCover = {
            id: matchingProject.id,
            title: matchingProject.title,
            subtitle: matchingProject.subtitle,
            href: matchingProject.href,
            hasSidebar: matchingProject.hasSidebar,
            demoSteps: matchingProject.demoSteps,
            useCases: matchingProject.useCases,
            canvasPath: entry.canvasPath || `content/projects/${matchingProject.id}.canvas`
          };
          
          projectCovers.push(projectCover);
          debugInfo.matchingProjects.push({
            entryId: entry.id,
            entryName: entry.name,
            projectId: matchingProject.id,
            path: entry.path,
            canvasPath: entry.canvasPath
          });
        }
      }
    }
  }
} catch (error) {
  debugInfo.error = error.message;
}

// Fallback: if no projects found via MOC, show message
const hasProjects = projectCovers.length > 0;

const pageTitle = `${properClient} Projects`;
const pageDescription = hasProjects 
  ? `Explore ${projectCovers.length} project${projectCovers.length === 1 ? '' : 's'} for ${properClient}.`
  : `No projects currently configured for ${properClient}.`;
---

<Layout 
  title={pageTitle}
  description={pageDescription}
>
  <main>
    <Hero 
      title={pageTitle}
      description={pageDescription}
    />
    
    <AnimationWrapper>
      {hasProjects ? (
        <div class="projects-page-container">
          <!-- Project Gallery Grid -->
          <section class="covers-grid">
            {projectCovers.map(project => (
              <article class="project-cover card">
                <header class="cover-hero">
                  <div class="cover-titles">
                    <h2 class="cover-title">{project.title}</h2>
                    <p class="cover-subtitle">{project.subtitle}</p>
                  </div>
                </header>
                
                {project.useCases && project.useCases.length > 0 && (
                  <div class="usecases">
                    {project.useCases.map(useCase => (
                      <div class="usecase-card">
                        <h3 class="usecase-title">{useCase.title}</h3>
                        <p class="usecase-desc">{useCase.description}</p>
                      </div>
                    ))}
                  </div>
                )}
                
                <div class="cover-expand">
                  <a 
                    href={project.demoSteps && project.demoSteps.length > 0 
                      ? (project.demoSteps.find(step => step.type === 'orientation')?.href 
                          ? getReferenceSlug(project.demoSteps.find(step => step.type === 'orientation')?.href)
                          : getReferenceSlug(project.href))
                      : getReferenceSlug(project.href)
                    }
                    class="toggle"
                    aria-label="View Project"
                  >
                    <span class="toggle-label">View Project</span>
                    <span class="chev" aria-hidden="true">
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="m21 21-6-6m6 6v-4.8m0 4.8h-4.8"/>
                        <path d="M3 16.2V21m0 0h4.8M3 21l6-6"/>
                        <path d="M21 7.8V3m0 0h-4.8M21 3l-6 6"/>
                        <path d="M3 7.8V3m0 0h4.8M3 3l6 6"/>
                      </svg>
                    </span>
                  </a>
                </div>
              </article>
            ))}
          </section>
        </div>
      ) : (
        <section class="projects-section">
          <div class="no-projects-message">
            <h2>No Projects Available</h2>
            <p>
              Projects for {properClient} are configured via the MOC (Map of Contents) system.
              To add projects, update the <code>:::projects</code> section in 
              <code>content/moc/{properClient}.md</code>.
            </p>
            
            <details class="debug-info">
              <summary>üîç Debug Information (Click to expand)</summary>
              <div class="debug-content">
                <h4>MOC File Path:</h4>
                <code>{debugInfo.mocPath}</code>
                
                <h4>MOC File Exists:</h4>
                <code>{debugInfo.mocExists ? 'Yes' : 'No'}</code>
                
                {debugInfo.error && (
                  <div>
                    <h4>Error:</h4>
                    <code class="error">{debugInfo.error}</code>
                  </div>
                )}
                
                <h4>Projects Block Found:</h4>
                <code>{debugInfo.projectsBlockFound ? 'Yes' : 'No'}</code>
                
                {debugInfo.projectsBlock && (
                  <div>
                    <h4>Projects Block Content:</h4>
                    <pre><code>{debugInfo.projectsBlock}</code></pre>
                  </div>
                )}
                
                <h4>Parsed Projects ({debugInfo.parsedProjects.length}):</h4>
                <pre><code>{JSON.stringify(debugInfo.parsedProjects, null, 2)}</code></pre>
                
                <h4>Available Projects in Gallery Config ({Object.keys(galleryConfig.projects).length}):</h4>
                <pre><code>{JSON.stringify(Object.keys(galleryConfig.projects), null, 2)}</code></pre>
                
                <h4>Matching Attempts:</h4>
                <pre><code>{JSON.stringify(debugInfo.matchingAttempts, null, 2)}</code></pre>
                
                <h4>Matching Projects ({debugInfo.matchingProjects.length}):</h4>
                <pre><code>{JSON.stringify(debugInfo.matchingProjects, null, 2)}</code></pre>
                
                <h4>Full MOC File Content:</h4>
                <pre><code>{debugInfo.mocContent}</code></pre>
              </div>
            </details>
            
            <details class="moc-help">
              <summary>How to configure projects</summary>
              <div class="moc-example">
                <h4>Add this to <code>{contentBasePath}/moc/{properClient}.md</code>:</h4>
                <pre><code>:::projects
- "augment-it"
- "ace-it"
:::</code></pre>
                <p>
                  The project IDs should match the keys in <code>src/config/project-gallery.json</code>.
                </p>
                <p>
                  Legacy formats are also supported:
                </p>
                <pre><code>:::projects
- {'{'} path: [[projects/Augment-It/Specs/Data Augmentation Workflow with Microfrontends]], title: "Augment-It" {'}'}
- [[Project Name]]
:::</code></pre>
              </div>
            </details>
          </div>
        </section>
      )}
    </AnimationWrapper>
  </main>
</Layout>

<style>
.projects-page-container {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-6, 1.5rem);
  margin: 2rem auto;
  padding: 0 var(--spacing-4, 1rem);
  width: 100%;
}

.projects-section {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem 1.5rem;
}

.covers-grid { 
  display: grid; 
  gap: 2rem; 
  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
  max-width: 1200px;
  margin: 0 auto;
}

.project-cover { 
  padding: 1.5rem; 
  background: linear-gradient(135deg, 
    color-mix(in oklab, var(--clr-lossless-primary-glass), transparent 95%) 0%,
    color-mix(in oklab, var(--clr-lossless-primary-glass), transparent 98%) 100%
  );
  border: 1px solid color-mix(in oklab, var(--clr-lossless-primary-light), transparent 80%);
  border-radius: 16px;
  box-shadow: 
    0 4px 20px color-mix(in oklab, var(--clr-lossless-primary-dark), transparent 90%),
    0 1px 3px color-mix(in oklab, black, transparent 95%);
  transition: all 200ms ease;
  position: relative;
  overflow: hidden;
}

.project-cover::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: linear-gradient(90deg, 
    var(--clr-lossless-primary-light) 0%,
    var(--clr-lossless-primary) 50%,
    var(--clr-lossless-primary-light) 100%
  );
  opacity: 0.6;
}

.cover-hero { 
  display: flex; 
  align-items: center; 
  gap: 1.25rem; 
  margin-bottom: 0.5rem;
}

.cover-titles { display: grid; gap: 0.4rem; }

.cover-title { 
  margin: 0; 
  font-size: clamp(1.4rem, 2.8vw, 1.8rem); 
  font-weight: 600;
  color: var(--clr-heading);
  text-shadow: 0 1px 2px color-mix(in oklab, black, transparent 95%);
}

.cover-subtitle { 
  margin: 0; 
  color: var(--clr-body); 
  opacity: 0.85; 
  font-size: 1rem;
  line-height: 1.4;
  font-weight: 400;
}

.usecases { 
  display: grid; 
  grid-template-columns: repeat(2, minmax(0, 1fr)); 
  gap: 1rem; 
  margin-top: 1.25rem; 
}

.usecase-card {
  display: grid; 
  gap: 0.5rem; 
  padding: 1.25rem; 
  color: var(--clr-heading);
  background: linear-gradient(135deg,
    color-mix(in oklab, var(--clr-lossless-primary-glass), transparent 85%) 0%,
    color-mix(in oklab, var(--clr-lossless-primary-glass), transparent 90%) 100%
  );
  border: 1px solid color-mix(in oklab, var(--clr-lossless-ui-btn-border), transparent 70%);
  border-radius: 14px;
  box-shadow: 
    0 3px 12px color-mix(in oklab, var(--clr-lossless-primary-dark), transparent 88%),
    inset 0 1px 0 color-mix(in oklab, white, transparent 95%);
  position: relative;
  overflow: hidden;
}

.usecase-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, 
    transparent 0%,
    color-mix(in oklab, var(--clr-lossless-primary-light), transparent 70%) 50%,
    transparent 100%
  );
}

.usecase-title { 
  margin: 0; 
  font-size: 1.1rem; 
  font-weight: 600;
  line-height: 1.3;
}

.usecase-desc { 
  margin: 0; 
  color: var(--clr-body); 
  opacity: 0.85; 
  font-size: 0.95rem;
  line-height: 1.4;
}

.cover-expand { 
  margin-top: 1rem; 
  border-top: 1px solid color-mix(in oklab, var(--clr-lossless-primary-light), transparent 85%); 
  padding-top: 1rem; 
  position: relative;
}

.cover-expand::before {
  content: '';
  position: absolute;
  top: -1px;
  left: 50%;
  transform: translateX(-50%);
  width: 60px;
  height: 1px;
  background: linear-gradient(90deg, 
    transparent 0%,
    var(--clr-lossless-primary-light) 50%,
    transparent 100%
  );
}

.toggle { 
  display: inline-flex; 
  align-items: center; 
  gap: 0.5rem; 
  padding: 0.6rem 1rem; 
  border-radius: 10px; 
  border: 1px solid color-mix(in oklab, var(--clr-lossless-ui-btn-border), transparent 60%); 
  background: linear-gradient(135deg,
    var(--surface-2) 0%,
    color-mix(in oklab, var(--surface-2), var(--surface-3) 30%) 100%
  );
  color: var(--clr-body); 
  user-select: none;
  font-weight: 500;
  transition: all 200ms ease;
  box-shadow: 
    0 2px 8px color-mix(in oklab, black, transparent 92%),
    inset 0 1px 0 color-mix(in oklab, white, transparent 95%);
  text-decoration: none;
}

.toggle:hover {
  transform: translateY(-1px);
  box-shadow: 
    0 4px 12px color-mix(in oklab, black, transparent 88%),
    inset 0 1px 0 color-mix(in oklab, white, transparent 90%);
  border-color: color-mix(in oklab, var(--clr-lossless-primary), transparent 70%);
  color: var(--clr-body);
}

.chev { 
  transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);
  font-size: 1.1em;
}

.no-projects-message {
  text-align: center;
  max-width: 600px;
  margin: 4rem auto;
  padding: 2rem;
  background: var(--clr-surface-secondary, #f8f9fa);
  border-radius: 1rem;
  border: 1px solid var(--clr-border-subtle, #e1e5e9);
}

.no-projects-message h2 {
  color: var(--clr-text-primary, #1a1a1a);
  margin-bottom: 1rem;
  font-size: var(--fs-600, 1.5rem);
}

.no-projects-message p {
  color: var(--clr-text-secondary, #666);
  line-height: 1.6;
  margin-bottom: 1.5rem;
}

.no-projects-message code {
  background: var(--clr-surface-tertiary, #e9ecef);
  padding: 0.2rem 0.4rem;
  border-radius: 0.25rem;
  font-family: var(--ff-mono, 'Fira Code', monospace);
  font-size: 0.9em;
}

.debug-info {
  text-align: left;
  margin-top: 2rem;
  border: 2px solid #ff6b6b;
  border-radius: 0.5rem;
  background: #fff5f5;
}

.debug-info summary {
  cursor: pointer;
  font-weight: 600;
  color: #d63031;
  padding: 1rem;
  border-radius: 0.5rem;
  transition: background-color 0.2s ease;
}

.debug-info summary:hover {
  background: #ffe0e0;
}

.debug-content {
  padding: 1rem;
  border-top: 1px solid #ff6b6b;
  background: white;
}

.debug-content h4 {
  margin: 1.5rem 0 0.5rem 0;
  color: #2d3436;
  font-size: 0.9rem;
  font-weight: 600;
}

.debug-content h4:first-child {
  margin-top: 0;
}

.debug-content code {
  display: block;
  background: #f8f9fa;
  padding: 0.5rem;
  border-radius: 0.25rem;
  font-family: var(--ff-mono, 'Fira Code', monospace);
  font-size: 0.8rem;
  word-break: break-all;
}

.debug-content code.error {
  background: #ffe0e0;
  color: #d63031;
}

.debug-content pre {
  background: #f8f9fa;
  padding: 1rem;
  border-radius: 0.5rem;
  overflow-x: auto;
  margin: 0.5rem 0;
  border: 1px solid #e1e5e9;
}

.debug-content pre code {
  display: block;
  background: none;
  padding: 0;
  word-break: normal;
  white-space: pre;
}

.moc-help {
  text-align: left;
  margin-top: 2rem;
}

.moc-help summary {
  cursor: pointer;
  font-weight: 600;
  color: var(--clr-lossless-primary, #333);
  padding: 0.5rem;
  border-radius: 0.5rem;
  transition: background-color 0.2s ease;
}

.moc-help summary:hover {
  background: var(--clr-surface-tertiary, #e9ecef);
}

.moc-example {
  margin-top: 1rem;
  padding: 1rem;
  background: var(--clr-surface-primary, #fff);
  border-radius: 0.5rem;
  border: 1px solid var(--clr-border-subtle, #e1e5e9);
}

.moc-example h4 {
  margin-bottom: 0.5rem;
  color: var(--clr-text-primary, #1a1a1a);
  font-size: var(--fs-400, 1rem);
}

.moc-example pre {
  background: var(--clr-surface-tertiary, #e9ecef);
  padding: 1rem;
  border-radius: 0.5rem;
  overflow-x: auto;
  margin: 1rem 0;
}

.moc-example code {
  font-family: var(--ff-mono, 'Fira Code', monospace);
  font-size: 0.9em;
}

@media (max-width: 768px) {
  .project-cover { padding: 1.25rem; }
  .cover-hero { gap: 1rem; }
  .usecases { grid-template-columns: 1fr; gap: 0.75rem; }
  .usecase-card { padding: 1rem; }
  .covers-grid {
    grid-template-columns: 1fr;
  }
  
  .projects-section {
    padding: 1.5rem 1rem;
  }
  
  .no-projects-message {
    margin: 2rem auto;
    padding: 1.5rem;
  }
}
</style>
