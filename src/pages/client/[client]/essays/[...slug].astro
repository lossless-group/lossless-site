---
import ClientPortalLayout from '@layouts/ClientPortalLayout.astro'
import { getCollection } from 'astro:content';
import { processEntries, getReferenceSlug, toProperCase } from '@utils/slugify';
import path from 'node:path';

export const getStaticPaths = async () => {
  const allEntries = await getCollection('client-content');

  return allEntries
    .filter(entry => entry.id.includes('/essays/'))
    .map(entry => {
      const [client] = entry.id.split('/');
      const filename = path.basename(entry.id).replace(/\.(md|mdx)$/, '');
      const slug = getReferenceSlug(filename);

      return {
        params: {
          client,
          slug: slug,
        },
        props: {
          client,
          entry,
          slug: slug,
          essays: allEntries.filter(e => e.id.startsWith(`${client}/essays/`)),
        },
      };
    });
};
const { client, slug } = Astro.props;

const allEntries = await getCollection('client-content');
const rawEssays = allEntries.filter(entry =>
  entry.id.startsWith(`${client.toLowerCase()}/essays/`)
);
const processedEssays = processEntries(rawEssays);
const currentEssay = processedEssays.find(e => {
  const parts = e.slug.split('/');
  const lastPart = parts[parts.length - 1];
  return lastPart === slug;
});
// Load vocab/concepts
const allVocabulary = processEntries(await getCollection('vocabulary'));
const allConcepts = processEntries(await getCollection('concepts'));

import fs from 'node:fs/promises';
import { contentBasePath } from '@utils/envUtils';

const referenceTermsPath = path.resolve(
  contentBasePath,
  `client-content/${toProperCase(client)}/reference-terms.json`
);

let referenceTerms = { vocabulary: [], concepts: [] };

try {
  const raw = await fs.readFile(referenceTermsPath, 'utf-8');
  referenceTerms = JSON.parse(raw);
} catch (err) {
  console.warn(`No reference terms found for client: ${client}`);
}
const vocabSlugs = referenceTerms.vocabulary.map(getReferenceSlug);
const conceptSlugs = referenceTerms.concepts.map(getReferenceSlug);

const clientVocab = allVocabulary.filter(entry => vocabSlugs.includes(entry.slug));
const clientConcepts = allConcepts.filter(entry => conceptSlugs.includes(entry.slug));

console.log("Passing", processedEssays[0].slug, slug, 'essays')
---

<ClientPortalLayout 
  client={client}
  currentEssay={currentEssay}
  essays={processedEssays}
  clientVocab={clientVocab}
  clientConcepts={clientConcepts}
/>
