---
/**
 * /client/[client]/portfolio/[slug].astro â€” Dynamic Route for Client Portfolio
 * Renders a single portfolio item
 */
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import OneArticle from '@layouts/OneArticle.astro';
import OneArticleOnPage from '@components/articles/OneArticleOnPage.astro';

// Ensure page is prerendered as static HTML
export const prerender = true;

export async function getStaticPaths() {
  const portfolioEntries = await getCollection('portfolio');
  const paths = [];
  
  // Get list of client directories from filesystem to preserve case
  const fs = await import('node:fs/promises');
  const path = await import('node:path');
  const { contentBasePath } = await import('@utils/envUtils');
  
  const clientContentDir = path.resolve(`${contentBasePath}/client-content`);
  const clientDirs = await fs.readdir(clientContentDir, { withFileTypes: true });
  const clientNames = clientDirs
    .filter(entry => entry.isDirectory())
    .map(entry => entry.name);
  
  // Create a case-insensitive map to preserve original case
  const clientCaseMap = new Map(
    clientNames.map(name => [name.toLowerCase(), name])
  );

  for (const entry of portfolioEntries) {
    const entryPath = entry.id.replace(/\\/g, '/');
    const pathParts = entryPath.split('/');
    
    // Extract client from path for items in client-content
    const isClientContent = pathParts.includes('client-content');
    const clientIndex = pathParts.indexOf('client-content');
    const extractedClientLower = isClientContent && clientIndex !== -1 ? pathParts[clientIndex + 1] : null;
    
    // Only include client-specific portfolio items
    if (!extractedClientLower) continue;
    
    // Restore original case from filesystem
    const client = clientCaseMap.get(extractedClientLower) || extractedClientLower;
    const slug = pathParts.pop()?.replace(/\.md$/, '');
    
    paths.push({
      params: { 
        client,
        slug: slug || undefined
      },
      props: {
        entry: {
          ...entry,
          data: {
            ...entry.data,
            client,
            title: entry.data.title || entry.id.split('/').pop()?.replace(/\.md$/, '') || 'Untitled'
          }
        }
      }
    });
  }

  return paths;
}

interface Props {
  entry: {
    id: string;
    body: string;
    data: {
      title: string;
      [key: string]: any;
    }
  };
}

const { entry } = Astro.props as Props;

const contentData = {
  path: Astro.url.pathname,
  id: entry.id.replace(/\\/g, '/').split('/').pop()?.replace(/\.md$/, ''),
  title: entry.data.title,
  ...entry.data,
  date_created: entry.data.date_created || new Date().toISOString(),
  date_modified: entry.data.date_modified || new Date().toISOString()
};
---
<Layout 
  title={entry.data.title || 'Portfolio Item'}
  frontmatter={entry.data}
>
  <OneArticle
    Component={OneArticleOnPage}
    content={entry.body}
    markdownFile={entry.id}
    data={contentData}
    title={entry.data.title}
  />
</Layout>
