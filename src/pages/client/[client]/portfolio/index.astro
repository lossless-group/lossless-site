---
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import PortfolioListLayout from '@layouts/PortfolioListLayout.astro';
import PortfolioCard from '@components/tool-components/PortfolioCard.astro';
import BarePortfolioCard from '@components/tool-components/BarePortfolioCard.astro';
import { getReferenceSlug, toProperCase } from '@utils/slugify';
export const prerender = false;

// Get the client from the URL parameter
const { client } = Astro.params;

if (!client) {
  return Astro.redirect('/404');
}

// Get all portfolio entries
const allPortfolios = await getCollection('client-portfolios');

// Check if List.md exists for this client
const allClientPages = await getCollection('client-pages');
const listEntry = allClientPages.find(entry => {
  const pathParts = entry.id.split('/');
  return pathParts[0].toLowerCase() === client.toLowerCase() && 
         (entry.data.slug === 'portfolio-list' || entry.id.toLowerCase().includes('list'));
});

// Filter for the specific client's portfolio companies and process them for display
const allClientPortfolios = allPortfolios
  .filter(entry => entry.id.toLowerCase().startsWith(`${client.toLowerCase()}/portfolio/`))
  .map(entry => {
    const filename = entry.id.split('/').pop()?.replace(/\.md$/, '') || '';
    const id = getReferenceSlug(filename);
    const data = entry.data as any; // Type assertion to avoid TS errors
    
    return {
      id,
      filename,
      filePath: entry.id,
      // Explicitly set properties to avoid undefined serialization issues
      site_name: data.site_name,
      title: data.title,
      og_title: data.og_title,
      description: data.description,
      og_description: data.og_description,
      image: data.image,
      og_image: data.og_image,
      og_image_url: data.og_image_url,
      og_screenshot_url: data.og_screenshot_url,
      zinger: data.zinger,
      url: data.url || '#',
      tags: data.tags || [],
      portfolios: data.portfolios || [],
      // Add the full entry for PortfolioListLayout
      entry: entry,
    };
  })
  .filter(portfolio => portfolio.filename !== 'List'); // Exclude the List.md file

// Separate portfolios with and without images
const portfoliosWithImages = allClientPortfolios.filter(portfolio => 
  portfolio.image || portfolio.og_image || portfolio.og_image_url || portfolio.og_screenshot_url
);
const portfoliosWithoutImages = allClientPortfolios.filter(portfolio => 
  !portfolio.image && !portfolio.og_image && !portfolio.og_image_url && !portfolio.og_screenshot_url
);

// Debug logging removed
---

{listEntry && listEntry.body ? (
  <PortfolioListLayout 
    title={`${toProperCase(client)} Portfolio`}
    frontmatter={{}}
    listEntry={listEntry as any}
    portfolios={allClientPortfolios.map(portfolio => ({
      data: {
        title: portfolio.title,
        og_title: portfolio.og_title,
        description: portfolio.description,
        og_description: portfolio.og_description,
        image: portfolio.image,
        og_image: portfolio.og_image,
        og_image_url: portfolio.og_image_url,
        og_screenshot_url: portfolio.og_screenshot_url,
        url: portfolio.url,
        slug: portfolio.filename,
        zinger: portfolio.zinger,
        tags: portfolio.tags,
        site_name: portfolio.site_name,
      },
      id: portfolio.id,
      slug: portfolio.filename,
      entry: portfolio.entry,
      ...portfolio
    }))}
    includeToC={false}
    includeInfoSidebar={false}
  />
) : (
  <Layout title={`${toProperCase(client)} Portfolio`}>
    <main class="portfolio-page">
      <div class="container">
        <header class="page-header">
          <h1>{toProperCase(client)} Portfolio</h1>
          <p class="page-description">
            Our portfolio companies are building the future across various industries and technologies.
          </p>
        </header>

        <section class="portfolio-section">
          <div class="portfolio-grid">
            <!-- Render PortfolioCards for companies with images -->
            {portfoliosWithImages.map(portfolio => (
              <PortfolioCard 
                {...portfolio} 
                id={portfolio.id}
                filePath={portfolio.filePath} 
                class="portfolio-card-item" 
                data-tags={JSON.stringify(portfolio.tags || [])} 
              />
            ))}
            <!-- Render BarePortfolioCards for companies without images -->
            {portfoliosWithoutImages.map(portfolio => (
              <BarePortfolioCard 
                {...portfolio} 
                id={portfolio.id}
                filePath={portfolio.filePath} 
                class="portfolio-card-item" 
                data-tags={JSON.stringify(portfolio.tags || [])} 
              />
            ))}
          </div>
          
          {allClientPortfolios.length === 0 && (
            <p class="no-portfolios">No portfolio companies found for {toProperCase(client)}</p>
          )}
        </section>
      </div>
    </main>
  </Layout>
)}

<style>
  .portfolio-page {
    min-height: 100vh;
    padding: 2rem 1rem;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .page-header h1 {
    font-size: var(--fs-700);
    font-weight: var(--fw-bold);
    color: var(--clr-heading);
    margin-bottom: 1rem;
  }

  .page-description {
    font-size: var(--fs-400);
    color: var(--clr-body);
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.6;
  }

  .portfolio-section {
    margin-bottom: 4rem;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .portfolio-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    width: 100%;
    align-items: start;
  }

  .portfolio-card-item {
    width: 100%;
    height: auto;
  }

  .no-portfolios {
    text-align: center;
    color: var(--clr-body);
    font-style: italic;
    padding: 2rem;
    grid-column: 1 / -1;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .portfolio-page {
      padding: 1rem 0.5rem;
    }

    .page-header h1 {
      font-size: var(--fs-600);
    }

    .page-description {
      font-size: var(--fs-350);
    }

    .portfolio-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
  }

  @media (max-width: 600px) {
    .portfolio-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }
</style>
