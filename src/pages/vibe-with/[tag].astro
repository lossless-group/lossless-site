---
/**
 * /vibe-with/[tag].astro — Unified Tag Filter Page (Dynamic Route)
 *
 * Implements cross-collection tag filtering as specified in:
 *   /content/lost-in-public/prompts/render-logic/Convert-Static-Routing-to-Dynamic-Routing-in-Tags.md
 *
 * Follows comprehensive, parallel commenting rules as outlined in:
 *   /content/lost-in-public/reminders/Comprehensive-Rules-for-Code-Generation.md
 *
 * - Loads all entries from BOTH 'prompts' and 'specs' collections (see content.config.ts for keys)
 * - Filters for items where tags include the selected tag (case-insensitive)
 * - Renders a unified list with links to /vibe-with/[collection]/[...slug]
 * - Handles empty state with a friendly message
 * - All logic is thoroughly commented and DRY
 */
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import TagChip from '@components/tool-components/TagChip.astro';
import { slugify } from '@utils/slugify';

// ================================================================================
// Inline Type Definitions for [tag].astro
// -------------------------------------------------------------------------------
// These interfaces are declared inline per .windsurfrules:
//   - Types must be declared inline, not in a central file
//   - Types must be mirrored and commented where used
//   - Aggregate a list of the types information in the comment sections
// -------------------------------------------------------------------------------
/**
 * Interface: CollectionEntry
 * Represents a single entry from a content collection (prompts/specs)
 * - data: object containing frontmatter fields (title, tags, slug, etc.)
 * - id: unique string identifier (filename)
 */
interface CollectionEntry {
  data: {
    title?: string;
    tags?: string[];
    slug?: string;
    [key: string]: unknown;
  };
  id: string;
}

/**
 * Interface: ResultItem
 * Represents an item for rendering in the results list
 * - collection: 'prompts' | 'specs'
 * - entry: CollectionEntry
 */
 type ResultItem = {
  slug: string;
  title: string;
  tags: string[];
  id: string;
  collection: string;
};
// ================================================================================
// End Inline Type Definitions for [tag].astro
// -------------------------------------------------------------------------------
// --- PARAMS ---
// Get the tag from the dynamic route param
const { tag } = Astro.params;

/**
 * Helper: Case-insensitive check if a tag is present in an array of tags
 * Ensures robust filtering regardless of tag case in frontmatter
 *
 * @param tags - string[] | undefined
 * @param target - string
 * @returns boolean
 */
function tagMatches(tags: string[] | undefined, target: string): boolean {
  return Array.isArray(tags) && tags.some(t => t.toLowerCase() === target.toLowerCase());
}

/**
 * getFilteredEntries — Loads and filters both collections by tag
 *
 * - Returns an array of { collection, entry } objects for rendering
 * - Uses inline types as per project rules
 */
const prompts: CollectionEntry[] = await getCollection('prompts');
const specs: CollectionEntry[] = await getCollection('specs');

// Filter each collection for entries containing the tag
const filteredPrompts: CollectionEntry[] = prompts.filter(entry => tagMatches(entry.data.tags, tag));
const filteredSpecs: CollectionEntry[] = specs.filter(entry => tagMatches(entry.data.tags, tag));

// Combine and map to ResultItem shape
const results: ResultItem[] = [
  ...filteredPrompts.map(entry => ({
    slug: slugify(entry.id.split('/').pop()?.replace(/\.md$/, '') ?? ''),
    title: entry.data.title ?? '',
    tags: entry.data.tags ?? [],
    id: entry.id,
    collection: 'prompts',
  })),
  ...filteredSpecs.map(entry => ({
    slug: slugify(entry.id.split('/').pop()?.replace(/\.md$/, '') ?? ''),
    title: entry.data.title ?? '',
    tags: entry.data.tags ?? [],
    id: entry.id,
    collection: 'specs',
  })),
].sort((a, b) => {
  // Use type guard and String() to safely access title property if it exists
  const at = 'title' in a ? String(a.title) : '';
  const bt = 'title' in b ? String(b.title) : '';
  return at.localeCompare(bt);
});
// --- PAGE RENDERING ---
---

<Layout title={`Items tagged '${tag}'`}>
  <h1>Items tagged <TagChip tag={tag} route="vibe-with" /></h1>

  {results.length === 0 ? (
    <div class="empty-message">
      <p>No prompts or specs found with the tag <b>{tag}</b>.</p>
      <p>Try another tag or explore all items.</p>
    </div>
  ) : (
    <ul class="tag-results-list">
      {results.map(({ collection, slug, title, tags, id }) => (
        <li class="tag-result-item">
          <a
            href={`/vibe-with/${collection}/${slug}`}
            class="tag-result-link"
            aria-label={`View ${collection.slice(0, -1)}: ${title}`}
          >
            <span class="collection-label">{collection === 'prompts' ? 'Prompt' : 'Spec'}:</span>
            <span class="item-title">{title}</span>
          </a>
        </li>
      ))}
    </ul>
  )}
</Layout>

<style>
  h1 {
    font-size: var(--fs-500);
    margin-bottom: 1.2em;
  }
  .tag-results-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.75em;
    max-width: 40em;
  }
  .tag-result-item {
    background: var(--clr-lossless-primary-glass--lighter);
    border-radius: 0.3em;
    padding: 0.8em 1em;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
    display: flex;
    align-items: center;
    gap: 0.8em;
    transition: box-shadow 0.18s;
  }
  .tag-result-link {
    text-decoration: none;
    color: var(--clr-lossless-primary-darkest);
    font-size: var(--fs-350);
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.7em;
    width: 100%;
  }
  .tag-result-link:hover {
    color: var(--clr-lossless-accent);
    text-decoration: underline;
    box-shadow: 0 6px 18px rgba(0,0,0,0.10);
  }
  .collection-label {
    font-size: var(--fs-250);
    background: var(--clr-lossless-primary-dark);
    color: var(--clr-white, #fff);
    border-radius: 0.2em;
    padding: 0.1em 0.6em;
    margin-right: 0.5em;
    letter-spacing: 0.03em;
  }
  .item-title {
    font-size: var(--fs-350);
    font-weight: 600;
    letter-spacing: 0.01em;
  }
  .empty-message {
    margin-top: 2em;
    font-size: var(--fs-300);
    color: var(--clr-lossless-primary-darkest);
    background: var(--clr-lossless-primary-glass);
    border-radius: 0.3em;
    padding: 1.2em 1.5em;
    box-shadow: 0 2px 8px rgba(0,0,0,0.03);
    max-width: 32em;
  }
</style>
