---
/**
 * /vibe-with/[tag].astro â€” Unified Tag Filter Page (Static Generation)
 */
export const prerender = true;

import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import TagChip from '@components/tool-components/TagChip.astro';
import ArticleListNewsPreview from '@components/articles/ArticleListNewsPreview.astro';
import ArticleListColumn from '@components/articles/ArticleListColumn.astro';
import { getReferenceSlug } from '@utils/slugify';

export async function getStaticPaths() {
  const collections = [
    { name: 'prompts', collection: await getCollection('prompts') },
    { name: 'specs', collection: await getCollection('specs') }
  ];

  const tagMap = new Map();

  for (const { name, collection } of collections) {
    for (const entry of collection) {
      let tags = entry.data.tags;
      if (typeof tags === 'string') {
        tags = tags.split(',').map(t => t.trim()).filter(Boolean);
      }
      if (!Array.isArray(tags)) tags = [];

      for (const tag of tags) {
        const key = tag.toLowerCase();
        if (!tagMap.has(key)) tagMap.set(key, []);
        tagMap.get(key).push({ collection: name, entry });
      }
    }
  }

  return Array.from(tagMap.entries()).map(([tag, entries]) => ({
    params: { tag },
    props: { tag, entries },
  }));
}

/**
 * Interface: ResultItem
 */
const { tag, entries } = Astro.props;

const results = entries.map(({ entry, collection }) => {
  if (!entry.id) {
    throw new Error("Entry is missing ID in vibe-with/[tag].astro. Entry:", JSON.stringify(entry))
  }
  const slug = getReferenceSlug(entry.id);
  let tags = entry.data.tags;
  if (typeof tags === 'string') {
    tags = tags.split(',').map(t => t.trim()).filter(Boolean);
  }
  if (!Array.isArray(tags)) tags = [];

  return {
    slug,
    title: entry.data.title ?? '',
    lede: String(entry.data.lede ?? ''),
    banner_image: String(entry.data.banner_image ?? ''),
    tags,
    id: entry.id,
    collection,
  };
}).sort((a, b) => String(a.title).localeCompare(String(b.title)));

// Define frontmatter data for the tag page
const frontmatter = {
  title: `Items tagged '${tag}'`,
  description: `Prompts and specs tagged with '${tag}'`,
  lede: `Prompts and specs tagged with '${tag}'`
};
---

<Layout frontmatter={frontmatter}>
  <header class="display-by-tag-row">
    <h1>Items tagged:</h1>
    <TagChip tagString={tag} route="vibe-with" fontSize="var(--fs-400)" includeCount={true} count={results.length}/>
  </header>
  {results.length === 0 ? (
    <div class="empty-message">
      <p>No prompts or specs found with the tag <b>{tag}</b>.</p>
      <p>Try another tag or explore all items.</p>
    </div>
  ) : (
    <div class="news-preview-list-direct">
      <ArticleListColumn entries={results} EntryComponent={ArticleListNewsPreview} />
    </div>
  )}
</Layout>

<style>
  header {
    padding: 2rem 1rem 1rem 1rem;
  }
  .display-by-tag-row {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.75em;
    margin-bottom: 1.5em;
  }
  h1 {
    font-size: var(--fs-400);
    margin: 0;
    padding: -4px;
    line-height: 1.2;
  }
  .empty-message {
    margin-top: 2em;
    font-size: var(--fs-300);
    color: var(--clr-lossless-primary-darkest);
    background: var(--clr-lossless-primary-glass);
    border-radius: 0.3em;
    padding: 1.2em 1.5em;
    box-shadow: 0 2px 8px rgba(0,0,0,0.03);
    max-width: 32em;
  }
  .news-preview-list-direct {
    max-width: 88vw;
    margin-left: auto;
    margin-right: auto;
    display: block;
  }
</style>
