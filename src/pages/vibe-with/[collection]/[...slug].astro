---
/**
 * /vibe-with/[collection]/[...slug].astro — Unified Dynamic Route for Vibe-With Content (Multiple Collections)
 *
 * Modeled after /more-about/[...slug].astro, per project prompt:
 *   /content/lost-in-public/prompts/render-logic/Convert-Static-Routing-to-Dynamic-Routing-in-Tags.md
 *
 * Follows comprehensive, parallel commenting rules as outlined in:
 *   /content/lost-in-public/reminders/Comprehensive-Rules-for-Code-Generation.md
 *
 * - Fetches content from 'prompts', 'specs', 'reminders', and 'blueprints' collections (see content.config.ts for exact keys).
 * - Generates static paths for all entries, supporting dynamic tag navigation.
 * - Renders content using Layout, OneArticle, and OneArticleOnPage components.
 * - All logic is thoroughly commented and DRY.
 */
import { getCollection, getEntry } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import OneArticle from '@layouts/OneArticle.astro';
import OneArticleOnPage from '@components/articles/OneArticleOnPage.astro';
import { processEntries } from '@utils/slugify';

// Ensure page is prerendered as static HTML
export const prerender = true;

/**
 * getStaticPaths — Generates all static paths for the /vibe-with/[collection]/[slug] dynamic route.
 *
 * - Fetches all entries from the 'prompts', 'specs', 'reminders', and 'blueprints' collections.
 * - For each entry, generates a path with collection and slug params.
 * - Uses processEntries utility for consistent entry processing.
 * - Returns array of { params, props } objects for Astro static generation.
 */
export async function getStaticPaths() {
  // Fetch all entries from the collections
  const promptsEntries = await getCollection('prompts');
  const specsEntries = await getCollection('specs');
  const remindersEntries = await getCollection('reminders');
  const blueprintsEntries = await getCollection('blueprints');

  // Process entries using the same pipeline as client recommendations
  const processedPrompts = processEntries(promptsEntries as any);
  const processedSpecs = processEntries(specsEntries as any);
  const processedReminders = processEntries(remindersEntries as any);
  const processedBlueprints = processEntries(blueprintsEntries as any);

  // Generate paths for each collection
  const promptsPaths = processedPrompts.map(entry => {
    
    return {
      params: { collection: 'prompts', slug: entry.slug },
      props: {
        entry,
        collection: 'prompts'
      }
    };
  });

  const specsPaths = processedSpecs.map(entry => {
    const slugParts = entry.slug.split('/');
    const filenameSlug = slugParts[slugParts.length - 1];
    
    return {
      params: { collection: 'specs', slug: filenameSlug },
      props: {
        entry,
        collection: 'specs'
      }
    };
  });

  const remindersPaths = processedReminders.map(entry => {
    const slugParts = entry.slug.split('/');
    const filenameSlug = slugParts[slugParts.length - 1];
    
    return {
      params: { collection: 'reminders', slug: filenameSlug },
      props: {
        entry,
        collection: 'reminders'
      }
    };
  });

  const blueprintsPaths = processedBlueprints.map(entry => {
    const slugParts = entry.slug.split('/');
    const filenameSlug = slugParts[slugParts.length - 1];
    
    return {
      params: { collection: 'blueprints', slug: filenameSlug },
      props: {
        entry,
        collection: 'blueprints'
      }
    };
  });

  // Combine all path arrays
  return [...promptsPaths, ...specsPaths, ...remindersPaths, ...blueprintsPaths];
}

/**
 * Props interface for page rendering.
 * Mirrors /more-about/[...slug].astro for consistency.
 * Supports all four collections: 'prompts', 'specs', 'reminders', and 'blueprints'.
 */
interface Props {
  entry: any;
  collection: 'prompts' | 'specs' | 'reminders' | 'blueprints';
}

const { entry, collection } = Astro.props;

// Add content type and path to the data object for downstream components
const contentData = {
  ...entry.data, // Spread all frontmatter from the entry
  path: Astro.url.pathname,
  id: entry.id,
  collection: collection,
};

---

<Layout
  title={entry.data.title || entry.id.replace(/\.md$/, '')}
  frontmatter={entry.data}
>
  <OneArticle
    Component={OneArticleOnPage}
    title={entry.data.title}
    content={entry.body}
    markdownFile={entry.id}
    data={contentData}
  />
</Layout>